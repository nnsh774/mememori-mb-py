# AUTOGENERATED FILE. DO NOT EDIT.
from __future__ import annotations

from dataclasses import dataclass
from enum import Enum

from .flags import Flags

@dataclass
class MasterBookBase():
    Id: int
    IsIgnore: bool | None
    Memo: str

# [Description("武具のレアリティ")]
# [Flags]
class EquipmentRarityFlags(Enum):
    # [Description("None")]
    None_ = 0
    # [Description("D")]
    D = 1
    # [Description("C")]
    C = 2
    # [Description("B")]
    B = 4
    # [Description("A")]
    A = 8
    # [Description("S")]
    S = 16
    # [Description("R")]
    R = 32
    # [Description("SR")]
    SR = 64
    # [Description("SSR")]
    SSR = 128
    # [Description("UR")]
    UR = 256
    # [Description("LR")]
    LR = 512

# [MessagePackObject(True)]
@dataclass
class ActiveSkillInfo():
    # [Description("優先順位")]
    OrderNumber: int
    # [Description("スキル説明文キー")]
    DescriptionKey: str
    # [Description("キャラクターレベル制限")]
    CharacterLevel: int
    # [Description("専属武具レアリティ")]
    EquipmentRarityFlags: Flags[EquipmentRarityFlags]
    # [Description("加護ID")]
    BlessingItemId: int
    # [Description("サブセットIDリスト")]
    SubSetSkillIds: list[int]

# [Description("端末&プラットフォーム種別")]
class DeviceType(Enum):
    # [Description("iOS")]
    iOS = 1
    # [Description("Android")]
    Android = 2
    # [Description("Unity")]
    UnityEditor = 3
    # [Description("Windows")]
    Win64 = 4
    # [Description("DmmGames")]
    DmmGames = 5
    # [Description("Steam")]
    Steam = 6
    # [Description("BlueStacks")]
    BlueStacks = 7

# [Description("基礎パラメータ")]
# [MessagePackObject(True)]
@dataclass
class BaseParameter():
    # [Description("技力​")]
    Energy: int
    # [Description("耐久力​")]
    Health: int
    # [Description("魔力")]
    Intelligence: int
    # [Description("筋力")]
    Muscle: int

# [Description("バトルパラメータ")]
# [MessagePackObject(True)]
@dataclass
class BattleParameter():
    # [Description("攻撃力")]
    AttackPower: int
    # [Description("回避")]
    Avoidance: int
    # [Description("クリティカル")]
    Critical: int
    # [Description("クリダメ強化")]
    CriticalDamageEnhance: int
    # [Description("クリティカル耐性")]
    CriticalResist: int
    # [Description("ダメージ強化")]
    DamageEnhance: int
    # [Description("カウンタ​")]
    DamageReflect: int
    # [Description("弱体効果命中​")]
    DebuffHit: int
    # [Description("弱体効果耐性")]
    DebuffResist: int
    # [Description("防御力")]
    Defense: int
    # [Description("防御貫通力")]
    DefensePenetration: int
    # [Description("命中")]
    Hit: int
    # [Description("HP")]
    HP: int
    # [Description("HP吸収")]
    HpDrain: int
    # [Description("魔法クリダメ緩和")]
    MagicCriticalDamageRelax: int
    # [Description("魔法ダメージ緩和")]
    MagicDamageRelax: int
    # [Description("物理クリダメ緩和")]
    PhysicalCriticalDamageRelax: int
    # [Description("物理ダメージ緩和")]
    PhysicalDamageRelax: int
    # [Description("スピード​")]
    Speed: int

# [Description("キャラクターのレアリティ")]
# [Flags]
class CharacterRarityFlags(Enum):
    # [Description("None")]
    None_ = 0
    # [Description("N")]
    N = 1
    # [Description("R")]
    R = 2
    # [Description("R+")]
    RPlus = 4
    # [Description("SR")]
    SR = 8
    # [Description("SR+")]
    SRPlus = 16
    # [Description("SSR")]
    SSR = 32
    # [Description("SSR+")]
    SSRPlus = 64
    # [Description("UR")]
    UR = 128
    # [Description("UR+")]
    URPlus = 256
    # [Description("LR")]
    LR = 512
    # [Description("LR+")]
    LRPlus = 1024
    # [Description("LR+2")]
    LRPlus2 = 2048
    # [Description("LR+3")]
    LRPlus3 = 4096
    # [Description("LR+4")]
    LRPlus4 = 8192
    # [Description("LR+5")]
    LRPlus5 = 16384
    # [Description("LR+6")]
    LRPlus6 = 32768
    # [Description("LR+7")]
    LRPlus7 = 65536
    # [Description("LR+8")]
    LRPlus8 = 131072
    # [Description("LR+9")]
    LRPlus9 = 262144
    # [Description("LR+10")]
    LRPlus10 = 524288

class ElementType(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("愁（しゅう）")]
    Blue = 1
    # [Description("業（ごう）")]
    Red = 2
    # [Description("心（しん）")]
    Green = 3
    # [Description("渇（かつ）")]
    Yellow = 4
    # [Description("天（てん） ")]
    Light = 5
    # [Description("冥（めい） ")]
    Dark = 6

# [Description("職業")]
# [Flags]
class JobFlags(Enum):
    # [Description("None")]
    None_ = 0
    # [Description("ウォリアー")]
    Warrior = 1
    # [Description("スナイパー")]
    Sniper = 2
    # [Description("ソーサラー")]
    Sorcerer = 4

class UnitIconType(Enum):
    # [Description("キャラクター")]
    Character = 0
    # [Description("敵キャラクター")]
    EnemyCharacter = 1
    # [Description("魔女クリファ")]
    WitchQlipha = 2

@dataclass
class IBattleEnemy():
    ActiveSkillIds: list[int]
    BaseParameter: BaseParameter
    BattleEnemyCharacterId: int
    BattleParameter: BattleParameter
    BattlePower: int
    CharacterRarityFlags: Flags[CharacterRarityFlags]
    ElementType: ElementType
    EnemyAdjustId: int
    EnemyEquipmentId: int
    EnemyRank: int
    JobFlags: Flags[JobFlags]
    NameKey: str
    NormalSkillId: int
    PassiveSkillIds: list[int]
    UnitIconId: int
    UnitIconType: UnitIconType

# [Description("バトルタイプ")]
class BattleScheduleType(Enum):
    # [Description("バトルタイプなし")]
    None_ = 0
    # [Description("クエスト(ボス、オートバトル)")]
    Quest = 1
    # [Description("無窮の塔")]
    TowerInfinite = 2
    # [Description("愁（しゅう）")]
    TowerBlue = 3
    # [Description("業（ごう）")]
    TowerRed = 4
    # [Description("心（しん）")]
    TowerGreen = 5
    # [Description("渇（かつ）")]
    TowerYellow = 6

class CharacterColorType(Enum):
    None_ = 0
    BluePurple = 1
    BlueGreen = 2
    RedPeach = 3
    BrightYellow = 4
    Gray = 5

# [Description("懸賞カウンタータイプ")]
class BountyQuestType(Enum):
    # [Description("ソロ")]
    Solo = 0
    # [Description("チーム")]
    Team = 1
    # [Description("ゲリラ")]
    Guerrilla = 2

# [Description("祈りの泉クエストレアリティ")]
# [Flags]
class BountyQuestRarityFlags(Enum):
    # [Description("None")]
    None_ = 0
    # [Description("N*")]
    NInit = 1
    # [Description("N")]
    N = 2
    # [Description("R")]
    R = 4
    # [Description("SR")]
    SR = 8
    # [Description("SSR")]
    SSR = 16
    # [Description("UR")]
    UR = 32
    # [Description("LR")]
    LR = 64

# [MessagePackObject(True)]
@dataclass
class BoardRankConditionInfo():
    # [Description("懸賞カウンタークエストタイプ")]
    BountyQuestType: BountyQuestType
    # [Description("クエストレベル")]
    BountyQuestRarity: BountyQuestRarityFlags
    # [Description("必要な数")]
    RequireCount: int
    # [Description("累計必要クリア数")]
    TotalRequireCount: int

@dataclass
class IHasStartEndTime():
    # [DateTimeString]
    EndTime: str
    # [DateTimeString]
    StartTime: str

# [Description("アイテムの種類")]
class ItemType(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("無償仮想通貨")]
    CurrencyFree = 1
    # [Description("有償仮想通貨")]
    CurrencyPaid = 2
    # [Description("ゲーム内通貨")]
    Gold = 3
    # [Description("武具")]
    Equipment = 4
    # [Description("武具の欠片")]
    EquipmentFragment = 5
    # [Description("キャラクター")]
    Character = 6
    # [Description("キャラクターの絆")]
    CharacterFragment = 7
    # [Description("洞窟の加護")]
    DungeonBattleRelic = 8
    # [Description("アダマンタイト")]
    EquipmentSetMaterial = 9
    # [Description("n時間分アイテム")]
    QuestQuickTicket = 10
    # [Description("キャラ育成素材")]
    CharacterTrainingMaterial = 11
    # [Description("武具強化アイテム")]
    EquipmentReinforcementItem = 12
    # [Description("交換所アイテム")]
    ExchangePlaceItem = 13
    # [Description("スフィア")]
    Sphere = 14
    # [Description("魔装強化アイテム")]
    MatchlessSacredTreasureExpItem = 15
    # [Description("ガチャチケット")]
    GachaTicket = 16
    # [Description("宝箱、未鑑定スフィアなど")]
    TreasureChest = 17
    # [Description("宝箱の鍵")]
    TreasureChestKey = 18
    # [Description("ボスチケット")]
    BossChallengeTicket = 19
    # [Description("無窮の塔チケット")]
    TowerBattleTicket = 20
    # [Description("回復の果実")]
    DungeonRecoveryItem = 21
    # [Description("プレイヤー経験値")]
    PlayerExp = 22
    # [Description("フレンドポイント")]
    FriendPoint = 23
    # [Description("生命樹の雫")]
    EquipmentRarityCrystal = 24
    # [Description("レベルリンク経験値")]
    LevelLinkExp = 25
    # [Description("ギルドストック")]
    GuildFame = 26
    # [Description("ギルド経験値")]
    GuildExp = 27
    # [Description("貢献メダル")]
    ActivityMedal = 28
    # [Description("VIP経験値")]
    VipExp = 29
    # [Description("イベント交換所アイテム")]
    EventExchangePlaceItem = 50

# [MessagePackObject(True)]
@dataclass
class BountyQuestEventTargetItemInfo():
    ItemId: int
    ItemType: ItemType

# [MessagePackObject(True)]
@dataclass
class BountyQuestEventTargetQuestTypeInfo():
    BountyQuestType: BountyQuestType

# [Description("全てのアイテムが実装するインターフェース")]
# [Union(0, typeof)]
@dataclass
class IUserItem():
    # [Description("アイテムの数")]
    # [PropertyOrder(3)]
    ItemCount: int
    # [Description("アイテムのID")]
    # [PropertyOrder(2)]
    ItemId: int
    # [Description("アイテムの種類")]
    # [PropertyOrder(1)]
    ItemType: ItemType

# [MessagePackObject(True)]
@dataclass
class UserItem(IUserItem):
    ItemCount: int
    ItemId: int
    ItemType: ItemType

# [Description("アイテム変換タイプ")]
class ChangeItemType(Enum):
    # [Description("販売")]
    Sell = 0
    # [Description("合成")]
    Compose = 1

# [Description("基礎パラメータの種類")]
class BaseParameterType(Enum):
    # [Description("筋力")]
    Muscle = 1
    # [Description("技力")]
    Energy = 2
    # [Description("魔力")]
    Intelligence = 3
    # [Description("耐久力")]
    Health = 4

# [Description("パラメーター増減タイプ")]
class ChangeParameterType(Enum):
    # [Description("加算(+X)")]
    Addition = 1
    # [Description("乗算(+X%)")]
    AdditionPercent = 2
    # [Description("キャラLv×係数")]
    CharacterLevelConstantMultiplicationAddition = 3

# [Description("基礎パラメータ変動情報")]
# [MessagePackObject(True)]
@dataclass
class BaseParameterChangeInfo():
    # [Description("変動する基礎パラメータ")]
    # [PropertyOrder(1)]
    BaseParameterType: BaseParameterType
    # [Description("パラメータ増減タイプ")]
    # [PropertyOrder(2)]
    ChangeParameterType: ChangeParameterType
    # [Description("値")]
    # [PropertyOrder(3)]
    Value: float

# [Description("バトルパラメータの種類")]
class BattleParameterType(Enum):
    # [Description("HP")]
    Hp = 1
    # [Description("攻撃力")]
    AttackPower = 2
    # [Description("物理ダメージ緩和")]
    PhysicalDamageRelax = 3
    # [Description("魔法ダメージ緩和")]
    MagicDamageRelax = 4
    # [Description("命中")]
    Hit = 5
    # [Description("回避")]
    Avoidance = 6
    # [Description("クリティカル")]
    Critical = 7
    # [Description("クリティカル耐性")]
    CriticalResist = 8
    # [Description("クリダメ強化")]
    CriticalDamageEnhance = 9
    # [Description("物理クリダメ緩和")]
    PhysicalCriticalDamageRelax = 10
    # [Description("魔法クリダメ緩和")]
    MagicCriticalDamageRelax = 11
    # [Description("防御貫通力")]
    DefensePenetration = 12
    # [Description("防御力")]
    Defense = 13
    # [Description("物魔防御貫通")]
    DamageEnhance = 14
    # [Description("弱体効果命中")]
    DebuffHit = 15
    # [Description("弱体効果耐性")]
    DebuffResist = 16
    # [Description("リフレクト")]
    DamageReflect = 17
    # [Description("HP吸収")]
    HpDrain = 18
    # [Description("スピード")]
    Speed = 19

# [Description("バトルパラメータ変動情報")]
# [MessagePackObject(True)]
@dataclass
class BattleParameterChangeInfo():
    # [Description("変動するバトルパラメータ")]
    # [PropertyOrder(1)]
    BattleParameterType: BattleParameterType
    # [Description("パラメータ増減タイプ")]
    # [PropertyOrder(2)]
    ChangeParameterType: ChangeParameterType
    # [Description("値")]
    # [PropertyOrder(3)]
    Value: float

@dataclass
class IHasJstStartEndTime():
    # [DateTimeString]
    EndTimeFixJST: str
    # [DateTimeString]
    StartTimeFixJST: str

# [Description("キャラクターボイスの分類")]
class CharacterVoiceCategory(Enum):
    # [Description("通常セリフ")]
    Basic = 0
    # [Description("誕生日セリフ")]
    Birthday = 1
    # [Description("カムバックセリフ")]
    ComeBack = 2
    # [Description("ログインセリフ")]
    Login = 3
    # [Description("ランクアップセリフ")]
    RankUp = 4
    # [Description("その他")]
    Other = 5
    # [Description("登場")]
    Appear = 6
    # [Description("決め台詞")]
    SignaturePhrase = 7
    # [Description("バトル勝利")]
    BattleWin = 8
    # [Description("バトル敗北")]
    BattleLose = 9

class TimelineType(Enum):
    MyPage = 0
    Battle = 1
    Skill = 2
    SkillQlipha = 3
    Memory = 4
    MyPageQlipha = 5

# [MessagePackObject(True)]
@dataclass
class CharacterVoicePath():
    # [Description("TimelineId")]
    # [PropertyOrder(2)]
    TimelineId: int
    # [Description("TimelineType")]
    # [PropertyOrder(1)]
    TimelineType: TimelineType

# [Description("視聴可能ボイスの解放条件")]
class UnlockCharacterDetailVoiceType(Enum):
    # [Description("条件無し")]
    None_ = 0
    # [Description("ランクアップボイス1")]
    RankUp1 = 1
    # [Description("ランクアップボイス2")]
    RankUp2 = 2
    # [Description("ランクアップボイス3")]
    RankUp3 = 3
    # [Description("ランクアップボイス4")]
    RankUp4 = 4
    # [Description("ランクアップボイス5")]
    RankUp5 = 5
    # [Description("ランクアップボイス6")]
    RankUp6 = 6
    # [Description("誕生日")]
    Birthday = 7
    # [Description("メモリー全視聴")]
    MemoryComplete = 8
    # [Description("クエストクリア")]
    QuestClear = 9

class CharacterType(Enum):
    Normal = 0
    Qlipha = 1
    ColorChange = 2

# [Description("アイテムのレアリティ")]
# [Flags]
class ItemRarityFlags(Enum):
    # [Description("None")]
    None_ = 0
    # [Description("D")]
    D = 1
    # [Description("C")]
    C = 2
    # [Description("B")]
    B = 4
    # [Description("A")]
    A = 8
    # [Description("S")]
    S = 16
    # [Description("R")]
    R = 32
    # [Description("SR")]
    SR = 64
    # [Description("SSR")]
    SSR = 128
    # [Description("UR")]
    UR = 256
    # [Description("LR")]
    LR = 512

# [MessagePackObject(True)]
@dataclass
class CharacterRarityCoefficientInfo():
    m: float
    b: int

# [Description("キャラクターの血液型")]
class CharacterBloodType(Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("A型")]
    A = 1
    # [Description("B型")]
    B = 2
    # [Description("O型")]
    O = 3
    # [Description("AB型")]
    AB = 4

# [Description("各言語に翻訳されたテキスト")]
# [MessagePackObject(True)]
@dataclass
class TranslatedText():
    # [Description("日本語")]
    # [PropertyOrder(1)]
    jaJP: str
    # [Description("英語")]
    # [PropertyOrder(2)]
    enUS: str
    # [Description("韓国語")]
    # [PropertyOrder(3)]
    koKR: str
    # [Description("中国語(繁体字)")]
    # [PropertyOrder(4)]
    zhTW: str
    # [Description("中国語(簡体字)")]
    # [PropertyOrder(5)]
    zhCN: str
    # [Description("フランス語")]
    # [PropertyOrder(6)]
    frFR: str
    # [Description("スペイン語")]
    # [PropertyOrder(7)]
    esMX: str
    # [Description("ポルトガル語")]
    # [PropertyOrder(8)]
    ptBR: str
    # [Description("タイ語")]
    # [PropertyOrder(9)]
    thTH: str
    # [Description("インドネシア語")]
    # [PropertyOrder(10)]
    idID: str
    # [Description("ベトナム語")]
    # [PropertyOrder(11)]
    viVN: str
    # [Description("ロシア語")]
    # [PropertyOrder(12)]
    ruRU: str
    # [Description("ドイツ語")]
    # [PropertyOrder(13)]
    deDE: str
    # [Description("アラビア語")]
    # [PropertyOrder(14)]
    arEG: str

# [Description("ランクアップ·タイプ")]
class ElementClassificationType(Enum):
    # [Description("None")]
    None_ = 0
    # [Description("基本属性")]
    DefaultElement = 1
    # [Description("特殊属性")]
    SpecialElement = 2

# [Description("ランクアップ·タイプ")]
class RankUpType(Enum):
    # [Description("None")]
    None_ = 0
    # [Description("同一属性")]
    ElementType = 1
    # [Description("同じキャラクターID")]
    SameName = 2

# [Description("地域タイプ")]
class CountryCodeType(Enum):
    # [Description("日本")]
    Japan = 0
    # [Description("アメリカ(英語圏)")]
    America = 1
    # [Description("韓国")]
    Korea = 2
    # [Description("台湾")]
    Taiwan = 3

# [Description("ミッション達成条件タイプ")]
class MissionAchievementType(Enum):
    # [Description("無し")]
    None_ = 0
    # [Description("日付をまたいでログインした時")]
    Login = 100
    # [Description("ダイヤによる購入")]
    BoughtByCurrency = 200
    # [Description("フレンドコード使用")]
    UseFriendCode = 300
    # [Description("新キャラミッション")]
    NewCharacter = 1000
    # [Description("カムバックミッション中に貢献メダルを獲得した時")]
    MissionTotalActivityAtComeback = 1010100
    # [Description("新キャラミッション中に貢献メダルを獲得した時")]
    MissionTotalActivityAtNewCharacterMission = 1010200
    # [Description("期間限定ミッション中に貢献メダルを獲得した時")]
    MissionTotalActivityAtEvent = 1010300
    # [Description("マイページで自己紹介文を変更した時")]
    PlayerInfoEditComment = 2010100
    # [Description("フレンドになった最大の人数")]
    FriendMaxFriendCount = 3010100
    # [Description("フレンドポイントを送信した時")]
    FriendSendFriendPointCount = 3010200
    # [Description("アカウント連携を行った時")]
    SocialAuthAccount = 4010100
    # [Description("公式Twitterフォロー")]
    SocialFollowOfficialTwitter = 4020100
    # [Description("公式Youtubeフォロー")]
    SocialFollowOfficialYoutube = 4020200
    # [Description("ショップ（聖装鋼タブ）購入回数")]
    ExchangeLegendForgeMergeCount = 5010100
    # [Description("ショップ（精錬鋼タブ）購入回数")]
    ExchangeEquipmentForgeMergeCount = 5020200
    # [Description("ショップ（全てのタブ）購入回数")]
    ExchangeAllBuyCount = 5030100
    # [Description("ショップ（レギュラータブ）購入回数")]
    ExchangeRegularBuyCount = 5030200
    # [Description("ショップ（ギルドタブ）購入回数")]
    ExchangeGvGBuyCount = 5040100
    # [Description("ショップ（時空の洞窟タブ）購入回数")]
    ExchangeDungeonBattleBuyCount = 5050100
    # [Description("ロイヤルショップのダイヤ購入でダイヤを購入した時")]
    ShopTotalBuyCurrency = 6010100
    # [Description("キャラレベルアップ")]
    CharacterLevelUpCount = 7010100
    # [Description("レベルリンク達成レベル")]
    CharacterLevelLinkMaxLevel = 7010200
    # [Description("武具達成レベル")]
    CharacterEquipmentMaxLevel = 7010300
    # [Description("Lv1スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel1 = 7010401
    # [Description("Lv2スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel2 = 7010402
    # [Description("Lv3スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel3 = 7010403
    # [Description("Lv4スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel4 = 7010404
    # [Description("Lv5スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel5 = 7010405
    # [Description("Lv6スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel6 = 7010406
    # [Description("Lv7スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel7 = 7010407
    # [Description("Lv8スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel8 = 7010408
    # [Description("Lv9スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel9 = 7010409
    # [Description("魔装達成レベル")]
    CharacterMatchlessSacredTreasureMaxLevel = 7010500
    # [Description("聖装達成レベル")]
    CharacterLegendSacredTreasureMaxLevel = 7010600
    # [Description("武具研磨回数")]
    CharacterEquipmentTrainingCount = 7010700
    # [Description("武具強化達成レベル")]
    CharacterEquipmentReinforceMaxLevel = 7010800
    # [Description("神装強化回数")]
    CharacterEquipmentMergeCount = 7010900
    # [Description("最大総戦闘力")]
    CharacterMaxBattlePower = 7011000
    # [Description("キャラクター達成レベル")]
    CharacterCharacterMaxLevel = 7011100
    # [Description("武具強化最大達成レベル")]
    CharacterAllEquipmentReinforceMaxLevel = 7011200
    # [Description("キャラクター最高到達レアリティ")]
    CharacterRankUpMaxRarity = 7020100
    # [Description("キャラクター進化回数")]
    CharacterRankUpEvolutionCount = 7020200
    # [Description("レベルリンク枠解放数")]
    CharacterLevelLinkOpenSlotCount = 7030100
    # [Description("最高所持スフィアレベル")]
    EquipmentSphereMaxLevel = 8010100
    # [Description("スフィア合成回数")]
    EquipmentSphereComposeCount = 8010200
    # [Description("精錬武具（武具鋳造）個数")]
    EquipmentForgeCount = 8020100
    # [Description("Rナヘマー武具シリーズ合成回数")]
    EquipmentComposeCountR = 8030101
    # [Description("SRサンダルフォン武具シリーズ合成回数")]
    EquipmentComposeCountSR = 8030102
    # [Description("SSRアスタロト武具シリーズ合成回数")]
    EquipmentComposeCountSSR = 8030103
    # [Description("プレイヤー達成レベル")]
    AutoBattleMaxPlayerLevel = 9010100
    # [Description("獲得した合計領民数")]
    AutoBattleAddPopulation = 9010200
    # [Description("ボス勝利回数")]
    BossBattleVictoryCount = 9010300
    # [Description("最高到達クエスト")]
    AutoBattleMaxClearQuest = 9010400
    # [Description("最高到達章")]
    AutoBattledMaxClearChapter = 9010500
    # [Description("放置バトル報酬受け取り回数")]
    AutoBattleGetRewardCount = 9010600
    # [Description("高速バトル回数")]
    AutoBattleQuickCount = 9020100
    # [Description("時空の洞窟階層3クリア回数")]
    DungeonBattleClearThirdFloorCount = 10010100
    # [Description("時空の洞窟階層1クリア回数")]
    DungeonBattleClearFirstFloorCount = 10010200
    # [Description("時空の洞窟で〇人以上の○○タイプのキャラを使って戦闘に勝利")]
    DungeonBattleClearUnitJobTypeBase = 10010300
    # [Description("時空の洞窟で1人以上のウォリアータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear1UnitWarriorType = 10010311
    # [Description("時空の洞窟で1人以上のスナイパータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear1UnitSniperType = 10010312
    # [Description("時空の洞窟で1人以上のソーサラータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear1UnitSorcererType = 10010314
    # [Description("時空の洞窟で2人以上のウォリアータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear2UnitWarriorType = 10010321
    # [Description("時空の洞窟で2人以上のスナイパータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear2UnitSniperType = 10010322
    # [Description("時空の洞窟で2人以上のソーサラータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear2UnitSorcererType = 10010324
    # [Description("時空の洞窟で3人以上のウォリアータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear3UnitWarriorType = 10010331
    # [Description("時空の洞窟で3人以上のスナイパータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear3UnitSniperType = 10010332
    # [Description("時空の洞窟で3人以上のソーサラータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear3UnitSorcererType = 10010334
    # [Description("時空の洞窟で4人以上のウォリアータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear4UnitWarriorType = 10010341
    # [Description("時空の洞窟で4人以上のスナイパータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear4UnitSniperType = 10010342
    # [Description("時空の洞窟で4人以上のソーサラータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear4UnitSorcererType = 10010344
    # [Description("時空の洞窟で5人以上のウォリアータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear5UnitWarriorType = 10010351
    # [Description("時空の洞窟で5人以上のスナイパータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear5UnitSniperType = 10010352
    # [Description("時空の洞窟で5人以上のソーサラータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear5UnitSorcererType = 10010354
    # [Description("時空の洞窟新キャラミッション")]
    DungeonBattleNewCharacter = 10011000
    # [Description("無窮の塔階層クリア数")]
    TowerBattleMaxClearFloor = 11010100
    # [Description("属性の塔到達下限階層")]
    TowerBattleMinClearElementTower = 11010200
    # [Description("無窮の塔勝利回数")]
    TowerBattleTotalWinCount = 11010300
    # [Description("バトルリーグ挑戦回数")]
    BattleLeagueChallengeCount = 12010100
    # [Description("バトルリーグ最高順位")]
    BattleLeagueMaxRanking = 12010200
    # [Description("幻影の神殿勝利回数")]
    LocalRaidVictoryCount = 13010100
    # [Description("祈りの泉クエスト受領回数")]
    BountyQuestAllStartQuestCount = 14010100
    # [Description("祈りの泉新キャラミッション")]
    BountyQuestNewCharacter = 14011000
    # [Description("祈りの泉マルチクエスト受領回数")]
    BountyQuestTeamStartQuestCount = 14020100
    # [Description("キャラ入手数")]
    GachaNewJoinCharacter = 15010100
    # [Description("キャラガチャ回数")]
    GachaDrawCount = 15010200
    # [Description("ダイヤ消費量")]
    ConsumeCurrencyCount = 15010300
    # [Description("ギルド加入回数")]
    GuildJoinCount = 16010100
    # [Description("ギルドログイン回数")]
    GuildLoginCount = 16010200
    # [Description("ギルドレイド回数（解放ボス含む）")]
    GuildGuildRaidChallengeCount = 16020100
    # [Description("ワールドチャット発言回数")]
    ChatSayWorldChatCount = 17010100
    # [Description("アップデート回数")]
    OsStoreUpdateCount = 18010100

# [Description("SNS情報")]
# [MessagePackObject(True)]
@dataclass
class SnsInfo():
    # [Description("SNS名称のキー")]
    NameKey: str
    # [Description("URL")]
    Url: str
    # [Description("ミッション達成条件タイプ")]
    MissionAchievementType: MissionAchievementType

# [Description("遷移先タイプ")]
class TransferSpotType(Enum):
    # [Description("遷移無し")]
    None_ = 0
    # [Description("放置バトル")]
    AutoBattle = 10
    # [Description("祈りの泉")]
    BountyQuest = 20
    # [Description("時空の洞窟")]
    DungeonBattle = 30
    # [Description("ガチャ")]
    GachaCase = 40
    # [Description("試練")]
    Competition = 50
    # [Description("幻影の神殿")]
    LocalRaid = 60
    # [Description("お知らせ")]
    Notice = 70
    # [Description("ロイヤルショップ（タブ指定）")]
    ShopTab = 80
    # [Description("ロイヤルショップ（商品指定）")]
    ShopItem = 81
    # [Description("無窮の塔（通常）")]
    TowerBattle = 90
    # [Description("無窮の塔（塔指定）")]
    TowerBattleSelectTower = 91
    # [Description("交換所")]
    TradeShop = 100
    # [Description("外部ウェブサイト")]
    OuterWebSite = 110
    # [Description("月間ログインボーナス")]
    MonthlyLoginBonus = 120
    # [Description("期間限定ログインボーナス")]
    LimitedLoginBonus = 121
    # [Description("初心者ミッション")]
    BeginnerMission = 130
    # [Description("カムバックミッション")]
    ComebackMission = 131
    # [Description("新キャラミッション")]
    NewCharacterMission = 132
    # [Description("イベントミッション")]
    EventMission = 133
    # [Description("友達招待")]
    FriendCampaign = 134
    # [Description("ゲリラパック")]
    GuerrillaPack = 140
    # [Description("格納アイコン")]
    StoreIcon = 150
    # [Description("キャラ")]
    Character = 160
    # [Description("チャット")]
    Chat = 170
    # [Description("ギルド")]
    Guild = 180
    # [Description("ギルドレイド")]
    GuildRaid = 181
    # [Description("ギルドレイドワールドダメージ報酬ダイアログ")]
    GuildRaidWorldReward = 182
    # [Description("フレンド")]
    Friend = 4

# [MessagePackObject(True)]
@dataclass
class TransferDetailInfo():
    # [Description("遷移先詳細１")]
    # [PropertyOrder(2)]
    NumberInfo1: int
    # [Description("遷移先詳細２")]
    # [PropertyOrder(3)]
    NumberInfo2: int
    # [Description("遷移先詳細３")]
    # [PropertyOrder(4)]
    StringInfo: str
    # [Description("遷移タイプ")]
    # [PropertyOrder(1)]
    TransferSpotType: TransferSpotType

# [Description("時空の洞窟 マス種別")]
class DungeonBattleGridType(Enum):
    # [Description("初期地点")]
    Start = 0
    # [Description("バトルマス（通常）")]
    BattleNormal = 1
    # [Description("バトルマス（エリート）")]
    BattleElite = 2
    # [Description("バトルマス（ボス）")]
    BattleBoss = 3
    # [Description("バトルマス（ボス）加護無し")]
    BattleBossNoRelic = 4
    # [Description("回復マス")]
    Recovery = 5
    # [Description("キャラ加入マス")]
    JoinCharacter = 6
    # [Description("ミステリーショップマス")]
    Shop = 7
    # [Description("加護強化マス")]
    RelicReinforce = 8
    # [Description("加護の挑戦マス")]
    BattleAndRelicReinforce = 9
    # [Description("カロンマス")]
    TreasureChest = 10
    # [Description("復活")]
    Revival = 11
    # [Description("イベント通常バトルマス")]
    EventBattleNormal = 12
    # [Description("イベント強敵バトルマス")]
    EventBattleElite = 13
    # [Description("イベント特殊バトルマス")]
    EventBattleSpecial = 14

# [Description("時空の洞窟　戦闘力ボーナス対象")]
class DungeonBattleRelicBattlePowerBonusTargetType(Enum):
    # [Description("すべて")]
    All = 0
    # [Description("愁（しゅう）")]
    ElementBlue = 1
    # [Description("業（ごう）")]
    ElementRed = 2
    # [Description("心（しん）")]
    ElementGreen = 3
    # [Description("渇（かつ）")]
    ElementYellow = 4
    # [Description("ウォリアー")]
    Warrior = 5
    # [Description("スナイパー")]
    Sniper = 6
    # [Description("ソーサラー")]
    Sorcerer = 7

# [Description("時空の洞窟 加護レアリティ")]
class DungeonBattleRelicRarityType(Enum):
    None_ = 0
    # [Description("R")]
    R = 1
    # [Description("SR")]
    SR = 2
    # [Description("SSR")]
    SSR = 3

# [Description("パッシブスキル種別")]
class PassiveType(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("キャラパッシブタイプ")]
    EachUnit = 1
    # [Description("チームパッシブタイプ")]
    Team = 2

# [MessagePackObject(True)]
@dataclass
class PassiveSkillTypeInfo():
    # [Description("パッシブタイプ")]
    PassiveType: PassiveType
    # [Description("パッシブスキルID")]
    PassiveSkillId: int

# [Description("エフェクトグループアイコンタイプ")]
class EffectGroupIconType(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("キャラクター")]
    Character = 1
    # [Description("加護")]
    Blessing = 2
    # [Description("敵")]
    Enemy = 3
    # [Description("専属武器")]
    ExclusiveWeapon = 4

# [Description("属性条件タイプ")]
class ElementBonusConditionType(Enum):
    # [Description("4属性+天")]
    Default = 0
    # [Description("冥属性")]
    Dark = 1

# [Description("属性ボーナス発動段階タイプ")]
class ElementBonusPhaseType(Enum):
    # [Description("None")]
    None_ = 0
    # [Description("段階1")]
    First = 1
    # [Description("段階2")]
    Second = 2
    # [Description("段階3")]
    Third = 3
    # [Description("段階4")]
    Fourth = 4
    # [Description("段階5")]
    Fifth = 5

# [Description("必要アイテム情報")]
# [MessagePackObject(True)]
@dataclass
class EquipmentEvolutionInfo():
    # [Description("レアリティ")]
    # [PropertyOrder(1)]
    RarityFlags: Flags[EquipmentRarityFlags]
    # [Description("進化前武具レベル")]
    # [PropertyOrder(2)]
    BeforeEquipmentLv: int
    # [Description("進化後武具レベル")]
    # [PropertyOrder(3)]
    AfterEquipmentLv: int
    # [Description("必要アイテムリスト")]
    # [Nest(True, 1)]
    # [PropertyOrder(4)]
    RequiredItemList: list[UserItem]

# [Description("武具進化の種類")]
class EvolutionType(Enum):
    # [Description("レベル最大値上昇")]
    ReinforcementLevelMaximumUp = 0
    # [Description("レアリティ上昇")]
    RarityUp = 1

# [Description("武具カテゴリ")]
class EquipmentCategory(Enum):
    # [Description("通常武具")]
    Normal = 1
    # [Description("セット武具")]
    Set = 2
    # [Description("専用武器")]
    Exclusive = 3

# [Description("武具の種類")]
class EquipmentSlotType(Enum):
    # [Description("武器")]
    Weapon = 1
    # [Description("装飾品")]
    Sub = 2
    # [Description("アーム")]
    Gauntlet = 3
    # [Description("メット")]
    Helmet = 4
    # [Description("メイル")]
    Armor = 5
    # [Description("ブーツ")]
    Shoes = 6

# [Description("武具強化必要アイテム情報")]
# [MessagePackObject(True)]
@dataclass
class EquipmentReinforcementMaterialInfo():
    # [Description("レベル")]
    # [PropertyOrder(1)]
    Lv: int
    # [Description("必要アイテム")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    RequiredItemList: list[UserItem]

# [Description("セット装備の効果")]
# [MessagePackObject(True)]
@dataclass
class EquipmentSetEffect():
    # [Description("発動効果(BaseParameter)")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    BaseParameterChangeInfo: BaseParameterChangeInfo
    # [Description("発動効果(BattleParameter)")]
    # [Nest(True, 1)]
    # [PropertyOrder(3)]
    BattleParameterChangeInfo: BattleParameterChangeInfo
    # [Description("発動に必要な装備数")]
    # [PropertyOrder(1)]
    RequiredEquipmentCount: int

class ErrorMessageType(Enum):
    None_ = 0
    Dialog = 1
    DialogWithError = 2
    Toast = 3

@dataclass
class ICharacterImage():
    # [Description("キャラ画像Id")]
    CharacterImageId: int
    # [Description("キャラ画像座標X")]
    CharacterImageX: float
    # [Description("キャラ画像座標Y")]
    CharacterImageY: float
    # [Description("キャラ画像サイズ")]
    CharacterImageSize: float

# [Description("ミッション遷移先タイプ")]
class MissionTransitionDestinationType(Enum):
    # [Description("遷移先無し")]
    None_ = 0
    # [Description("デイリーミッション")]
    MissionDaily = 101
    # [Description("プレイヤー情報")]
    PlayerInfo = 201
    # [Description("フレンド一覧")]
    Friend = 301
    # [Description("アカウント連携")]
    LinkAccount = 401
    # [Description("Twitter ")]
    Twitter = 402
    # [Description("YouTube")]
    YouTube = 403
    # [Description("ショップ（武具合成＿聖装タブ）")]
    ExchangeLegendForge = 501
    # [Description("ショップ（武具合成＿通常タブ）")]
    ExchangeEquipmentForge = 502
    # [Description("ショップ（店舗タブ）")]
    Exchange = 503
    # [Description("GvGショップ")]
    ExchangeGvG = 504
    # [Description("時空の洞窟ショップ")]
    ExchangeDungeonBattle = 505
    # [Description("ロイヤルショップ＿ダイヤ購入タブ")]
    Shop = 601
    # [Description("キャラ画面（所持キャラタブ）")]
    CharacterList = 701
    # [Description("キャラ画面（進化タブ）")]
    CharacterRankUp = 702
    # [Description("レベルリンク（共鳴クリスタル）")]
    LevelLink = 703
    # [Description("アイテムボックス_スフィア")]
    ItemBoxSphere = 801
    # [Description("アイテムボックス_武具")]
    ItemBoxEquipment = 802
    # [Description("アイテムボックス画面（パーツタブ）")]
    ItemBoxParts = 803
    # [Description("オートバトル")]
    AutoBattle = 901
    # [Description("高速バトルダイアログ")]
    AutoBattleQuick = 902
    # [Description("時空の洞窟")]
    DungeonBattle = 1001
    # [Description("無窮の塔")]
    TowerBattle = 1101
    # [Description("バトルリーグ")]
    BattleLeague = 1201
    # [Description("幻影の神殿")]
    LocalRaid = 1301
    # [Description("祈りの泉（ノーマルタブ）")]
    BountyQuestSolo = 1401
    # [Description("祈りの泉（チームタブ）")]
    BountyQuestTeam = 1402
    # [Description("ガチャ（キャラタブ）")]
    Gacha = 1501
    # [Description("ギルド")]
    Guild = 1601
    # [Description("ギルドレイド画面（ソーニャ）")]
    GuildRaid = 1602
    # [Description("チャット")]
    Chat = 1701
    # [Description("各OSのストア")]
    OsStore = 1801
    # [Description("キャラ詳細")]
    CharacterDetail = 1901
    # [Description("マイページお気に入り設定ダイアログ")]
    FavoriteCharacter = 2001

# [Description("ガチャカテゴリータイプ")]
class GachaCategoryType(Enum):
    # [Description("キャラ")]
    Character = 0
    # [Description("武具")]
    Equipment = 1

# [Description("運命ガチャタイプ")]
class GachaDestinyType(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("愁、業、心、渇属性")]
    BlueAndRedAndGreenAndYellow = 1
    # [Description("こちらの承認")]
    LightAndDark = 2

# [Description("ガチャグループタイプ")]
class GachaGroupType(Enum):
    # [Description("グループ無し")]
    None_ = 0
    # [Description("属性")]
    Element = 1
    # [Description("聖天使の神託")]
    HolyAngel = 2

# [Description("ガチャ聖遺物タイプ")]
class GachaRelicType(Enum):
    None_ = 0
    # [Description("天契の聖杯")]
    ChaliceOfHeavenly = 1
    # [Description("蒼穹の銀勲")]
    SilverOrderOfTheBlueSky = 2
    # [Description("希求の神翼")]
    DivineWingsOfDesire = 3
    # [Description("悠園の果実")]
    FruitOfTheGarden = 4

# [Description("ガチャリセットタイプ")]
class GachaResetType(Enum):
    # [Description("リセット無し")]
    None_ = 0
    # [Description("毎日4:00")]
    Daily = 1
    # [Description("毎週月曜4:00")]
    Weekly = 2

# [Description("ガチャセレクトリストタイプ")]
class GachaSelectListType(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("プライズ共通")]
    Default = 1
    # [Description("運命")]
    Destiny = 2

# [Description("ガチャ表示用フラグ")]
# [Flags]
class GachaCaseFlags(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("天井表示")]
    ShowCeilingCount = 1
    # [Description("レビュー誘導判定無し")]
    IgnoreReview = 2
    # [Description("シェアボタン表示なし")]
    HideShareButton = 4
    # [Description("ガチャ詳細ダイアログ スペシャルリスト非表示")]
    HideSpecialList = 8

# [MessagePackObject(True)]
@dataclass
class CustomTextLayoutInfo():
    BannerAlignment: int
    BannerFontSize: int
    BannerLetterSpacing: float
    BannerLineSpacing: float
    BannerOutlineColor: str
    BannerPositionX: float
    BannerPositionY: float
    TitleFontSize: int

# [MessagePackObject(True)]
@dataclass
class CustomTextLayout():
    # [Description("日本語")]
    # [Nest(True, 2)]
    # [PropertyOrder(1)]
    jaJP: CustomTextLayoutInfo
    # [Description("英語")]
    # [Nest(True, 2)]
    # [PropertyOrder(2)]
    enUS: CustomTextLayoutInfo
    # [Description("韓国語")]
    # [Nest(True, 2)]
    # [PropertyOrder(3)]
    koKR: CustomTextLayoutInfo
    # [Description("中国語(繁体字)")]
    # [Nest(True, 2)]
    # [PropertyOrder(4)]
    zhTW: CustomTextLayoutInfo
    # [Description("中国語(簡体字)")]
    # [Nest(True, 2)]
    # [PropertyOrder(5)]
    zhCN: CustomTextLayoutInfo
    # [Description("フランス語")]
    # [Nest(True, 2)]
    # [PropertyOrder(6)]
    frFR: CustomTextLayoutInfo
    # [Description("スペイン語")]
    # [Nest(True, 2)]
    # [PropertyOrder(7)]
    esMX: CustomTextLayoutInfo
    # [Description("ポルトガル語")]
    # [Nest(True, 2)]
    # [PropertyOrder(8)]
    ptBR: CustomTextLayoutInfo
    # [Description("タイ語")]
    # [Nest(True, 2)]
    # [PropertyOrder(9)]
    thTH: CustomTextLayoutInfo
    # [Description("インドネシア語")]
    # [Nest(True, 2)]
    # [PropertyOrder(10)]
    idID: CustomTextLayoutInfo
    # [Description("ベトナム語")]
    # [Nest(True, 2)]
    # [PropertyOrder(11)]
    viVN: CustomTextLayoutInfo
    # [Description("ロシア語")]
    # [Nest(True, 2)]
    # [PropertyOrder(12)]
    ruRU: CustomTextLayoutInfo
    # [Description("ドイツ語")]
    # [Nest(True, 2)]
    # [PropertyOrder(13)]
    deDE: CustomTextLayoutInfo
    # [Description("アラビア語")]
    # [Nest(True, 2)]
    # [PropertyOrder(14)]
    arEG: CustomTextLayoutInfo

# [Description("ガチャボーナスゲージ表示タイプ")]
class GachaBonusGaugeType(Enum):
    # [Description("次のボーナスでドローカウントをリセット")]
    SingleReset = 0
    # [Description("ドロー回数を累計表示")]
    SingleSum = 1
    # [Description("ボーナスを複数表示")]
    Multi = 2

# [Description("タイトル背景色")]
class GachaTitleColorType(Enum):
    None_ = 0
    # [Description("黄色")]
    Yellow = 1
    # [Description("緑")]
    Green = 2
    # [Description("青")]
    Blue = 3
    # [Description("赤紫")]
    RedPurple = 4
    # [Description("水灰")]
    BlueGray = 5
    # [Description("青紫")]
    BluePurple = 6
    # [Description("赤")]
    Red = 7

# [Description("ガチャ追加キャラタイプ")]
class GachaAddCharacterType(Enum):
    # [Description("未指定")]
    None_ = 0
    # [Description("復刻")]
    Reprint = 1
    # [Description("新規")]
    New = 2

# [Description("城タイプ")]
class CastleType(Enum):
    # [Description("下位")]
    Small = 0
    # [Description("中位")]
    Medium = 1
    # [Description("上位")]
    Large = 2

# [MessagePackObject(True)]
@dataclass
class GlobalGvgFixedRewards():
    # [Nest(True, 1)]
    LowerClass: list[UserItem]
    # [Nest(True, 1)]
    MediumClass: list[UserItem]
    # [Nest(True, 1)]
    UpperClass: list[UserItem]

# [MessagePackObject(True)]
@dataclass
class GuildRaidDamageBar():
    DamageBarCount: int
    DamageBarMaxValue: int

class GuildRaidBossType(Enum):
    # [Description("通常ボス")]
    Normal = 0
    # [Description("解放ボス")]
    Releasable = 1
    # [Description("イベントボス")]
    Event = 2

# [MessagePackObject(True)]
@dataclass
class GuildDamageBarReward():
    DamageBarCount: int
    # [Nest(True, 1)]
    GuildRewardItems: list[UserItem]

# [MessagePackObject(True)]
@dataclass
class GuildRaidGoldCoefficientInfo():
    AdditiveCoefficient: int
    DivisionCoefficient: int

# [MessagePackObject(True)]
@dataclass
class NormalDamageBarReward():
    # [Nest(True, 1)]
    NormalRewardGoldCoefficientInfo: GuildRaidGoldCoefficientInfo
    DamageBarCount: int
    # [Nest(True, 1)]
    NormalRewardItems: list[UserItem]

# [MessagePackObject(True)]
@dataclass
class GuildRaidQuestClearEquipmentLvList():
    EquipmentLv: int
    QuestClearValue: int

# [MessagePackObject(True)]
@dataclass
class WorldDamageBarReward():
    GoalDamage: int
    # [Nest(True, 1)]
    WorldRewardItems: list[UserItem]

# [Description("ヘルプ付加情報タイプ")]
class HelpParameterType(Enum):
    # [Description("無し")]
    None_ = 0
    # [Description("所属するワールド")]
    BelongingWorlds = 1

# [Description("ヘルプパート")]
# [MessagePackObject(True)]
@dataclass
class HelpPartInfo():
    # [Description("見出し")]
    # [PropertyOrder(1)]
    HeadLine: str
    # [Description("本文")]
    # [PropertyOrder(2)]
    MainText: str
    # [Description("付加情報")]
    # [PropertyOrder(3)]
    HelpParameterType: HelpParameterType

# [Description("問い合わせボタンタイプ")]
class InquiryButtonType(Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("URL")]
    Url = 1
    # [Description("メール")]
    Mail = 2
    # [Description("アカウント削除")]
    AccountDelete = 3

# [Description("第2フレーム種類")]
class SecondaryFrameType(Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("属性アイコン")]
    ElementIcon = 1
    # [Description("効果時間表示")]
    EffectTime = 2
    # [Description("レベル")]
    Level = 3
    # [Description("キャラアイコン_中央")]
    CenteredCharacterIcon = 4

# [Description("レジェンドリーグ階級の種類")]
class LegendLeagueClassType(Enum):
    None_ = 0
    # [Description("シュバリエ")]
    Chevalier = 1
    # [Description("パラディン")]
    Paladin = 2
    # [Description("デューク")]
    Duke = 3
    # [Description("ロイヤルランク")]
    Royal = 4
    # [Description("レジェンドランク")]
    Legend = 5
    # [Description("ワールド・ルーラー")]
    WorldRuler = 6

# [Description("期間限定イベントの種類")]
class LimitedEventType(Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("属性の塔全開放")]
    ElementTowerAllRelease = 1
    # [Description("シリアルコード入力")]
    SerialCode = 2
    # [Description("古い課金システムの使用")]
    ApplyOldPurchaseSystem = 100

# [Description("キャラクターレアリティを持つ可能性があるアイテムが実装するインターフェース")]
@dataclass
class IUserCharacterItem():
    Item: UserItem
    RarityFlags: Flags[CharacterRarityFlags]

# [Description("期間限定ログボの日別報酬アイテム")]
# [MessagePackObject(True)]
@dataclass
class DailyLimitedLoginBonusItem(IUserCharacterItem):
    # [Description("報酬アイテム")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    DailyRewardItem: UserItem
    # [Description("日付")]
    # [PropertyOrder(1)]
    Date: int
    # [Description("キャラレアリティ")]
    # [PropertyOrder(3)]
    RarityFlags: Flags[CharacterRarityFlags]

# [Description("期間限定ログボの毎日報酬アイテム")]
# [MessagePackObject(True)]
@dataclass
class EveryDayLimitedLoginBonusItem(IUserCharacterItem):
    # [Description("毎日報酬アイテム")]
    # [Nest(True, 1)]
    # [PropertyOrder(1)]
    EveryDayRewardItem: UserItem
    # [Description("キャラレアリティ")]
    # [PropertyOrder(2)]
    RarityFlags: Flags[CharacterRarityFlags]

# [Description("期間限定ログボの特別報酬アイテム")]
# [MessagePackObject(True)]
@dataclass
class SpecialLimitedLoginBonusItem(IUserCharacterItem):
    # [Description("日付")]
    # [PropertyOrder(1)]
    Date: int
    # [Description("特別報酬アイテム")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    SpecialRewardItem: UserItem
    # [Description("キャラレアリティ")]
    # [PropertyOrder(3)]
    RarityFlags: Flags[CharacterRarityFlags]

# [Description("ローカル通知種別")]
class LocalNotificationSendType(Enum):
    None_ = 0
    # [Description("時刻指定")]
    TimeSpecified = 1
    # [Description("放置報酬上限到達")]
    AutoBattle = 2

# [Description("ローカル通知種別")]
class LocalNotificationType(Enum):
    None_ = 0
    # [Description("オートバトル報酬上限到達")]
    AutoBattle = 1
    # [Description("幻影の神殿開始")]
    LocalRaid = 2
    # [Description("バトルリーグ報酬受け取り")]
    BattleLeagueReward = 3
    # [Description("幻影の神殿イベント報酬増加")]
    LocalRaidRewardIncrease = 4

class LocalRaidEventType(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("クエスト追加イベント")]
    PlusQuest = 1
    # [Description("全日開催イベント")]
    FullOpen = 2

# [MessagePackObject(True)]
@dataclass
class LocalRaidStartEndTime():
    StartTime: int
    EndTime: int

class LocalRaidQuestGroupType(Enum):
    # [Description("1欄")]
    First = 1
    # [Description("2欄")]
    Second = 2
    # [Description("3欄")]
    Third = 3
    # [Description("4欄")]
    Fourth = 4
    # [Description("5欄")]
    Fifth = 5

@dataclass
class ILotteryWeight():
    LotteryWeight: int

# [MessagePackObject(True)]
@dataclass
class LocalRaidQuestIdWeight(ILotteryWeight):
    # [Description("幻影の神殿のクエストId")]
    # [PropertyOrder(1)]
    LocalRaidQuestId: int
    # [Description("出現割合")]
    # [PropertyOrder(2)]
    LotteryWeight: int

# [MessagePackObject(True)]
@dataclass
class LocalRaidQuestIdGroup():
    # [Description("幻影の神殿のクエストグループ種別")]
    # [PropertyOrder(1)]
    LocalRaidQuestGroupType: LocalRaidQuestGroupType
    # [Description("幻影の神殿のクエストIdグループ")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    LocalRaidQuestIdWeights: list[LocalRaidQuestIdWeight]

# [Description("ミッショングループ")]
class MissionGroupType(Enum):
    # [Description("メイン")]
    Main = 0
    # [Description("デイリー")]
    Daily = 1
    # [Description("ウィークリー")]
    Weekly = 2
    # [Description("初心者")]
    Beginner = 3
    # [Description("カムバック")]
    Comeback = 4
    # [Description("新キャラ")]
    NewCharacter = 5
    # [Description("イベント")]
    Limited = 6

# [MessagePackObject(True)]
@dataclass
class MissionReward(IUserCharacterItem):
    # [Nest(True, 1)]
    # [PropertyOrder(1)]
    Item: UserItem
    # [PropertyOrder(2)]
    RarityFlags: Flags[CharacterRarityFlags]

# [Description("ミッションタイプ")]
class MissionType(Enum):
    Main = 0
    Daily = 1
    Weekly = 2
    BeginnerFirstDay = 311
    BeginnerFirstDayLevel = 312
    BeginnerFirstDayStage = 313
    BeginnerFirstDayBuy = 314
    BeginnerSecondDay = 321
    BeginnerSecondDayQuick = 322
    BeginnerSecondDayBattleLeague = 323
    BeginnerSecondDayBuy = 324
    BeginnerThirdDay = 331
    BeginnerThirdDayForge = 332
    BeginnerThirdDayDungeonBattle = 333
    BeginnerThirdDayBuy = 334
    BeginnerFourthDay = 341
    BeginnerFourthDayReinforceEquipment = 342
    BeginnerFourthDayTowerBattle = 343
    BeginnerFourthDayBuy = 344
    BeginnerFifthDay = 351
    BeginnerFifthDayBountyQuest = 352
    BeginnerFifthDayTotalCharacter = 353
    BeginnerFifthDayBuy = 354
    BeginnerSixthDay = 361
    BeginnerSixthDaySphere = 362
    BeginnerSixthDayCharacterEvolution = 363
    BeginnerSixthDayBuy = 364
    BeginnerSeventhDay = 371
    BeginnerSeventhDayTraining = 372
    BeginnerSeventhDayLocalRaid = 373
    BeginnerSeventhDayBuy = 374
    ComebackLogin = 401
    ComebackActivity = 402
    ComebackConsumeCurrency = 403
    NewCharacter = 5
    LimitedFirstDayTab1 = 611
    LimitedFirstDayTab2 = 612
    LimitedFirstDayTab3 = 613
    LimitedFirstDayTab4 = 614
    LimitedSecondDayTab1 = 621
    LimitedSecondDayTab2 = 622
    LimitedSecondDayTab3 = 623
    LimitedSecondDayTab4 = 624
    LimitedThirdDayTab1 = 631
    LimitedThirdDayTab2 = 632
    LimitedThirdDayTab3 = 633
    LimitedThirdDayTab4 = 634
    LimitedFourthDayTab1 = 641
    LimitedFourthDayTab2 = 642
    LimitedFourthDayTab3 = 643
    LimitedFourthDayTab4 = 644
    LimitedFifthDayTab1 = 651
    LimitedFifthDayTab2 = 652
    LimitedFifthDayTab3 = 653
    LimitedFifthDayTab4 = 654
    LimitedSixthDayTab1 = 661
    LimitedSixthDayTab2 = 662
    LimitedSixthDayTab3 = 663
    LimitedSixthDayTab4 = 664
    LimitedSeventhDayTab1 = 671
    LimitedSeventhDayTab2 = 672
    LimitedSeventhDayTab3 = 673
    LimitedSeventhDayTab4 = 674

# [Description("解放されるコマンドの種類")]
class OpenCommandType(Enum):
    # [Description("コマンド無し")]
    None_ = 0
    # [Description("アルカナ")]
    Arcana = 1
    # [Description("ショップ")]
    Shop = 2
    # [Description("ミッション")]
    Mission = 3
    # [Description("時空の洞窟")]
    DungeonBattle = 4
    # [Description("バトルスキップ")]
    BattleSkip = 5
    # [Description("バトル倍速")]
    BattleSpeed = 6
    # [Description("バトル4倍速")]
    BattleSpeed4 = 7
    # [Description("時空の洞窟 見逃し補填")]
    DungeonBattleCompensation = 8
    # [Description("無窮の塔")]
    TowerBattle = 9
    # [Description("祈りの泉")]
    BountyQuest = 10
    # [Description("バトルリーグ")]
    BattleLeague = 11
    # [Description("幻影の神殿")]
    LocalRaid = 12
    # [Description("レジェンドリーグ")]
    LegendLeague = 13
    # [Description("運命ガチャ")]
    GachaDestiny = 14
    # [Description("エスペリアタワー")]
    EsperiaTower = 15
    # [Description("洞窟バトルハードモード")]
    DungeonBattleHardMode = 16
    # [Description("メモリー")]
    CharacterStory = 17
    # [Description("ロイヤルショップ")]
    RoyalShop = 18
    # [Description("ランキング")]
    Ranking = 19
    # [Description("スフィア装着")]
    SphereSet = 20
    # [Description("武具合成通常")]
    ShopNormalEquipment = 21
    # [Description("武具合成聖装")]
    ShopLegendEquipment = 22
    # [Description("ギルド（GVG）")]
    ShopGuild = 23
    # [Description("キャラコインショップ")]
    ShopCharacter = 24
    # [Description("時空の洞窟")]
    ShopDungeonBattle = 25
    # [Description("バトルリーグ")]
    ShopBattleLeague = 26
    # [Description("レジェンドリーグ")]
    ShopLegendLeague = 27
    # [Description("限定特典")]
    ShopLimited = 28
    # [Description("進化")]
    RankUp = 29
    # [Description("プレゼント")]
    Present = 30
    # [Description("武具強化")]
    EquipmentStrength = 31
    # [Description("神装強化")]
    EquipmentAscend = 32
    # [Description("武具進化")]
    EquipmentEvolution = 33
    # [Description("祈りの泉一括派遣、受け取り")]
    BountyQuestQuick = 34
    # [Description("ギルドレイドの掃討")]
    GuildRaidQuick = 35
    # [Description("ボス/無窮の塔掃討")]
    BossBattleQuick = 36
    # [Description("武具ガチャ")]
    GachaEquipment = 37
    # [Description("武具研磨")]
    EquipmentRefine = 38
    # [Description("フレンド")]
    Friend = 39
    # [Description("マイページ")]
    FooterMyPage = 40
    # [Description("キャラ")]
    FooterCharacter = 41
    # [Description("アイテムボックス")]
    FooterItemBox = 42
    # [Description("試練")]
    FooterCompetition = 43
    # [Description("ガチャ")]
    FooterGacha = 44
    # [Description("チャット")]
    FooterChat = 45
    # [Description("ギルド")]
    FooterGuild = 46
    # [Description("魔水晶（ショップ）&キャラ詳細_専用武器交換")]
    ShopMagicCrystal = 47
    # [Description("聖遺物（ショップ）")]
    ShopRelics = 48
    # [Description("スフィア（ショップ）")]
    ShopSphere = 49
    # [Description("イベント（ショップ）")]
    ShopEventExchange = 50
    # [Description("グランドバトル（ショップ）")]
    ShopGrandBattle = 51
    # [Description("レベルリンク")]
    LevelLink = 80
    # [Description("チュートリアルスキップ")]
    SkipTutorial = 100
    # [Description("月間ログインボーナス")]
    MonthlyLoginBonus = 120
    # [Description("期間限定ログインボーナス")]
    LimitedLoginBonus = 121
    # [Description("第二大陸")]
    SecondContinent = 140
    # [Description("フレンドコード")]
    FriendCode = 200
    # [Description("武具固定")]
    LockEquipment = 1000

# [Description("日別ログイン報酬情報")]
# [MessagePackObject(True)]
@dataclass
class LoginDailyRewardInfo():
    # [Description("日数")]
    # [PropertyOrder(1)]
    Day: int
    # [Description("日別ログイン報酬")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    RewardItem: UserItem

# [Description("合計ログイン報酬情報")]
# [MessagePackObject(True)]
@dataclass
class LoginCountRewardInfo():
    # [Description("合計ログイン日数")]
    # [PropertyOrder(1)]
    DayCount: int
    # [Description("画像パス")]
    # [PropertyOrder(3)]
    ImagePath: str
    # [Description("画像X座標")]
    # [PropertyOrder(4)]
    PositionX: int
    # [Description("合計ログイン報酬リスト")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    RewardItemList: list[UserItem]

# [Description("コンテンツ開放タイプ")]
class OpenContentType(Enum):
    # [Description("ランクアップ")]
    RankUp = 0
    # [Description("クエストクリア")]
    QuestClear = 1

# [Description("パッシブスキルトリガー")]
class PassiveTrigger(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("ターン開始時")]
    TurnStart = 1
    # [Description("ターン終了時")]
    TurnEnd = 2
    # [Description("計算前パッシブ")]
    BeforeCalculation = 3
    # [Description("被致命的ダメージ時")]
    InstantDeathDamage = 5
    # [Description("自分死亡時")]
    SelfDead = 6
    # [Description("第三者味方死亡時")]
    AllyDead = 7
    # [Description("被攻撃時")]
    ReceiveDamage = 8
    # [Description("攻撃時")]
    GiveDamage = 9
    # [Description("第三者の攻撃時、味方の被攻撃時")]
    AllyReceiveDamage = 10
    # [Description("被デバフ時")]
    ReceiveDebuff = 11
    # [Description("デバフ時")]
    GiveDeBuff = 12
    # [Description("第三者のデバフ時")]
    AllyReceiveDeBuff = 13
    # [Description("回復時")]
    GiveHeal = 14
    # [Description("第三者の回復時")]
    AllyReceiveHeal = 15
    # [Description("バフ時")]
    GiveBuff = 16
    # [Description("第三者のバフ時")]
    AllyGiveBuff = 17
    # [Description("敵復活時")]
    EnemyRecovery = 18
    # [Description("自分復活時")]
    SelfRecovery = 19
    # [Description("第三者敵死亡時パッシブ")]
    OtherEnemyDead = 20
    # [Description("敵死亡時")]
    EnemyDead = 21
    # [Description("第三者味方の攻撃時")]
    AllyGiveDamage = 22
    # [Description("第三者敵の与回復時")]
    EnemyReceiveHeal = 23
    # [Description("被バフ時")]
    ReceiveBuff = 24
    # [Description("第三者敵のバフ時")]
    EnemyGiveBuff = 25
    # [Description("戦闘開始時")]
    BattleStart = 26
    # [Description("戦闘終了時")]
    BattleEnd = 27
    # [Description("ターン開始時(行動順決定前)")]
    TurnStartBeforeSpeedCheck = 28
    # [Description("被攻撃時（命中or回避）")]
    TargetAttack = 29
    # [Description("被回復時")]
    ReceiveHeal = 30
    # [Description("被ダメージ量判定(自分の情報だけ参照)")]
    CheckReceiveDamageSelf = 41
    # [Description("被ダメージ量判定")]
    CheckReceiveDamage = 42

# [MessagePackObject(True)]
@dataclass
class PassiveSubSetSkillInfo():
    # [Description("パッシブトリガー")]
    PassiveTrigger: PassiveTrigger
    # [Description("スキルクールタイム(MB : 初期スキルクールタイム)")]
    SkillCoolTime: int
    # [Description("スキルMAXクールタイム")]
    SkillMaxCoolTime: int
    # [Description("同じパッシブスキルのクールタイムグループ")]
    PassiveGroupId: int
    # [Description("サブセットスキルId")]
    SubSetSkillId: int

# [MessagePackObject(True)]
@dataclass
class PassiveSkillInfo():
    # [Description("優先順位")]
    OrderNumber: int
    # [Description("スキル説明文キー")]
    DescriptionKey: str
    # [Description("キャラクターレベル制限")]
    CharacterLevel: int
    # [Description("専属武具レアリティ")]
    EquipmentRarityFlags: Flags[EquipmentRarityFlags]
    # [Description("加護ID")]
    BlessingItemId: int
    # [Description("パッシブサブセット情報")]
    # [Nest(True, 2)]
    PassiveSubSetSkillInfos: list[PassiveSubSetSkillInfo]

# [Description("PvPランキング報酬タイプ")]
class PvpRankingRewardType(Enum):
    # [Description("バトルリーグデイリーランキング報酬")]
    BattleLeagueDailyRankingReward = 0
    # [Description("レジェンドリーグデイリーランキング報酬")]
    LegendLeagueDailyRankingReward = 1
    # [Description("レジェンドリーグシーズンランキング報酬")]
    LegendLeagueSeasonRankingReward = 2

# [Description("クエスト難易度")]
class QuestDifficultyType(Enum):
    # [Description("Easy")]
    Easy = 0
    # [Description("Hard")]
    Hard = 1

class SphereType(Enum):
    EquipmentIcon = 0
    Small = 1
    Medium = 2
    Large = 3

# [Description("アイテムアイコン情報")]
# [MessagePackObject(True)]
@dataclass
class ItemIconInfo():
    # [Description("アイテムID")]
    # [PropertyOrder(1)]
    ItemId: int
    # [Description("アイテムタイプ")]
    # [PropertyOrder(2)]
    ItemType: ItemType

# [Description("累計貢献メダル報酬ボーナス情報")]
# [MessagePackObject(True)]
@dataclass
class TotalActivityMedalRewardBonus():
    # [Description("ボーナス報酬リスト")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    BonusRewardList: list[MissionReward]
    # [Description("累計貢献メダル報酬ID")]
    # [PropertyOrder(1)]
    TotalActivityMedalRewardId: int

# [Description("Steam価格表情報")]
# [MessagePackObject(True)]
@dataclass
class SteamProductPriceInfo():
    # [Description("通貨コード")]
    CurrencyCode: str
    # [Description("表示倍率")]
    Multiple: float
    # [Description("価格")]
    ProductPrice: int

# [Description("規約ボタン情報")]
# [MessagePackObject(True)]
@dataclass
class TermsButtonInfo():
    # [Description("ボタンテキストKey")]
    # [PropertyOrder(1)]
    Name: str
    # [Description("Url")]
    # [PropertyOrder(2)]
    Url: str

# [Description("言語")]
class LanguageType(Enum):
    None_ = 0
    # [Description("日本語")]
    jaJP = 1
    # [Description("英語")]
    enUS = 2
    # [Description("韓国語")]
    koKR = 3
    # [Description("中国語(繁体字)")]
    zhTW = 4
    # [Description("フランス語")]
    frFR = 5
    # [Description("中国語(簡体字)")]
    zhCN = 6
    # [Description("スペイン語")]
    esMX = 7
    # [Description("ポルトガル語")]
    ptBR = 8
    # [Description("タイ語")]
    thTH = 9
    # [Description("インドネシア語")]
    idID = 10
    # [Description("ベトナム語")]
    viVN = 11
    # [Description("ロシア語")]
    ruRU = 12
    # [Description("ドイツ語")]
    deDE = 13
    # [Description("アラビア語")]
    arEG = 14

@dataclass
class ITextResource():
    StringKey: str
    Text: str

# [Description("時差グループ")]
class TimeServerType(Enum):
    None_ = 0
    # [Description("日本")]
    JP = 1
    # [Description("韓国")]
    KR = 2
    # [Description("アジア")]
    Asia = 3
    # [Description("アメリカ")]
    US = 4
    # [Description("ヨーロッパ")]
    EU = 5
    # [Description("グローバル")]
    Global = 6

# [Description("遷移先")]
class ViewTransitionType(Enum):
    # [Description("キャラ育成")]
    CharacterTraining = 0
    # [Description("キャラランクアップ")]
    CharacterRankUp = 1
    # [Description("遷移なしの編成ダイアログ")]
    FormationWithoutTransition = 2
    # [Description("放置バトルMAP")]
    Map = 3
    # [Description("ミッション")]
    Mission = 4

@dataclass
class IHasEventStartEndTime():
    # [DateTimeString]
    EventEndTime: str
    # [DateTimeString]
    EventStartTime: str

# [MessagePackObject(True)]
@dataclass
class EventMissionReward(IUserCharacterItem):
    # [Nest(True, 1)]
    # [PropertyOrder(1)]
    EventItem: UserItem
    # [PropertyOrder(2)]
    RarityFlags: Flags[CharacterRarityFlags]

# [Description("無窮の塔タイプ")]
class TowerType(Enum):
    None_ = 0
    # [Description("無窮の塔")]
    Infinite = 1
    # [Description("愁（しゅう）")]
    Blue = 2
    # [Description("業（ごう）")]
    Red = 3
    # [Description("心（しん）")]
    Green = 4
    # [Description("渇（かつ）")]
    Yellow = 5

# [Description("定期自動更新タイプ")]
class TradeShopAutoUpdateType(Enum):
    # [Description("定期自動更新なし")]
    None_ = 0
    # [Description("1日1回、4時に更新")]
    OneDay = 1
    # [Description("1週間に1回、4時に更新")]
    OneWeek = 2
    # [Description("1カ月に1回、4時に更新")]
    OneMonth = 3
    # [Description("1日に複数回、指定時刻に更新")]
    SetTime = 4

# [MessagePackObject(True)]
@dataclass
class ConsumeItemInfo():
    # [Description("アイテムの種類")]
    ItemType: ItemType
    # [Description("アイテムのID")]
    ItemId: int

# [Description("交換所種類")]
class TradeShopType(Enum):
    # [Description("一般")]
    Normal = 0
    # [Description("通常武具合成")]
    NormalEquipmentComposite = 1
    # [Description("パターン2")]
    Fix = 2
    # [Description("店舗")]
    Store = 3
    # [Description("スフィア")]
    Sphere = 4

# [Description("神器タイプ")]
class SacredTreasureType(Enum):
    # [Description("神器ではない")]
    None_ = 0
    # [Description("魔装")]
    Matchless = 1
    # [Description("聖装")]
    Legend = 2
    # [Description("双ステータス神器")]
    DualStatus = 3

# [Description("宝箱固定アイテム")]
# [MessagePackObject(True)]
@dataclass
class TreasureChestFixItem():
    # [Description("アイテム")]
    # [Nest(True, 2)]
    FixItem: UserItem
    # [Description("神器タイプ")]
    SacredTreasureType: SacredTreasureType

# [Description("宝箱選択アイテム")]
# [MessagePackObject(True)]
@dataclass
class TreasureChestSelectItem():
    # [Description("アイテム")]
    # [Nest(True, 1)]
    SelectItem: UserItem
    # [Description("神器タイプ")]
    SacredTreasureType: SacredTreasureType

class TreasureChestItemListType(Enum):
    None_ = 0
    TreasureChestItemList = 1
    GachaLotteryItemList = 2
    SelectItemList = 3

# [Description("宝箱抽選タイプ")]
class TreasureChestLotteryType(Enum):
    # [Description("抽選で1つ")]
    Random = 0
    # [Description("固定で1つ")]
    Static = 1
    # [Description("キャラクター1つを選択")]
    SelectCharacter = 2
    # [Description("アイテム1つを選択")]
    SelectItem = 3
    # [Description("選択した中から抽選")]
    SelectRandom = 4
    # [Description("複数の固定アイテム")]
    Fix = 5
    # [Description("抽選アイテムと固定アイテム")]
    RandomFix = 6

# [Description("画像位置フォーマット")]
class ImagePositionFormatType(Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("時空の洞窟イベント")]
    DungeonBattleEvent = 1
    # [Description("神殿イベント")]
    LocalRaidEvent = 2

# [Description("ページ情報")]
# [MessagePackObject(True)]
@dataclass
class TutorialDescriptionPageInfo():
    # [Description("画像ID")]
    # [PropertyOrder(2)]
    ImageId: int
    # [Description("本文")]
    # [PropertyOrder(1)]
    MainTextKey: str

# [MessagePackObject(True)]
@dataclass
class VipGiftInfo():
    # [Description("獲得アイテムリスト")]
    # [Nest(True, 1)]
    GetItemList: list[UserItem]
    # [Description("必要アイテムリスト")]
    # [Nest(True, 1)]
    RequiredItemList: list[UserItem]
    # [Description("ギフトID")]
    VipGiftId: int

# [MessagePackObject(True)]
@dataclass
class StartEndTime(IHasStartEndTime):
    # [Description("終了日時")]
    # [PropertyOrder(2)]
    EndTime: str
    # [Description("開始日時")]
    # [PropertyOrder(1)]
    StartTime: str

@dataclass
class ApiRequestBase():
    pass

@dataclass
class ApiResponseBase():
    pass

class SnsType(Enum):
    None_ = 0
    OrtegaId = 1
    AppleId = 2
    Twitter = 3
    Facebook = 4
    GameCenter = 5
    GooglePlay = 6

class LockEquipmentDeckType(Enum):
    None_ = 0
    League = 1

@dataclass
class IReadOnlyEquipment():
    # [Description("付与パラメータ(技力)")]
    AdditionalParameterEnergy: int
    # [Description("付与パラメータ(体力)")]
    AdditionalParameterHealth: int
    # [Description("付与パラメータ(知力)")]
    AdditionalParameterIntelligence: int
    # [Description("付与パラメータ(筋力)")]
    AdditionalParameterMuscle: int
    # [Description("武具ID")]
    EquipmentId: int
    # [Description("固有ID")]
    Guid: str
    # [Description("聖装経験値")]
    LegendSacredTreasureExp: int
    # [Description("聖装レベル")]
    LegendSacredTreasureLv: int
    # [Description("魔装経験値")]
    MatchlessSacredTreasureExp: int
    # [Description("魔装レベル")]
    MatchlessSacredTreasureLv: int
    # [Description("強化レベル")]
    ReinforcementLv: int
    # [Description("宝石ID1")]
    SphereId1: int
    # [Description("宝石ID2")]
    SphereId2: int
    # [Description("宝石ID3")]
    SphereId3: int
    # [Description("宝石ID4")]
    SphereId4: int
    # [Description("宝石スロット解放数")]
    SphereUnlockedCount: int

# [MessagePackObject(True)]
@dataclass
class UserEquipmentDtoInfo(IReadOnlyEquipment):
    # [Description("キャラクター固有ID")]
    CharacterGuid: str
    # [Description("作成時刻")]
    CreateAt: int
    # [Description("プレイヤーID")]
    PlayerId: int
    # [Description("付与パラメータ(体力)")]
    AdditionalParameterHealth: int
    # [Description("付与パラメータ(知力)")]
    AdditionalParameterIntelligence: int
    # [Description("付与パラメータ(筋力)")]
    AdditionalParameterMuscle: int
    # [Description("付与パラメータ(敏捷)")]
    AdditionalParameterEnergy: int
    # [Description("武具ID")]
    EquipmentId: int
    # [Description("固有ID")]
    Guid: str
    # [Description("宝石ID1")]
    SphereId1: int
    # [Description("宝石ID2")]
    SphereId2: int
    # [Description("宝石ID3")]
    SphereId3: int
    # [Description("宝石ID4")]
    SphereId4: int
    # [Description("宝石スロット解放数")]
    SphereUnlockedCount: int
    # [Description("聖装経験値")]
    LegendSacredTreasureExp: int
    # [Description("聖装レベル")]
    LegendSacredTreasureLv: int
    # [Description("魔装経験値")]
    MatchlessSacredTreasureExp: int
    # [Description("魔装レベル")]
    MatchlessSacredTreasureLv: int
    # [Description("強化レベル")]
    ReinforcementLv: int

# [Description("プライバシー設定タイプ")]
class PrivacySettingsType(Enum):
    # [Description("未設定")]
    None_ = 0
    # [Description("オプトイン")]
    OptIn = 1
    # [Description("オプトアウト")]
    OptOut = 2

# [Description("ゲリラパックランク種別")]
class ShopGuerrillaPackRankType(Enum):
    # [Description("120")]
    Rank1 = 1
    # [Description("610")]
    Rank2 = 2
    # [Description("980")]
    Rank3 = 3
    # [Description("1480")]
    Rank4 = 4
    # [Description("3060")]
    Rank5 = 5
    # [Description("6100")]
    Rank6 = 6
    # [Description("12000")]
    Rank7 = 7

# [MessagePackObject(True)]
@dataclass
class ShopProductGuerrillaPack():
    # [Description("ダイアログベース画像ID")]
    DialogImageId: int
    # [Description("割引率")]
    DiscountRate: int
    # [Description("終了日時")]
    EndTime: int
    # [Description("商品名キー")]
    NameKey: str
    # [Description("ProductIdのDictonary")]
    ProductIdDict: dict[DeviceType, str]
    # [Description("ランク種別")]
    ShopGuerrillaPackRankType: ShopGuerrillaPackRankType
    # [Description("商品値段")]
    ShopProductPrice: int
    # [Description("ゲリラパックID")]
    ShopGuerrillaPackId: int
    # [Description("訴求文言キー")]
    TextKey: str
    # [Description("報酬リスト")]
    UserItemList: list[UserItem]

# [MessagePackObject(True)]
@dataclass
class UserBattleBossDtoInfo():
    BossLastChallengeTime: int
    BossClearMaxQuestId: int
    BossTodayUseCurrencyCount: int
    BossTodayUseTicketCount: int
    BossTodayWinCount: int
    IsOpenedNewQuest: bool

# [MessagePackObject(True)]
@dataclass
class UserBattleLegendLeagueDtoInfo():
    AttackSucceededNum: int
    DefenseSucceededNum: int
    LegendLeagueLastChallengeTime: int
    LegendLeagueTodayCount: int
    LegendLeagueTodayUseCurrencyCount: int
    LegendLeagueConsecutiveVictoryCount: int

# [MessagePackObject(True)]
@dataclass
class UserBattlePvpDtoInfo():
    AttackSucceededNum: int
    DefenseSucceededNum: int
    GetTodayDefenseSucceededRewardCount: int
    MaxRanking: int
    PvpLastChallengeTime: int
    PvpTodayCount: int
    PvpTodayUseCurrencyCount: int

# [MessagePackObject(True)]
@dataclass
class UserBoxSizeDtoInfo():
    # [Description("CharacterBoxSizeMBを参照")]
    CharacterBoxSizeId: int
    # [Description("プレイヤーID")]
    PlayerId: int

# [MessagePackObject(True)]
@dataclass
class UserCharacterBookDtoInfo():
    CharacterId: int
    MaxCharacterLevel: int
    MaxCharacterRarityFlags: Flags[CharacterRarityFlags]
    MaxEpisodeId: int

# [MessagePackObject(True)]
@dataclass
class UserCharacterCollectionDtoInfo():
    CharacterCollectionId: int
    CollectionLevel: int

# [MessagePackObject(True)]
@dataclass
class UserCharacterDtoInfo():
    Guid: str
    PlayerId: int
    CharacterId: int
    Level: int
    Exp: int
    RarityFlags: Flags[CharacterRarityFlags]
    IsLocked: bool

# [Description("デッキを使用したコンテンツ")]
class DeckUseContentType(Enum):
    None_ = 0
    # [Description("放置")]
    Auto = 1
    # [Description("ボスバトル")]
    Boss = 2
    # [Description("無窮の塔")]
    Infinite = 3
    # [Description("時空の洞窟")]
    DungeonBattle = 4
    # [Description("幻影の神殿")]
    LocalRaid = 5
    # [Description("バトルリーグ（攻撃）")]
    BattleLeagueOffense = 6
    # [Description("バトルリーグ（防御）")]
    BattleLeagueDefense = 7
    # [Description("レジェンドリーグ（攻撃）")]
    LegendLeagueOffense = 8
    # [Description("レジェンドリーグ（防御）")]
    LegendLeagueDefense = 9
    # [Description("ギルドハント")]
    GuildHunt = 10
    # [Description("愁（しゅう）の塔")]
    BlueTower = 11
    # [Description("業（ごう）の塔")]
    RedTower = 12
    # [Description("心（しん）の塔")]
    GreenTower = 13
    # [Description("渇（かつ）の塔")]
    YellowTower = 14
    # [Description("ギルドバトル")]
    GuildBattle = 1000
    # [Description("グランドバトル")]
    GrandBattle = 2000

# [MessagePackObject(True)]
@dataclass
class UserDeckDtoInfo():
    DeckNo: int
    DeckUseContentType: DeckUseContentType
    DeckBattlePower: int
    UserCharacterGuid1: str
    CharacterId1: int
    UserCharacterGuid2: str
    CharacterId2: int
    UserCharacterGuid3: str
    CharacterId3: int
    UserCharacterGuid4: str
    CharacterId4: int
    UserCharacterGuid5: str
    CharacterId5: int

# [MessagePackObject(True)]
@dataclass
class UserItemDtoInfo(IUserItem):
    ItemCount: int
    ItemId: int
    ItemType: ItemType
    PlayerId: int

# [MessagePackObject(True)]
@dataclass
class UserLevelLinkDtoInfo():
    PartyMaxLevel: int
    PartyLevel: int
    PartySubLevel: int
    MemberMaxCount: int
    BuyFrameCount: int
    IsPartyMode: bool

# [MessagePackObject(True)]
@dataclass
class UserLevelLinkMemberDtoInfo():
    CellNo: int
    UserCharacterGuid: str
    CharacterId: int
    UnavailableTime: int

# [Description("ミッションクリア個数/累計貢献メダル報酬状態種別")]
class MissionActivityRewardStatusType(Enum):
    # [Description("未解放")]
    Locked = 0
    # [Description("獲得可能")]
    NotReceived = 1
    # [Description("獲得済")]
    Received = 2

# [MessagePackObject(True)]
@dataclass
class UserMissionActivityDtoInfo():
    MissionGroupType: MissionGroupType
    PlayerId: int
    ProgressCount: int
    RewardStatusDict: dict[int, MissionActivityRewardStatusType]

# [Description("ミッション状態種別")]
class MissionStatusType(Enum):
    # [Description("未解放")]
    Locked = 0
    # [Description("進行中")]
    Progress = 1
    # [Description("未受取")]
    NotReceived = 2
    # [Description("獲得済")]
    Received = 3

# [MessagePackObject(True)]
@dataclass
class UserMissionDtoInfo():
    AchievementType: MissionAchievementType
    MissionStatusHistory: dict[MissionStatusType, list[int]]
    MissionType: MissionType
    PlayerId: int
    ProgressCount: int

# [MessagePackObject(True)]
@dataclass
class UserMissionOccurrenceHistoryDtoInfo():
    BeginnerStartTime: int
    ComebackStartTime: int
    DailyStartTime: int
    WeeklyStartTime: int
    LimitedStartTime: int
    LimitedMissionMBId: int
    NewCharacterMissionMBId: int

# [MessagePackObject(True)]
@dataclass
class UserFriendMissionDtoInfo():
    FriendCampaignId: int
    AchievementType: MissionAchievementType
    ProgressCount: int
    MissionStatusHistory: dict[MissionStatusType, list[int]]

# [Description("通知タイプ")]
class NotificationType(Enum):
    None_ = 0
    # [Description("新しいガチャ権を入手")]
    NewGachaTicket = 1
    # [Description("セレクトリストに登録しているキャラのレアリティが最大")]
    MaxRarityInSelectList = 2
    # [Description("セレクトリストに登録できるキャラが追加")]
    NewCharacterInSelectList = 3
    # [Description("無料ガチャ回数が残っている")]
    GachaFreeCount = 4
    # [Description("ギルドレイドコンテンツ挑戦/解放可能")]
    GuildRaidAvailable = 5
    # [Description("新しいギルド加入申請")]
    NewGuildJoinRequest = 6
    # [Description("ギルドレベルアップ")]
    GuildLevelUp = 7
    # [Description("Local GVG 受け取り可能なギルドバトル報酬がある場合")]
    LocalGvgReward = 8
    # [Description("Global GVG 受け取り可能なギルドバトル報酬がある場合")]
    GlobalGvgReward = 9

# [MessagePackObject(True)]
@dataclass
class UserNotificationDtoInfo():
    NotificationType: NotificationType
    Value: int

# [MessagePackObject(True)]
@dataclass
class UserOpenContentDtoInfo():
    OpenContentId: int

# [Description("ユーザー設定データ")]
class PlayerSettingsType(Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("レアリティNのキャラ自動販売")]
    AutoSellRarityNCharacter = 1

# [MessagePackObject(True)]
@dataclass
class UserSettingsDtoInfo():
    PlayerSettingsType: PlayerSettingsType
    Value: int
    PlayerId: int

# [MessagePackObject(True)]
@dataclass
class UserShopAchievementPackDtoInfo():
    ChapterId: int
    ShopAchievementPackId: int

# [MessagePackObject(True)]
@dataclass
class UserShopFirstChargeBonusDtoInfo():
    IsReceivedDay1: bool
    IsReceivedDay2: bool
    IsReceivedDay3: bool
    OpenTimeStamp: int

@dataclass
class IComparable():
    pass

@dataclass
class IFormattable():
    pass

# [CLSCompliant(False)]
@dataclass
class IConvertible():
    pass

@dataclass
class ISerializable():
    pass

class DayOfWeek(Enum):
    Sunday = 0
    Monday = 1
    Tuesday = 2
    Wednesday = 3
    Thursday = 4
    Friday = 5
    Saturday = 6

class DateTimeKind(Enum):
    Unspecified = 0
    Utc = 1
    Local = 2

# [IsReadOnly]
# [Serializable]
@dataclass
class TimeSpan(IComparable, IFormattable):
    Zero: TimeSpan
    MaxValue: TimeSpan
    MinValue: TimeSpan
    Ticks: int
    Days: int
    Hours: int
    Minutes: int
    Seconds: int
    TotalDays: float
    TotalHours: float
    TotalMilliseconds: float
    TotalMinutes: float
    TotalSeconds: float

# [IsReadOnly]
# [Serializable]
@dataclass
class DateTime(IComparable, IFormattable, IConvertible, ISerializable):
    MinValue: DateTime
    MaxValue: DateTime
    UnixEpoch: DateTime
    Date: DateTime
    Day: int
    DayOfWeek: DayOfWeek
    Hour: int
    Kind: DateTimeKind
    Millisecond: int
    Minute: int
    Month: int
    Now: DateTime
    Second: int
    Ticks: int
    TimeOfDay: TimeSpan
    Year: int
    UtcNow: DateTime

# [MessagePackObject(True)]
@dataclass
class UserShopFreeGrowthPackDtoInfo():
    ShopGrowthPackId: int
    IsBuff: bool
    PlayerId: int
    ReceiveDateTime: DateTime
    ShopProductGrowthPackId: int

# [MessagePackObject(True)]
@dataclass
class UserShopMonthlyBoostDtoInfo():
    ExpirationTimeStamp: int
    IsPrePurchased: bool
    LatestReceivedDate: int
    PlayerId: int
    PrevReceivedDate: int
    ShopMonthlyBoostId: int

# [MessagePackObject(True)]
@dataclass
class UserShopSubscriptionDtoInfo():
    ProductId: str
    DeviceType: DeviceType
    TransactionId: str
    ExpirationTimeStamp: int

@dataclass
class IUserStatusDtoInfo():
    Birthday: int
    BoardRank: int
    Comment: str
    Exp: int
    FavoriteCharacterId1: int
    FavoriteCharacterId2: int
    FavoriteCharacterId3: int
    FavoriteCharacterId4: int
    FavoriteCharacterId5: int
    IsFirstVisitGuildAtDay: bool
    IsReachBattleLeagueTop50: bool
    IsAlreadyChangedName: bool
    LastLoginTime: int
    LastLvUpTime: int
    MainCharacterIconId: int
    Name: str
    PlayerId: int
    PreviousLoginTime: int
    Rank: int
    Vip: int
    VipExp: int

# [MessagePackObject(True)]
@dataclass
class UserStatusDtoInfo(IUserStatusDtoInfo):
    CreateAt: int
    IsFirstVisitGuildAtDay: bool
    IsReachBattleLeagueTop50: bool
    IsAlreadyChangedName: bool
    Birthday: int
    Comment: str
    PlayerId: int
    MainCharacterIconId: int
    FavoriteCharacterId1: int
    FavoriteCharacterId2: int
    FavoriteCharacterId3: int
    FavoriteCharacterId4: int
    FavoriteCharacterId5: int
    Name: str
    Rank: int
    BoardRank: int
    Exp: int
    Vip: int
    LastLoginTime: int
    PreviousLoginTime: int
    LastLvUpTime: int
    VipExp: int

# [MessagePackObject(True)]
@dataclass
class UserTowerBattleDtoInfo():
    BoughtCount: int
    LastUpdateTime: int
    MaxTowerBattleId: int
    PlayerId: int
    TodayBattleCount: int
    TodayBoughtCountByCurrency: int
    TodayClearNewFloorCount: int
    TowerType: TowerType

# [MessagePackObject(True)]
@dataclass
class UserVipGiftDtoInfo():
    PlayerId: int
    VipGiftId: int
    VipLv: int

# [MessagePackObject(True)]
@dataclass
class UserSyncData():
    BlockPlayerIdList: list[int]
    ClearedTutorialIdList: list[int]
    CreateUserIdTimestamp: int | None
    DataLinkageMap: dict[SnsType, bool]
    DeletedCharacterGuidList: list[str]
    DeletedEquipmentGuidList: list[str]
    ExistVipDailyGift: bool | None
    GivenItemCountInfoList: list[IUserItem]
    GuildJoinLimitCount: int | None
    IsDataLinkage: bool | None
    IsJoinedGlobalGvg: bool | None
    IsJoinedLocalGvg: bool | None
    IsReceivedSnsShareReward: bool | None
    IsValidContractPrivilege: bool | None
    LegendLeagueClassType: LegendLeagueClassType | None
    LocalRaidChallengeCount: int | None
    LockedEquipmentCharacterGuidListMap: dict[LockEquipmentDeckType, list[str]]
    LockedUserEquipmentDtoInfoListMap: dict[LockEquipmentDeckType, list[UserEquipmentDtoInfo]]
    PresentCount: int | None
    PrivacySettingsType: PrivacySettingsType | None
    ReceivedAutoBattleRewardLastTime: int | None
    ReleaseLockEquipmentCooldownTimeStampMap: dict[LockEquipmentDeckType, int]
    ShopCurrencyMissionProgressMap: dict[str, int]
    ShopProductGuerrillaPackList: list[ShopProductGuerrillaPack]
    TimeServerId: int | None
    TreasureChestCeilingCountMap: dict[int, int]
    UserBattleBossDtoInfo: UserBattleBossDtoInfo
    UserBattleLegendLeagueDtoInfo: UserBattleLegendLeagueDtoInfo
    UserBattlePvpDtoInfo: UserBattlePvpDtoInfo
    UserBoxSizeDtoInfo: UserBoxSizeDtoInfo
    UserCharacterBookDtoInfos: list[UserCharacterBookDtoInfo]
    UserCharacterCollectionDtoInfos: list[UserCharacterCollectionDtoInfo]
    UserCharacterDtoInfos: list[UserCharacterDtoInfo]
    UserDeckDtoInfos: list[UserDeckDtoInfo]
    UserEquipmentDtoInfos: list[UserEquipmentDtoInfo]
    UserItemDtoInfo: list[UserItemDtoInfo]
    UserLevelLinkDtoInfo: UserLevelLinkDtoInfo
    UserLevelLinkMemberDtoInfos: list[UserLevelLinkMemberDtoInfo]
    UserMissionActivityDtoInfos: list[UserMissionActivityDtoInfo]
    UserMissionDtoInfos: list[UserMissionDtoInfo]
    UserMissionOccurrenceHistoryDtoInfo: UserMissionOccurrenceHistoryDtoInfo
    UserFriendMissionDtoInfoList: list[UserFriendMissionDtoInfo]
    UserNotificationDtoInfoInfos: list[UserNotificationDtoInfo]
    UserOpenContentDtoInfos: list[UserOpenContentDtoInfo]
    UserSettingsDtoInfoList: list[UserSettingsDtoInfo]
    UserShopAchievementPackDtoInfos: list[UserShopAchievementPackDtoInfo]
    UserShopFirstChargeBonusDtoInfo: UserShopFirstChargeBonusDtoInfo
    UserShopFreeGrowthPackDtoInfos: list[UserShopFreeGrowthPackDtoInfo]
    UserShopMonthlyBoostDtoInfos: list[UserShopMonthlyBoostDtoInfo]
    UserShopSubscriptionDtoInfos: list[UserShopSubscriptionDtoInfo]
    UserStatusDtoInfo: UserStatusDtoInfo
    UserTowerBattleDtoInfos: list[UserTowerBattleDtoInfo]
    UserVipGiftDtoInfos: list[UserVipGiftDtoInfo]

@dataclass
class IUserSyncApiResponse():
    UserSyncData: UserSyncData

# [Description("アカウント停止タイプ")]
class AccountSuspensionType(Enum):
    # [Description("解除")]
    Lift = 0
    # [Description("永久停止")]
    Permanent = 1
    # [Description("時限停止")]
    Period = 2

class BanChatType(Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("全てのチャット")]
    All = 1
    # [Description("ワールド、ワールドグループチャット")]
    WorldAndWorldGroup = 2

# [MessagePackObject(True)]
@dataclass
class BanChatInfo():
    AccountSuspensionType: AccountSuspensionType
    BanChatType: BanChatType
    LiftDateTime: str

# [MessagePackObject(True)]
@dataclass
class UserCharacterInfo():
    Guid: str
    PlayerId: int
    CharacterId: int
    Level: int
    SubLevel: int
    Exp: int
    RarityFlags: Flags[CharacterRarityFlags]
    IsLocked: bool

# [Description("フレンド状態種別")]
class FriendStatusType(Enum):
    # [Description("初期値")]
    None_ = 0
    # [Description("フレンドでない")]
    Stranger = 1
    # [Description("フレンド")]
    Friend = 2
    # [Description("フレンド申請中")]
    Applying = 3
    # [Description("承認待ち")]
    Receive = 4

class PlayerGuildPositionType(Enum):
    None_ = 0
    Leader = 1
    SubLeader = 2
    Member = 3

# [MessagePackObject(True)]
@dataclass
class PlayerInfo():
    DeckUserCharacterInfoList: list[UserCharacterInfo]
    BattlePower: int
    Comment: str
    CumulativeGuildFame: int
    FriendStatus: FriendStatusType
    GuildId: int
    GuildJoinRequestUtcTimeStamp: int
    GuildJoinTimeStamp: int
    GuildName: str
    GuildPeriodTotalFame: int
    IsBlock: bool
    LastLoginTime: TimeSpan
    LatestQuestId: int
    LatestTowerBattleQuestId: int
    LocalRaidBattlePower: int
    MainCharacterIconId: int
    NpcNameKey: str
    PlayerGuildPositionType: PlayerGuildPositionType
    PlayerId: int
    PlayerLevel: int
    PlayerName: str
    PrevLegendLeagueClass: LegendLeagueClassType

class GlobalGvgGroupType(Enum):
    All = 0
    Bronze = 1
    Silver = 2
    Golden = 3

class GuildActivityPolicyType(Enum):
    None_ = 0
    PlayFreely = 1
    PlayGuts = 2
    PlayLeisurely = 3
    PlayNoisy = 4
    BeginnerWelcome = 5

# [MessagePackObject(True)]
@dataclass
class GuildOverView():
    ActivityPolicyType: GuildActivityPolicyType
    GuildDescription: str
    GuildName: str
    IsFreeJoin: bool
    RequireBattlePower: int

# [MessagePackObject(True)]
@dataclass
class GuildInfo():
    GuildExp: int
    GuildId: int
    GuildLevel: int
    GuildFame: int
    GuildMemberCount: int
    GuildOverView: GuildOverView
    LeaderPlayerInfo: PlayerInfo

# [MessagePackObject(True)]
@dataclass
class GuildSyncData():
    ApplyPlayerInfoList: list[PlayerInfo]
    GlobalGvgGroupType: GlobalGvgGroupType
    GuildAnnouncement: str
    GuildAnnouncementUpdateTime: int
    GuildBattlePower: int
    GuildInfo: GuildInfo
    GuildPlayerInfoList: list[PlayerInfo]
    JoinGuildTime: int
    MatchingNumber: int
    PlayerGuildPositionType: PlayerGuildPositionType

@dataclass
class IGuildSyncApiResponse():
    GuildSyncData: GuildSyncData

# [MessagePackObject(True)]
@dataclass
class MissionGuideInfo():
    GuideId: int
    MissionGroupType: MissionGroupType
    MissionStatus: MissionStatusType

# [MessagePackObject(True)]
@dataclass
class MypageBannerInfo():
    DisplayPriority: int
    ImageId: int
    SortOrder: int
    TransferDetailInfo: TransferDetailInfo

# [Description("バッジタイプ")]
class BadgeType(Enum):
    # [Description("通常バッジ")]
    Normal = 0
    # [Description("豪華バッジ")]
    Special = 1

# [MessagePackObject(True)]
@dataclass
class MypageIconInfo():
    BadgeType: BadgeType
    DisplayPriority: int
    HidePriority: int
    IconNameKey: str
    Id: int
    ImageId: int
    IsDisplayBadge: bool
    SortOrder: int
    StoredIconInfoList: list[MypageIconInfo]
    StoreIconId: int
    TransferDetailInfo: TransferDetailInfo

# [MessagePackObject(True)]
@dataclass
class DisplayMypageInfo():
    MypageBannerInfos: list[MypageBannerInfo]
    MypageIconInfos: list[MypageIconInfo]

# [MessagePackObject(True)]
@dataclass
class UserFriendDtoInfo():
    FriendPointSendDate: int
    FriendStatusType: FriendStatusType
    IsChecked: bool
    IsReceived: bool
    OtherPlayerId: int
    RegistrationDate: int

# [MessagePackObject(True)]
@dataclass
class GvgDeckInfo():
    UserCharacterGuidList: list[str]
    DeckNo: int

# [MessagePackObject(True)]
@dataclass
class BattleTime():
    StartBattle: int
    EndBattle: int
    TotalCommand: int
    TotalCommandOrMinBattleTime: int

# [MessagePackObject(True)]
@dataclass
class BattleReward():
    CharacterExp: int
    DropItemList: list[UserItem]
    FixedItemList: list[UserItem]
    PlayerExp: int
    PopulationGold: int
    PopulationPotentialJewel: int

class BattleFieldCharacterGroupType(Enum):
    # [Description("攻撃側。バトル画面の左側")]
    Attacker = 0
    # [Description("防衛側。バトル画面の右側")]
    Receiver = 1

# [MessagePackObject(True)]
@dataclass
class BattleEndInfo():
    IsOutOfTurn: bool
    EndTurn: int
    WinGroupType: BattleFieldCharacterGroupType
    WinPlayerIdSet: set[int]

# [Description("バトルタイプ")]
class BattleType(Enum):
    # [Description("バトルタイプなし")]
    None_ = 0
    # [Description("放置")]
    Auto = 1
    # [Description("ボス戦")]
    Boss = 2
    # [Description("ギルドバトル")]
    GuildBattle = 3
    # [Description("グランドバトル")]
    GrandBattle = 4
    # [Description("バトルリーグ")]
    BattleLeague = 5
    # [Description("レジェンドリーグ")]
    LegendLeague = 6
    # [Description("幻影の神殿")]
    LocalRaid = 7
    # [Description("無窮の塔")]
    TowerBattle = 8
    # [Description("時空の洞窟")]
    DungeonBattle = 9
    # [Description("ギルドレイド")]
    GuildRaid = 11

class UnitType(Enum):
    # [Description("キャラクター")]
    Character = 0
    # [Description("放置バトルの敵")]
    AutoBattleEnemy = 1
    # [Description("時空の洞窟の敵")]
    DungeonBattleEnemy = 2
    # [Description("ギルドレイドボス")]
    GuildRaidBoss = 3
    # [Description("ボスバトルの敵")]
    BossBattleEnemy = 4
    # [Description("無窮の塔の敵")]
    TowerBattleEnemy = 5
    # [Description("幻影の神殿の敵")]
    LocalRaidEnemy = 6

# [MessagePackObject(True)]
@dataclass
class BattlePosition():
    DeckIndex: int
    GroupType: BattleFieldCharacterGroupType
    IsAttacker: bool

# [MessagePackObject(True)]
@dataclass
class BattleActiveSkill():
    ActiveSkillId: int
    SkillOrderNumber: int
    SkillMaxCoolTime: int
    SkillCoolTime: int
    SubSetSkillIds: list[int]

# [MessagePackObject(True)]
@dataclass
class BattlePassiveSkill():
    PassiveSkillId: int
    PassiveSubSetSkillInfos: list[PassiveSubSetSkillInfo]

# [MessagePackObject(True)]
@dataclass
class DungeonBattleInfo():
    DungeonBattleVictoryCount: int
    IsDungeonBattleHardMode: bool
    UseDungeonRecoveryItemCount: int
    UseDungeonRelicCountDict: dict[int, int]

# [MessagePackObject(True)]
@dataclass
class BattleFieldCharacter():
    PlayerName: str
    CharacterGuid: str
    CharacterLevel: int
    CharacterRarityFlags: Flags[CharacterRarityFlags]
    EquipmentMaxLevel: int
    EquipmentDtoInfos: list[UserEquipmentDtoInfo]
    UnitType: UnitType
    UnitId: int
    JobFlags: Flags[JobFlags]
    ElementType: ElementType
    DefaultBaseParameter: BaseParameter
    DefaultBattleParameter: BattleParameter
    BattleParameterWithoutBonus: BattleParameter
    OnStartHP: int
    DefaultPosition: BattlePosition
    Guid: int
    NormalSkill: BattleActiveSkill
    ActiveSkills: list[BattleActiveSkill]
    PassiveSkills: list[BattlePassiveSkill]
    OwnerPlayerId: int
    PlayerRankHitBonus: int
    DungeonBattleInfo: DungeonBattleInfo

# [MessagePackObject(True)]
@dataclass
class BattleField():
    BattleType: BattleType
    Characters: list[BattleFieldCharacter]
    AttackTeamPassiveSkillIds: list[int]
    ReceiveTeamPassiveSkillIds: list[int]
    AttackTeamTotalKillCount: int
    ReceiveTeamTotalKillCount: int
    # [Obsolete("TODO 2019-12-05 takeda 使わないなら削除、使うならLinq排除")]
    JoinPlayerIds: list[int]

# [Description("スキル演出タイプ")]
class SkillDisplayType(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("回復")]
    Heal = 1
    # [Description("物理攻撃")]
    PhysicalAttack = 2
    # [Description("魔法攻撃")]
    MagicAttack = 3
    # [Description("物理 (直接攻撃)")]
    PhysicalDirectDamage = 4
    # [Description("魔法 (直接攻撃)")]
    MagicDirectDamage = 5
    # [Description("Hp吸収")]
    HpDrain = 6
    # [Description("バフ")]
    Buff = 7
    # [Description("デバフ")]
    DeBuff = 8
    # [Description("物理攻撃カウンタ")]
    PhysicalCounterAttack = 9
    # [Description("魔法攻撃カウンタ")]
    MagicCounterAttack = 10
    # [Description("物理攻撃ダメージ連携")]
    PhysicalResonanceAttack = 11
    # [Description("魔法攻撃ダメージ連携")]
    MagicResonanceAttack = 12
    # [Description("効果削除")]
    RemoveEffect = 13
    # [Description("即時発動")]
    BurstEffect = 14
    # [Description("復活")]
    Resurrection = 20

# [Description("スキルカテゴリー")]
class SkillCategory(Enum):
    # [Description("回復")]
    Heal = 1
    # [Description("バフ")]
    Buff = 2
    # [Description("デバフ")]
    DeBuff = 3
    # [Description("固有バフ")]
    SpecialBuff = 4
    # [Description("固有デバフ")]
    SpecialDeBuff = 5
    # [Description("物理攻撃")]
    PhysicalAttack = 10
    # [Description("魔法攻撃")]
    MagicAttack = 11
    # [Description("物理 (防御無視)")]
    PhysicalNoDefense = 12
    # [Description("魔法 (防御無視)")]
    MagicNoDefense = 13
    # [Description("物理 (直接攻撃)")]
    PhysicalDirectDamage = 14
    # [Description("魔法 (直接攻撃)")]
    MagicDirectDamage = 15
    # [Description("物理 (固定攻撃)")]
    PhysicalFixDamage = 16
    # [Description("魔法 (固定攻撃)")]
    MagicFixDamage = 17
    # [Description("復活")]
    Resurrection = 50
    # [Description("ステータス吸収")]
    StatusDrain = 100
    # [Description("バフ効果削除")]
    RemoveBuffEffect = 500
    # [Description("デバフ効果削除")]
    RemoveDebuffEffect = 501
    # [Description("効果削除(エフェクトなし)")]
    RemoveOtherEffect = 502
    # [Description("即時発動(バフ用)")]
    BurstBuffEffect = 1000
    # [Description("即時発動(デバフ用)")]
    BurstDeBuffEffect = 1001

# [Description("バフ・デバフ効果グループ種別")]
class EffectGroupType(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("スタン")]
    Stun = 1

# [Description("バフ・デバフ効果種別")]
class EffectType(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("スピード増加")]
    SpeedUp = 1001
    # [Description("最大HP増加")]
    MaxHpUp = 1002
    # [Description("攻撃力増加")]
    AttackPowerUp = 1003
    # [Description("防御力増加")]
    DefenseUp = 1004
    # [Description("物理ダメージ緩和増加")]
    PhysicalDamageRelaxUp = 1005
    # [Description("魔法ダメージ緩和増加")]
    MagicDamageRelaxUp = 1006
    # [Description("防御貫通力増加")]
    DefensePenetrationUp = 1007
    # [Description("ダメージ強化増加")]
    DamageEnhanceUp = 1008
    # [Description("命中増加")]
    HitUp = 1009
    # [Description("回避増加")]
    AvoidanceUp = 1010
    # [Description("クリティカル増加")]
    CriticalUp = 1011
    # [Description("クリティカル耐性増加")]
    CriticalResistUp = 1012
    # [Description("HP吸収増加")]
    HpDrainUp = 1013
    # [Description("カウンタ増加")]
    DamageReflectUp = 1014
    # [Description("クリダメ強化増加")]
    CriticalDamageEnhanceUp = 1015
    # [Description("物理クリダメ緩和増加")]
    PhysicalCriticalDamageRelaxUp = 1016
    # [Description("魔法クリダメ緩和増加")]
    MagicCriticalDamageRelaxUp = 1017
    # [Description("弱体効果命中増加")]
    DebuffHitUp = 1018
    # [Description("弱体効果耐性増加")]
    DebuffResistUp = 1019
    # [Description("与HP回復量増加")]
    GiveHealRateUp = 1020
    # [Description("被HP回復量増加")]
    ReceiveHealRateUp = 1021
    # [Description("与ダメージ増加")]
    GiveDamageUp = 1022
    # [Description("被ダメージ減少")]
    ReceiveDamageDown = 1023
    # [Description("スキルクールダウン加速")]
    CoolTimeRecoveryUp = 1024
    # [Description("属性ダメージボーナス増加")]
    ElementBonusUp = 1025
    # [Description("与ダメージ基準値増加")]
    GiveDamageStandardUp = 1026
    # [Description("被ダメージ基準値減少")]
    ReceiveDamageStandardDown = 1027
    # [Description("命中率増加")]
    HitRateUp = 1500
    # [Description("回避率増加")]
    AvoidanceRateUp = 1501
    # [Description("クリティカル率増加")]
    CriticalRateUp = 1502
    # [Description("クリティカル耐性率増加")]
    CriticalResistRateUp = 1503
    # [Description("弱体効果命中率増加")]
    DebuffHitRateUp = 1504
    # [Description("弱体効果耐性率増加")]
    DebuffResistRateUp = 1505
    # [Description("ダメージ無効化")]
    DamageGuard = 2001
    # [Description("シールド1")]
    Shield1 = 2002
    # [Description("シールド2")]
    Shield2 = 2003
    # [Description("デバフ無効化")]
    DebuffGuard = 2004
    # [Description("行動阻害無効化")]
    ConfuseActionDebuffGuard = 2005
    # [Description("挑発")]
    Taunt = 2006
    # [Description("潜伏")]
    Stealth = 2007
    # [Description("除外")]
    NonTarget = 2008
    # [Description("デバフ付与")]
    GiveDebuff = 2009
    # [Description("通常攻撃強化")]
    NormalSkillEnhance = 2011
    # [Description("毎ターン回復")]
    HealOverTime = 2012
    # [Description("必ず回避")]
    NonHit = 2013
    # [Description("不死身")]
    Immortal = 2014
    # [Description("印")]
    SkillMark = 2015
    # [Description("スキル1強化")]
    ActiveSkill1Enhance = 2100
    # [Description("スキル2強化")]
    ActiveSkill2Enhance = 2101
    # [Description("カウンタ変更11")]
    DamageReflectEnhance11 = 2111
    # [Description("カウンタ変更12")]
    DamageReflectEnhance12 = 2112
    # [Description("カウンタ変更13")]
    DamageReflectEnhance13 = 2113
    # [Description("カウンタ変更14")]
    DamageReflectEnhance14 = 2114
    # [Description("カウンタ変更21")]
    DamageReflectEnhance21 = 2121
    # [Description("カウンタ変更22")]
    DamageReflectEnhance22 = 2122
    # [Description("カウンタ変更23")]
    DamageReflectEnhance23 = 2123
    # [Description("カウンタ変更24")]
    DamageReflectEnhance24 = 2124
    # [Description("カウンタ変更31")]
    DamageReflectEnhance31 = 2131
    # [Description("カウンタ変更32")]
    DamageReflectEnhance32 = 2132
    # [Description("カウンタ変更33")]
    DamageReflectEnhance33 = 2133
    # [Description("カウンタ変更34")]
    DamageReflectEnhance34 = 2134
    # [Description("全てのスキルのクールタイムを回復")]
    AllSkillCoolTimeRecovery = 3001
    # [Description("スキル1のクールタイムを回復")]
    Skill1CoolTimeRecovery = 3002
    # [Description("スキル2のクールタイムを回復")]
    Skill2CoolTimeRecovery = 3003
    # [Description("全てのスキルのクールタイムを増加")]
    AllSkillCoolTimeIncrease = 3004
    # [Description("スキル1のクールタイムを増加")]
    Skill1CoolTimeIncrease = 3005
    # [Description("スキル2のクールタイムを増加")]
    Skill2CoolTimeIncrease = 3006
    # [Description("すべてのバフ効果のターンを増やす")]
    ExtendAllBuffTurn = 3041
    # [Description("すべてのデバフ効果のターンを増やす")]
    ExtendAllDeBuffTurn = 3042
    # [Description("すべてのスタン効果のターンを増やす")]
    ExtendStunTurn = 3043
    # [Description("すべてのバフ効果のターンを減らす")]
    ReduceAllBuffTurn = 3044
    # [Description("すべてのデバフ効果のターンを減らす")]
    ReduceAllDeBuffTurn = 3045
    # [Description("指定した効果グループのターン数を1増やす")]
    ExtendEffectGroup = 3046
    # [Description("指定した効果グループのターン数を1減らす")]
    ReduceEffectGroup = 3047
    # [Description("指定したEffectのスタック数を1増やす")]
    IncreaseEffectStack = 3048
    # [Description("指定したEffectのスタック数を1減らす")]
    DecreaseEffectStack = 3049
    # [Description("全てのバフを解除")]
    RemoveAllBuff = 3050
    # [Description("全てのデバフを解除")]
    RemoveAllDeBuff = 3060
    # [Description("全ての行動阻害デバフを解除")]
    RemoveAllConfuseActionGroupDebuff = 3061
    # [Description("同じグループ効果を解除")]
    RemoveEffectGroup = 3101
    # [Description("同じタイプの効果をすべて解除")]
    RemoveEffectType = 3102
    # [Description("バフを解除")]
    RemoveBuff = 3103
    # [Description("デバフを解除")]
    RemoveDeBuff = 3104
    # [Description("同じタイプの固有効果をすべて解除")]
    RemoveSpecialEffectType = 3105
    # [Description("アーカイブバフをコピー")]
    CopyArchiveBuff = 3200
    # [Description("アーカイブデバフをコピー")]
    CopyArchiveDeBuff = 3201
    # [Description("ターゲットの全てのバフをコピー")]
    CopyAllBuffTargetToSelf = 3202
    # [Description("自分のすべてのデバフをターゲットにコピー")]
    CopyAllDeBuffSelfToTarget = 3203
    # [Description("敵のバフを奪う")]
    MoveBuffToMeFromEnemy = 3204
    # [Description("自分のデバフを敵に移す")]
    MoveDebuffToEnemyFromMe = 3205
    # [Description("スピード減少")]
    SpeedDown = 5001
    # [Description("最大HP減少")]
    MaxHpDown = 5002
    # [Description("攻撃力減少")]
    AttackPowerDown = 5003
    # [Description("防御力減少")]
    DefenseDown = 5004
    # [Description("物理ダメージ緩和減少")]
    PhysicalDamageRelaxDown = 5005
    # [Description("魔法ダメージ緩和減少")]
    MagicDamageRelaxDown = 5006
    # [Description("防御貫通力減少")]
    DefensePenetrationDown = 5007
    # [Description("ダメージ強化減少")]
    DamageEnhanceDown = 5008
    # [Description("命中減少")]
    HitDown = 5009
    # [Description("回避減少")]
    AvoidanceDown = 5010
    # [Description("クリティカル減少")]
    CriticalDown = 5011
    # [Description("クリティカル耐性減少")]
    CriticalResistDown = 5012
    # [Description("HP吸収減少")]
    HpDrainDown = 5013
    # [Description("カウンタ減少")]
    DamageReflectDown = 5014
    # [Description("クリダメ強化減少")]
    CriticalDamageEnhanceDown = 5015
    # [Description("物理クリダメ緩和減少")]
    PhysicalCriticalDamageRelaxDown = 5016
    # [Description("魔法クリダメ緩和減少")]
    MagicCriticalDamageRelaxDown = 5017
    # [Description("弱体効果命中減少")]
    DebuffHitDown = 5018
    # [Description("弱体効果耐性減少")]
    DebuffResistDown = 5019
    # [Description("与HP回復量減少")]
    GiveHealRateDown = 5020
    # [Description("被HP回復量減少")]
    ReceiveHealRateDown = 5021
    # [Description("与ダメージ減少")]
    GiveDamageDown = 5022
    # [Description("被ダメージ増加")]
    ReceiveDamageUp = 5023
    # [Description("スキルクールダウン減少")]
    CoolTimeRecoveryDown = 5024
    # [Description("与ダメージ基準値減少")]
    GiveDamageStandardDown = 5025
    # [Description("被ダメージ基準値増加")]
    ReceiveDamageStandardUp = 5026
    # [Description("命中率減少")]
    HitRateDown = 5500
    # [Description("回避率減少")]
    AvoidanceRateDown = 5501
    # [Description("クリティカル率減少")]
    CriticalRateDown = 5502
    # [Description("クリティカル耐性率減少")]
    CriticalResistRateDown = 5503
    # [Description("弱体効果命中率減少")]
    DebuffHitRateDown = 5504
    # [Description("弱体効果耐性率減少")]
    DebuffResistRateDown = 5505
    # [Description("スタン")]
    Stun = 6001
    # [Description("混乱")]
    Confuse = 6002
    # [Description("封印")]
    Silence = 6003
    # [Description("固執")]
    Stubborn = 6004
    # [Description("HP回復不可")]
    HpRecoveryForbidden = 7002
    # [Description("バフ獲得不可")]
    BuffForbidden = 7003
    # [Description("回避不可")]
    AvoidanceForbidden = 7004
    # [Description("ロックオン11")]
    LockOnSelf = 7111
    # [Description("ロックオン21")]
    LockOnAllAlly = 7121
    # [Description("ロックオン31")]
    LockOnBlueAlly = 7131
    # [Description("ロックオン32")]
    LockOnRedAlly = 7132
    # [Description("ロックオン33")]
    LockOnGreenAlly = 7133
    # [Description("ロックオン34")]
    LockOnYellowAlly = 7134
    # [Description("ロックオン35")]
    LockOnLightAlly = 7135
    # [Description("ロックオン36")]
    LockOnDarkAlly = 7136
    # [Description("ロックオン41")]
    LockOnWarriorAlly = 7141
    # [Description("ロックオン42")]
    LockOnSniperAlly = 7142
    # [Description("ロックオン43")]
    LockOnSorcererAlly = 7143
    # [Description("ロックオン51")]
    LockOnAttack1Ally = 7151
    # [Description("ロックオン52")]
    LockOnAttack2Ally = 7152
    # [Description("ロックオン53")]
    LockOnAttack3Ally = 7153
    # [Description("毒")]
    Poison = 8001
    # [Description("流血")]
    Bleeding = 8002
    # [Description("燃焼")]
    Combustion = 8003
    # [Description("火傷")]
    Burn = 8004
    # [Description("ダメージ連携11")]
    DamageResonanceFromSelfAndDamageReduction = 8111
    # [Description("ダメージ連携21")]
    DamageResonanceFromHighHpEnemy = 8121
    # [Description("ダメージ連携22")]
    DamageResonanceFromLowHpEnemy = 8122
    # [Description("ダメージ連携23")]
    DamageResonanceFromHighDefenseEnemy = 8123
    # [Description("ダメージ連携24")]
    DamageResonanceFromLowDefenseEnemy = 8124
    # [Description("ダメージ連携25")]
    DamageResonanceFromRandomEnemy = 8125
    # [Description("ダメージ連携31")]
    DamageResonanceFromAllEnemy = 8131
    # [Description("ダメージ連携41")]
    DamageResonanceFromAllAllyAndDamageReduction = 8141
    # [Description("スピード吸収")]
    SpeedDrain = 9001
    # [Description("攻撃力吸収")]
    AttackPowerDrain = 9003
    # [Description("防御力吸収")]
    DefenseDrain = 9004

# [MessagePackObject(True)]
@dataclass
class Effect():
    EffectType: EffectType
    EffectValue: int
    EffectMaxCount: int
    EffectCount: int

# [Description("効果削除種別")]
class RemoveEffectType(Enum):
    # [Description("ターンの終わり")]
    TurnCountEnd = 0
    # [Description("ターンの終わりとダメージを受けたとき")]
    TurnCountEndAndReceiveDamage = 1

# [MessagePackObject(True)]
@dataclass
class EffectGroup():
    EffectGroupId: int
    SkillCategory: SkillCategory
    EffectGroupType: EffectGroupType
    EffectTurn: int
    Effects: list[Effect]
    RemoveEffectType: RemoveEffectType
    LinkTargetGuid: int

# [Description("命中種別")]
class HitType(Enum):
    # [Description("無視")]
    Ignore = 0
    # [Description("命中")]
    Hit = 1
    # [Description("ミス")]
    Miss = 2
    # [Description("クリティカル")]
    Critical = 3
    # [Description("シールド1基本")]
    Shield1 = 4
    # [Description("シールド1クリティカル")]
    Shield1Critical = 5
    # [Description("シールド2基本")]
    Shield2 = 6
    # [Description("シールド2クリティカル")]
    Shield2Critical = 7
    # [Description("シールド破壊")]
    ShieldBreak = 8
    # [Description("シールド破壊クリティカル")]
    ShieldBreakCritical = 9

# [MessagePackObject(True)]
@dataclass
class SubSkillResult():
    SubSkillIndex: int
    SkillDisplayType: SkillDisplayType
    AttackUnitGuid: int
    TargetUnitGuid: int
    AddEffectGroups: list[EffectGroup]
    RemoveEffectGroups: list[EffectGroup]
    HitType: HitType
    ChangeHp: int
    TargetRemainHp: int

# [MessagePackObject(True)]
@dataclass
class TransientEffect():
    # [Description("効果種別")]
    EffectType: EffectType
    # [Description("効果値")]
    EffectValue: int
    # [Description("ヒット種別")]
    HitType: HitType

# [MessagePackObject(True)]
@dataclass
class TransientEffectResult():
    TransientEffects: list[TransientEffect]
    TransientEffectSubSkillResults: list[SubSkillResult]
    RemainHp: int

# [Description("サブセットタイプ")]
class SubSetType(Enum):
    # [Description("Live2D前の演出")]
    Live2DBefore = 0
    # [Description("Live2D基本演出")]
    DefaultLive2D = 1
    # [Description("Live2D後の基本演出")]
    DefaultLive2DAfter = 2
    # [Description("Live2Dのセット内連撃（5回未満）の演出")]
    UnderFiveLive2DInSubSet = 3
    # [Description("Live2D後のセット内連撃（5回未満）の演出")]
    UnderFiveLive2DAfterInSubSet = 4
    # [Description("Live2Dのセット内連撃（5回以上）の演出")]
    AboveFourLive2DInSubSet = 5
    # [Description("Live2D後のセット内連撃（5回以上）の演出")]
    AboveFourLive2DAfterInSubSet = 6
    # [Description("Live2Dのセット外連撃（5回未満）の演出")]
    UnderFiveLive2DOutOfSubSet = 7
    # [Description("Live2D後のセット外連撃（5回未満）の演出")]
    UnderFiveLive2DAfterOutOfSubSet = 8
    # [Description("Live2Dのセット外連撃（5回以上）の演出")]
    AboveFourLive2DOutOfSubSet = 9
    # [Description("Live2D後のセット外連撃（5回以上）の演出")]
    AboveFourLive2DAfterOutOfSubSet = 10

# [MessagePackObject(True)]
@dataclass
class SubSetSkillResult():
    DamageSubSkillResults: list[SubSkillResult]
    EffectSubSkillResults: list[SubSkillResult]
    PassiveSubSkillResults: list[SubSkillResult]
    TempSubSkillResults: list[SubSkillResult]
    SubSetType: SubSetType

# [MessagePackObject(True)]
@dataclass
class ActiveSkillData():
    TransientEffectResult: TransientEffectResult
    ActiveSkillId: int
    SubSetSkillResults: list[SubSetSkillResult]
    TurnEndSubSkillResults: list[SubSkillResult]
    IsNonActionStance: bool
    FromGuid: int

# [MessagePackObject(True)]
@dataclass
class BattleSubLog():
    TurnStartPassiveResults: list[SubSkillResult]
    TurnEndPassiveResults: list[SubSkillResult]
    ActiveSkillDatas: list[ActiveSkillData]
    Turn: int

# [MessagePackObject(True)]
@dataclass
class BattleLog():
    BattleStartPassiveResults: list[SubSkillResult]
    BattleEndPassiveResults: list[SubSkillResult]
    BattleSubLogs: list[BattleSubLog]

# [MessagePackObject(True)]
@dataclass
class BattleCharacterReport():
    PlayerName: str
    OwnerPlayerId: int
    DeckIndex: int
    GroupType: BattleFieldCharacterGroupType
    CharacterGuid: str
    BattleCharacterGuid: int
    UnitType: UnitType
    UnitId: int
    CharacterLevel: int
    CharacterRarityFlags: Flags[CharacterRarityFlags]
    ElementType: ElementType
    TotalGiveDamage: int
    TotalHpRecovery: int
    TotalReceiveDamage: int
    MaxHp: int
    Hp: int

# [MessagePackObject(True)]
@dataclass
class BattleSimulationResult():
    BattleEndInfo: BattleEndInfo
    BattleField: BattleField
    BattleLog: BattleLog
    BattleToken: str
    BattleCharacterReports: list[BattleCharacterReport]

# [MessagePackObject(True)]
@dataclass
class BattleResult():
    BattleTime: BattleTime
    QuestId: int
    Reward: BattleReward
    SimulationResult: BattleSimulationResult

# [MessagePackObject(True)]
@dataclass
class UserBattleAutoDtoInfo():
    AverageBattleTime: int
    BattleEfficiency: int
    ConsecutiveWinCount: int
    CurrentQuestId: int
    CurrentMaxQuestId: int
    ExpectedCharacterExp: int
    ExpectedPlayerExp: int
    QuickLastExecuteTime: int
    QuickTodayUseCurrencyCount: int
    QuickTodayUsePrivilegeCount: int
    BattleResult: BattleResult

# [MessagePackObject(True)]
@dataclass
class TradeShopItemInfo():
    # [Description("TradeShopItemMBのId")]
    TradeShopItemId: int
    # [Description("交換回数")]
    TradeCount: int

# [MessagePackObject(True)]
@dataclass
class TradeShopItem():
    # [Description("TradeShopItemMBのId")]
    TradeShopItemId: int
    # [Description("消費アイテム1")]
    ConsumeItem1: UserItem
    # [Description("消費アイテム2")]
    ConsumeItem2: UserItem
    # [Description("獲得アイテム")]
    GiveItem: UserItem
    # [Description("割引率")]
    SalePercent: int
    # [Description("交換回数")]
    TradeCount: int
    # [Description("交換制限回数(0:無制限s)")]
    LimitTradeCount: int
    # [Description("神器タイプ")]
    SacredTreasureType: SacredTreasureType
    # [Description("並び順")]
    SortOrder: int

# [MessagePackObject(True)]
@dataclass
class TradeShopTabInfo():
    # [Description("交換所タブMBのID")]
    TradeShopTabId: int
    # [Description("アイテムの種類")]
    TradeShopItems: list[TradeShopItem]
    # [Description("最後に無料更新を行った時間")]
    LastFreeManualUpdateTime: int
    # [Description("自動更新時間")]
    ExpirationTimeStamp: int

# [MessagePackObject(True)]
@dataclass
class TowerBattleLotteryRewardInfo():
    Floor: int
    LotteryRewardItemList: list[UserItem]

# [Description("エラーに対する挙動")]
class ErrorHandlingType(Enum):
    # [Description("何もしない")]
    None_ = 0
    # [Description("トーストを表示する")]
    Toast = 1
    # [Description("ダイアログを表示する")]
    OpenErrorDialog = 2
    # [Description("タイトルに戻るダイアログを表示する")]
    BackToTitle = 3
    # [Description("MagicOnionの再接続を行う")]
    MagicOnionReconnect = 4
    # [Description("MyPageに戻るダイアログを表示する")]
    BackToMyPage = 5

@dataclass
class IErrorResponse():
    ErrorHandlingType: ErrorHandlingType
    ErrorMessageId: int
    MessageParams: str

# [Description("エラーコード")]
class ErrorCode(Enum):
    # [Description("エラー無し")]
    None_ = 0
    # [Description("サーバー側でハンドリングされていない例外が発生した")]
    UncaughtException = 1
    # [Description("Headerが不正です")]
    InvalidRequestHeader = 2
    # [Description("アプリバージョンデータに異常が検出されました。")]
    InvalidDataAppVersionMB = 3
    # [Description("メンテナンス")]
    CommonMaintenance = 100
    # [Description("部分メンテナンス")]
    CommonSectionMaintenance = 101
    # [Description("ハードメンテナンス")]
    CommonHardMaintenance = 102
    # [Description("強制アップデート")]
    CommonRequireClientUpdate = 103
    # [Description("セッションがありません")]
    CommonNoSession = 111
    # [Description("別の端末でログインされました")]
    CommonLoggedInAnotherDevice = 112
    # [Description("NGワードが含まれます")]
    CommonContainsNgWord = 201
    # [Description("不正なAPI Requestです")]
    CommonApiInvalidRequest = 301
    # [Description("マスターデータが見つかりません。")]
    CommonNotFoundMasterData = 401
    # [Description("アプリアセットバージョンマスターデータが見つかりません。")]
    CommonNotFoundAppAssetVersionMasterData = 402
    # [Description("新規ユーザー生成禁止")]
    CommonUnableToCreateUser = 998
    # [Description("新規プレイヤー生成禁止")]
    CommonUnableToCreatePlayer = 999
    # [Description("付与可能なワールドに接続が必要です。")]
    CommonBuyProductDifferentGameServer = 1000
    # [Description("存在しないプレイヤーです。")]
    CommonDeletedPlayer = 1001
    # [Description("ユーザーデータがありません")]
    AuthNotFoundUserAccountDto = 10001
    # [Description("ユーザーのプレイヤーデータが存在しません")]
    AuthNotFoundUserPlayerDto = 10002
    # [Description("プレイヤーデータの取得に失敗しました")]
    AuthNotFoundPlayerDto = 10003
    # [Description("リクエストが不正です")]
    AuthAddSnsAccountInvalidRequest = 10101
    # [Description("パスワードは数字、大文字、小文字を組み合わせた8文字以上16文字以内です")]
    AuthAddSnsAccountInvalidPasswordFormat = 10102
    # [Description("既に連携済みのアカウントです。")]
    AuthAddSnsAccountAlreadyLinkedUserData = 10103
    # [Description("ユーザー作成に失敗しました")]
    AuthCreateUserFailed = 10201
    # [Description("リクエストが不正です。")]
    AuthInvalidCountryCode = 10301
    # [Description("国情報の識別に失敗しました。")]
    AuthTimeServerDecisionFailed = 10302
    # [Description("リクエストが不正です")]
    AuthLoginInvalidRequest = 10401
    # [Description("ログインしようとしているアカウントは既に削除されました。")]
    AuthLoginAlreadyDeletedUser = 10402
    # [Description("サーバーが満員です")]
    AuthJoinNewWorldMaxPlayerInWorld = 10501
    # [Description("リクエストが不正です")]
    AuthJoinNewWorldInvalidRequest = 10502
    # [Description("エラーが発生しました")]
    AuthJoinNewWorldAlreadyPlayer = 10503
    # [Description("国情報が不正です")]
    AuthJoinNewWorldInvalidTimeServer = 10504
    # [Description("ユーザーデータが存在しません")]
    AuthComebackUserNotFoundUserAccountDto = 10601
    # [Description("リクエストが不正です")]
    AuthComebackUserPasswordIsNull = 10602
    # [Description("パスワードは数字、大文字、小文字を組み合わせた8文字以上16文字以内です")]
    AuthComebackUserInvalidPasswordFormat = 10603
    # [Description("パスワードが正しくありません")]
    AuthComebackUserInvalidPassword = 10604
    # [Description("ユーザー情報の取得に失敗しました")]
    AuthComebackUserFailedToGetPlayerDataInfo = 10605
    # [Description("ユーザーの復帰情報の取得に失敗しました")]
    AuthComebackUserFailedToGetComebackUserInfo = 10606
    # [Description("IDまたはパスワードに誤りがあります")]
    AuthComebackUserAlreadyDeletedUser = 10607
    # [Description("国情報が不正です")]
    AuthGetServerHostInvalidTimeServer = 10701
    # [Description("設定タイプが範囲外です")]
    AuthSetUserSettingsUserSettingsTypeOutOfRange = 10801
    # [Description("別のユーザーのプレイヤーIDです")]
    AuthGiveSnsShareRewardNotSameUserId = 10901
    # [Description("既にSNSシェア報酬を受け取り済みです")]
    AuthGiveSnsShareRewardAlreadyReceived = 10902
    # [Description("報酬の付与に失敗しました")]
    AuthGiveSnsShareRewardFailedToGiveReward = 10903
    # [Description("アカウント削除が既に予約されています。")]
    AuthReserveAccountDeletionAsyncAlreadyReservedAccountDeletion = 11001
    # [Description("アカウント削除が予約されていません。")]
    AuthCancelReservedAccountDeletionNotReservedAccountDeletion = 11101
    # [Description("Twitterとの連携時にエラーが発生しました。")]
    AuthFailedToGetTwitterUserId = 12001
    # [Description("Twitterとの連携データが存在しません。")]
    AuthUserTwitterLinkageDtoNotFound = 12002
    # [Description("Appleとの連携に失敗しました。")]
    AuthFailedToVerifyAppleIdToken = 12101
    # [Description("Appleとの連携データが存在しません。")]
    AuthUserAppleLinkageDtoNotFound = 12102
    # [Description("GooglePlayとの連携時にエラーが発生しました。")]
    AuthFailedToGetGoogleUserId = 12201
    # [Description("GooglePlayとの連携データが存在しません。")]
    AuthUserGoogleLinkageDtoNotFound = 12202
    # [Description("キャラクターのデータがありません")]
    ItemEditorNotFoundCharacter = 80000
    # [Description("アイテムが不足しています")]
    ItemEditorNotEnoughItem = 80001
    # [Description("ダイヤが足りません。")]
    ItemEditorNotEnoughCurrency = 80002
    # [Description("有償ダイヤが足りません。")]
    ItemEditorNotEnoughPaidCurrency = 80003
    # [Description("消費できないアイテムです。")]
    ItemEditorNotConsumableItem = 80004
    # [Description("ユーザのボックスデータが存在しません。")]
    ItemEditorUserBoxSizeDtoNotFound = 82000
    # [Description("ユーザーのステータスデータが存在しません。")]
    ItemEditorUserStatusDtoNotFound = 82001
    # [Description("ユーザーのステータスデータがありません")]
    UserUserStatusDtoNotFound = 91000
    # [Description("ユーザーのアカウントデータがありません。")]
    UserUserAccountDtoNotFound = 91003
    # [Description("ユーザーの編成データがありません")]
    UserUserDeckDtoNotFound = 91004
    # [Description("ユーザのクリアパーティーが見つかりません")]
    UserClearPartyNotFound = 91007
    # [Description("ユーザのチュートリアルデータが見つかりません")]
    UserTutorialDtoNotFound = 91008
    # [Description("所持してないキャラーです")]
    UserNotHaveCharacter = 92000
    # [Description("無効な誕生日です。")]
    UserInvalidBirthday = 92001
    # [Description("誕生日は一度しか設定できません。")]
    UserCanOnlySetBirthdayOnce = 92002
    # [Description("重複したキャラクターIDが選択されています。")]
    UserSelectDuplicateCharacterId = 92003
    # [Description("認証に失敗しました")]
    UserFailedAuthentication = 92004
    # [Description("既に名前変更のチュートリアルを達成しています。")]
    UserAlreadyClearedChangeNameTutorial = 92005
    # [Description("ユーザーデータが見つかりません。")]
    UserNotFoundPlayerInfo = 92006
    # [Description("所持してないキャラクターです")]
    UserSetDeckNotFoundCharacter = 93101
    # [Description("デッキ内にキャラクターがいません。")]
    UserSaveDeckNobodyCharacter = 93104
    # [Description("重複しているキャラクターが存在します")]
    UserSaveDeckSameIdCharacter = 93105
    # [Description("パーティのキャラ上限数を超えています。")]
    UserSaveDeckOverMaxCharacterCount = 93106
    # [Description("パーティNoの値が不正です。")]
    UserSaveDeckInvalidDeckNo = 93107
    # [Description("ユーザーのステータスデータが存在しません。")]
    BattleCommonUserStatusDtoNotFound = 96000
    # [Description("例外ケースサブスキルの条件データが存在しません。")]
    BattleCommonNotFoundIrregularSubSkillConditionFormula = 97000
    # [Description("例外ケースサブスキルの値データが存在しません。")]
    BattleCommonNotFoundIrregularValueFormula = 97001
    # [Description("サブセットスキルの条件データが存在しません。")]
    BattleCommonNotFoundSubSetSkillConditionFormula = 97002
    # [Description("ダメージ系スキルの条件データが存在しません。")]
    BattleCommonNotFoundHpSubSkillConditionFormula = 97003
    # [Description("ダメージ系スキルの値データが存在しません。")]
    BattleCommonNotFoundHpSubSkillPowerValueFormula = 97004
    # [Description("効果系スキルの条件データが存在しません。")]
    BattleCommonNotFoundStatusSubSubSkillConditionFormula = 97005
    # [Description("効果系スキルの命中率データが存在しません。")]
    BattleCommonNotFoundStatusSubSubSkillHitValueFormula = 97006
    # [Description("効果系スキルの効果ターンデータが存在しません。")]
    BattleCommonNotFoundStatusSubSubSkillEffectTurnFormula = 97007
    # [Description("効果系スキルの効果値データが存在しません。")]
    BattleCommonNotFoundStatusSubSubSkillEffectValueFormula = 97008
    # [Description("ユーザーの放置バトルデータがありません")]
    BattleAutoUserBattleAutoDtoNotFound = 101000
    # [Description("ユーザーのボスバトルデータがありません")]
    BattleAutoUserBattleBossDtoNotFound = 101001
    # [Description("ユーザーのステータスデータがありません")]
    BattleAutoUserStatusDtoNotFound = 101002
    # [Description("ユーザーのオートバトルの報酬データがありません")]
    BattleAutoUserBattleAutoRewardDtoNotFound = 101003
    # [Description("ユーザーのチュートリアルデータがありません")]
    BattleAutoUserTutorialDtoNotFound = 101004
    # [Description("次のクエスト情報がありません")]
    BattleAutoNextQuestNotFound = 102000
    # [Description("バトルクエスト変更ができません")]
    BattleAutoInvalidChangeBattleQuest = 102001
    # [Description("石で高速周回できません")]
    BattleAutoInvalidCurrencyBattleQuick = 102002
    # [Description("特典回数が足りません")]
    BattleAutoNotEnoughPrivilegeCount = 102003
    # [Description("存在しない高速周回実行タイプです")]
    BattleAutoInvalidQuickExecuteType = 102005
    # [Description("特典がまだ残っています")]
    BattleAutoPrivilegeRemain = 102006
    # [Description("高速周回の最大値を超えました。")]
    BattleAutoOverQuickMaxCount = 102007
    # [Description("ユーザーのボスバトルデータがありません")]
    BattleBossUserBattleBossDtoNotFound = 111000
    # [Description("ユーザーのステータスデータがありません")]
    BattleBossUserStatusDtoNotFound = 111001
    # [Description("ユーザーのチュートリアルデータがありません")]
    BattleBossUserTutorialDtoNotFound = 111002
    # [Description("ユーザーの放置バトルデータがありません")]
    BattleBossUserBattleAutoDtoNotFound = 111003
    # [Description("クリアしていないボスには浸透できません")]
    BattleBossNotYetBossBattleClear = 112000
    # [Description("ボス挑戦回数が足りません")]
    BattleBossNotEnoughBossChallengeCount = 112001
    # [Description("ボス挑戦できません")]
    BattleBossImpossibleBossChallenge = 112002
    # [Description("次のクエスト情報がありません")]
    BattleBossNextQuestNotFound = 112003
    # [Description("ボス挑戦最大回数を超えました")]
    BattleBossOverBossChallengeMaxCount = 112004
    # [Description("石でボス挑戦券を購入できません")]
    BattleBossInvalidBuyBossBattleTicket = 112005
    # [Description("Vipレベルが足りなくて、ボス浸透できません。")]
    BattleBossNotEnoughVipLevelOrMaxQuestIdBossQuick = 112006
    # [Description("ユーザーのキャラクターデータがありません")]
    DungeonBattleCharacterDtoNotFound = 121000
    # [Description("ユーザーの見逃し回数データがありません")]
    DungeonBattleMissedCountDtoNotFound = 121001
    # [Description("ユーザの放置バトルデータがありません")]
    DungeonBattleUserBattleAutoDtoNotFound = 121002
    # [Description("ユーザのショップデータがありません")]
    DungeonBattleUserDungeonBattleShopDtoNotFound = 121003
    # [Description("ユーザの商品データがありません")]
    DungeonBattleUserShopItemDataNotFound = 121004
    # [Description("時空の洞窟のマップ情報がありません")]
    DungeonBattleDungeonBattleMapDtoNotFound = 121005
    # [Description("ユーザーの時空の洞窟敵情報がありません")]
    DungeonBattleUserDungeonBattleEnemyDtoNotFound = 121006
    # [Description("開催期間内のタームが無い")]
    DungeonBattleNoActiveTerm = 122001
    # [Description("開催期間外(※時間経過で期間外になった)")]
    DungeonBattleOutOfTerm = 122002
    # [Description("有効期間内のユーザーデータが見つからない")]
    DungeonBattleUserDataNotFound = 122003
    # [Description("マス種別とAPIが異なる")]
    DungeonBattleInvalidGrid = 122004
    # [Description("指定されたマスと現在位置が異なる（データ不整合）")]
    DungeonBattleInvalidGridRequest = 122006
    # [Description("最初の階層が見つからない")]
    DungeonBattleFirstLayerNotFound = 122010
    # [Description("最初のマスが見つからない")]
    DungeonBattleFirstGridNotFound = 122011
    # [Description("現在の階層が見つからない")]
    DungeonBattleCurrentLayerNotFound = 122012
    # [Description("現在のマスが見つからない")]
    DungeonBattleCurrentGridNotFound = 122013
    # [Description("ゲストキャラクターが不足しているのでMAP生成できない")]
    DungeonBattleGuestCharacterNotEnough = 122014
    # [Description("まだ層をクリアしていません")]
    DungeonBattleNotClearedLayerYet = 122015
    # [Description("次の層がありません")]
    DungeonBattleNextLayerNotFound = 122016
    # [Description("現在のマスは未完了です")]
    DungeonBattleCurrentGridIsNotDone = 122020
    # [Description("選択された遺物は強化できません")]
    DungeonBattleCanNotReinforceRelic = 122021
    # [Description("バトルはマスを事前に指定してください")]
    DungeonBattleBattleNotSelected = 122031
    # [Description("行商人はマスを事前に指定してください")]
    DungeonBattleShopNotSelected = 122040
    # [Description("行商人から購入しようとしたIDが存在しない")]
    DungeonBattleShopItemNotFound = 122041
    # [Description("行商人から購入しようとしたIDは購入済み")]
    DungeonBattleShopItemAlreadyBought = 122042
    # [Description("加護IDが不正です。")]
    DungeonBattleInvalidRelicId = 122043
    # [Description("強化可能なレアリティの加護ではありません。")]
    DungeonBattleInvalidReinforceRelicRarity = 122044
    # [Description("バトルマスではありません。")]
    DungeonBattleNotBattleGrid = 122045
    # [Description("バトル結果データが存在しません。")]
    DungeonBattleBattleResultNotFound = 122046
    # [Description("全キャラクター体力が最大です。")]
    DungeonBattleAllCharacterHPFull = 122047
    # [Description("編成キャラにHPが0のキャラクターがいます。")]
    DungeonBattleDeckContainCharacterHPZero = 122048
    # [Description("クリア報酬取得済みです。")]
    DungeonBattleAlreadyGetClearLayerReward = 122049
    # [Description("カロン敵データが設定されていません。")]
    DungeonBattleCharonInfoNotSetting = 122050
    # [Description("強化後の加護を既に持っています。")]
    DungeonBattleAlreadyHaveRelic = 122051
    # [Description("取得可能な加護がありません。")]
    DungeonBattleNotEnoughRelic = 122052
    # [Description("期間中の使用制限を超えています。")]
    DungeonBattleAlreadyMaxHealedByItem = 122053
    # [Description("ハードモードの解放条件を満たしていません。")]
    DungeonBattleNotEnoughHardModeCondition = 122054
    # [Description("時空の洞窟の解放条件を満たしていません。")]
    DungeonBattleNotOpen = 122055
    # [Description("ミステリーショップの商品が売り切れです。")]
    DungeonBattleMysteryShopBuyLimitCount = 122056
    # [Description("敵データが不足しているのでMAP生成できない")]
    DungeonBattleDungeonEnemyNotEnough = 122067
    # [Description("既に実行済みのマスです。")]
    DungeonBattleAlreadyDoneGrid = 122068
    # [Description("移動できないマスです。")]
    DungeonBattleCanNotMoveGrid = 122069
    # [Description("イベント特殊バトルマスが選択されていません。")]
    DungeonBattleNotSelectedEventSpecialBattleGrid = 122070
    # [Description("現在のマスがイベント特殊バトルマスではありません。")]
    DungeonBattleCurrentGridIsNotEventSpecialBattleGrid = 122071
    # [Description("まだイベント特殊マスで敗北していません。")]
    DungeonBattleNotLostBattleYet = 122072
    # [Description("時空の洞窟のマップ情報を更新しています。")]
    DungeonBattleUpdatingMap = 122073
    # [Description("選択できないマスです。")]
    DungeonBattleCanNotSelectGrid = 122074
    # [Description("ユーザーのバトルリーグデータがありません")]
    BattlePvpUserBattlePvpDtoNotFound = 131000
    # [Description("ユーザーのステータスデータがありません")]
    BattlePvpUserStatusDtoNotFound = 131001
    # [Description("ユーザーのレジェンドリーグデータがありません")]
    BattlePvpUserBattleLegendLeagueDtoNotFound = 131002
    # [Description("石でPVP挑戦券を購入できません")]
    BattlePvpInvalidBuyPvpTicket = 132000
    # [Description("PVP挑戦最大回数を超えました")]
    BattlePvpOverPvpChallengeMaxCount = 132001
    # [Description("レジェンドリーグランキングデータがありません")]
    BattlePvpNotFoundLegendLeagueData = 132002
    # [Description("レジェンドリーグの開催日ではありません")]
    BattlePvpNotOpenLegendLeague = 132003
    # [Description("レジェンドリーグの参加メンバーではありません")]
    BattlePvpNotFoundLegendLeagueMember = 132004
    # [Description("レジェンドリーグ挑戦最大回数を超えました")]
    BattlePvpOverLegendLeagueChallengeMaxCount = 132005
    # [Description("購入挑戦券の購入数が足りません")]
    BattlePvpNotEnoughBuyCount = 132006
    # [Description("一日購入できるレジェンドリーグ挑戦回数を超えました")]
    BattlePvpOverBuyLegendLeagueChallengeCount = 132007
    # [Description("プレイヤーIDが無効です。")]
    BattlePvpInvalidPlayerId = 132008
    # [Description("本日の参加条件を満たしていません。")]
    BattlePvpNotEnoughTodayLegendLeagueRequired = 132009
    # [Description("レジェンドリーグが解放されていません。")]
    BattlePvpLegendLeagueNotOpen = 132010
    # [Description("バトルリーグのランキング集計中です。")]
    BattlePvpWaitingBattleLeagueBatch = 132011
    # [Description("このプレイヤーのアカウントは削除されたため、挑戦できません")]
    BattlePvpDeletedAccount = 132012
    # [Description("バトルログの有効期限が切れています。")]
    BattlePvpNotFoundBattleLog = 132013
    # [Description("プレイヤーのランキング情報が存在しません。")]
    BattlePvpPlayerRankingNotFound = 132014
    # [Description("ランキングデータの更新に失敗しました。")]
    BattlePvpFailedToUpdateRankingData = 132015
    # [Description("ユーザーのボスバトルデータがありません")]
    BattleBossUserBountyQuestDtoNotFound = 141000
    # [Description("ユーザーデータがありません")]
    BountyQuestUserStatusDtoNotFound = 141001
    # [Description("ユーザーのチュートリアルデータがありません")]
    BountyQuestUserTutorialDtoNotFound = 141002
    # [Description("派遣可能な人数を超えました")]
    BountyQuestOverDispatchMember = 142000
    # [Description("所持してないキャラーが選択されました")]
    BountyQuestNotHaveCharacter = 142001
    # [Description("出発できない懸賞カウンタークエストです")]
    BountyQuestInvalidBountyQuest = 142002
    # [Description("進行中のクエストは出発できません")]
    BountyQuestNotEndBountyQuest = 142003
    # [Description("受け取り前のクエストは出発できません")]
    BountyQuestNotYetRewardBountyQuest = 142004
    # [Description("派遣人数が異常です。")]
    BountyQuestInvalidMemberCount = 142005
    # [Description("存在しない派遣条件タイプです")]
    BountyQuestInvalidBountyQuestConditionType = 142006
    # [Description("職業条件を満たす人数が足りません")]
    BountyQuestNotEnoughElementCondition = 142007
    # [Description("レアリティ条件を満たす人数が足りません")]
    BountyQuestNotEnoughRarityCondition = 142008
    # [Description("他のソロクエストで使われているキャラーが含まれています")]
    BountyQuestAlreadyUsedOtherSoloQuest = 142009
    # [Description("他のチームクエストで使われているキャラーが含まれています")]
    BountyQuestAlreadyUsedOtherTeamQuest = 142010
    # [Description("共有メンバーにないキャラーが選択されています")]
    BountyQuestNotDispatchShareCharacter = 142011
    # [Description("他のクエストで使われているキャラーが含まれています")]
    BountyQuestAlreadyUsedOtherQuest = 142012
    # [Description("受け取りできないクエストです")]
    BountyQuestInvalidRewardBountyQuest = 142013
    # [Description("ほかのユーザーのキャラーが必要です")]
    BountyQuestNotEnoughOtherUserCharacter = 142014
    # [Description("同一キャラクターを同じクエストに編成することはできません。")]
    BountyQuestCanNotAssignDuplicateIdCharacter = 142015
    # [Description("抽選グループが存在しません。")]
    BountyQuestInvalidLotteryGroup = 142016
    # [Description("存在しない属性です。")]
    BountyQuestNotDefinedElementType = 142017
    # [Description("一括派遣機能は使えません。")]
    BountyQuestUnavailableMultipleBountyQuest = 142018
    # [Description("一括受け取り機能は使えません。")]
    BountyQuestUnavailableRewardsBountyQuest = 142019
    # [Description("キャラクターレアリティ合計が不正です。")]
    BountyQuestInvalidCharacterRarityPoint = 142020
    # [Description("祈りの泉が解放されていません。")]
    BountyQuestNotOpen = 142021
    # [Description("アカウント削除されたプレイヤーのサポートキャラが含まれています")]
    BountyQuestContainsDeletedAccountSupportCharacter = 142022
    # [Description("ユーザーキャラクターサブデータが存在しません。")]
    CharacterUserCharacterSubDtoNotFound = 161000
    # [Description("ユーザーのステータスデータが存在しません。")]
    CharacterUserStatusDtoNotFound = 161003
    # [Description("ユーザキャラクターデータが存在しません。")]
    CharacterUserCharacterDtoNotFound = 161004
    # [Description("ユーザのボックスデータが存在しません。")]
    CharacterUserBoxSizeDtoNotFound = 161005
    # [Description("ユーザキャラクターの図鑑データが存在しません。")]
    CharacterUserCharacterBookDtoNotFound = 161006
    # [Description("レベルリンクデータが存在しません。")]
    CharacterUserLevelLinkDtoNotFound = 161007
    # [Description("レベルアップ機能は使えません。")]
    CharacterCannotUseLevelUp = 161008
    # [Description("レベルリセット機能は使えません。")]
    CharacterCannotUseLevelReset = 161009
    # [Description("ユーザーのチュートリアルデータが存在しません。")]
    CharacterUserTutorialDtoNotFound = 161010
    # [Description("エピソードIDが不正です。")]
    CharacterInvalidEpisodeId = 162000
    # [Description("強化に必要なランクに達していません。")]
    CharacterNotReachRequiredRank = 162008
    # [Description("Nレアリティではないものが含まれています")]
    CharacterNotRarityN = 162017
    # [Description("ロックされているキャラクターが含まれています")]
    CharacterLocked = 162018
    # [Description("指定したレベルが不正です。")]
    CharacterLevelInvalid = 162019
    # [Description("ベースキャラのレベルが不足しています。")]
    CharacterNotEnoughBaseCharactersLevel = 162020
    # [Description("これ以上拡張できません")]
    CharacterAlreadyCharacterBoxMaxSize = 162021
    # [Description("レベルリンクに登録されているキャラクターはレベルアップできません")]
    CharacterCannotLevelUpWithInLevelLinkCharacters = 162022
    # [Description("レベル1のキャラクターはリセットできません。")]
    CharacterResetCharacterLevelAlreadyOne = 162023
    # [Description("初期レアリティの条件を満たしていません。")]
    CharacterNotEnoughInitialRarity = 162024
    # [Description("ランクリセット可能なレアリティに到達していません。")]
    CharacterNotReachCanResetRarity = 162025
    # [Description("キャラクター所持数制限を超えてしまいます。")]
    CharacterCharacterBoxIsOverfull = 162026
    # [Description("SSR以上の同名キャラクターが一体しか存在しません。")]
    CharacterHigherSSRCharacterIsOnlyOne = 162027
    # [Description("レアリティ最大のキャラクターは選択できません。")]
    CharacterMaxRarityCharacterIsOnlyOne = 162028
    # [Description("同レアリティ内で最大のレベルのキャラクターはランクリセットできません。")]
    CharacterCanNotResetRankMaxLevelInSameRarity = 162029
    # [Description("キャラクターIDが異なります。")]
    CharacterIdDifferent = 162030
    # [Description("キャラクターelementが異なります。")]
    CharacterElementDifferent = 162031
    # [Description("キャラクターランクが最大値")]
    CharacterRankMaximum = 162032
    # [Description("放置バトルのキャラクターは対象にできません。")]
    CharacterExistsAutoBattleDeck = 162033
    # [Description("アルカナ解放条件がありません。")]
    CharacterNotEnoughCharacterCollectionCondition = 162034
    # [Description("アルカナ解放ができません。")]
    CharacterCannotOpenCharacterCollection = 162035
    # [Description("LR+5以上のレアリティのキャラクターを獲得したことがありません。")]
    CharacterNotEverExistOverRarityLRPlus5 = 162036
    # [Description("レアリティがSR、SR+以外のキャラクターが含まれています。")]
    CharacterNotRaritySROrSRPlus = 162037
    # [Description("LR+5以上のレアリティのキャラクターを所持していません。")]
    CharacterNotExistOverRarityLRPlus5 = 162038
    # [Description("メモリー機能が開放されていません")]
    CharacterGetCharacterStoryRewardNotOpen = 162039
    # [Description("ランクアップ条件を満たしていません。")]
    CharacterNotEnoughRankUpRarityCondition = 162040
    # [Description("進化機能が解放されていません。")]
    CharacterRankUpNotOpen = 162041
    # [Description("解放されてないアルカナです。")]
    CharacterCollectionNotOpen = 162042
    # [Description("バトル結果が見つかりません。")]
    LocalRaidBattleResultNotFound = 172000
    # [Description("幻影の神殿がまだ解放されてありません。")]
    LocalRaidNotOpenLocalRaid = 172001
    # [Description("デッキデータが存在しません。")]
    LocalRaidNotFoundPlayerDeckData = 172002
    # [Description("レベルリンクデータが存在しません。")]
    LocalRaidNotFoundLevelLinkData = 172003
    # [Description("このバトルのデータは削除されました")]
    LocalRaidDeletedAccount = 172004
    # [Description("ユーザの訓練所データが存在しません")]
    TowerBattleTowerBattleDtoNotFound = 181000
    # [Description("ユーザ情報データが存在しません")]
    TowerBattleUserStatusDtoNotFound = 181001
    # [Description("購入回数上限を超えています")]
    TowerBattleOverPurchaseLimit = 182000
    # [Description("挑戦できないクエストです")]
    TowerBattleNotClearPreQuest = 182001
    # [Description("訓練所掃討条件を満たしていません")]
    TowerBattleNotEnoughQuestCondition = 182002
    # [Description("訓練所挑戦回数が足りません")]
    TowerBattleNotEnoughChallengeCount = 182003
    # [Description("存在しない塔の種類です")]
    TowerBattleNotFoundTowerType = 182004
    # [Description("キャラの属性が不正です。")]
    TowerBattleCharacterElementTypeIsInvalid = 182005
    # [Description("属性の塔の一日に進行できる階層の回数を超えています。")]
    TowerBattleLimitOverClearNewFloorPerDay = 182006
    # [Description("無窮の塔が解放されていません。")]
    TowerBattleNotOpen = 182007
    # [Description("属性の塔は解放されていません。")]
    TowerBattleElementTowerNotOpen = 182008
    # [Description("属性の塔はクリア済みの階に挑戦出来ません。")]
    TowerBattleElementTowerNotEnterAlreadyClearedFloor = 182009
    # [Description("無効な塔の種類です。")]
    TowerBattleInvalidTowerType = 182010
    # [Description("塔の層が存在しません。")]
    TowerBattleNotOpenQuest = 182011
    # [Description("ユーザーのギルドデータがありません")]
    GuildRaidUserGuildDtoNotFound = 191000
    # [Description("ギルドデータがありません")]
    GuildRaidGuildDtoNotFound = 191001
    # [Description("ユーザーステータスデータがありません")]
    GuildRaidUserStatusDtoNotFound = 191002
    # [Description("ユーザーのギルドレイドデータが存在します")]
    GuildRaidExistUserGuildRaidDto = 191003
    # [Description("ユーザーの放置バトルデータが存在しません。")]
    GuildRaidUserBattleAutoDtoNotFound = 191004
    # [Description("ギルドレイドデータが存在しません")]
    GuildRaidGuildRaidDtoNotFound = 191005
    # [Description("ユーザーのギルドレイドデータが存在しません")]
    GuildRaidUserGuildRaidDtoNotFound = 191006
    # [Description("操作権限がありません")]
    GuildRaidNotHavePermission = 192001
    # [Description("開始中のギルドレイドボスが存在します")]
    GuildRaidAlreadyOpenGuildRaid = 192002
    # [Description("ギルドレイド挑戦回数を超えています")]
    GuildRaidOverChallengeCount = 192003
    # [Description("開始中のギルドレイドボスが存在しません")]
    GuildRaidNotExistGuildRaidBoss = 192004
    # [Description("ギルドレイド開始に必要な名声が足りません。")]
    GuildRaidNotEnoughGuildFame = 192005
    # [Description("掃討機能は利用不可です。")]
    GuildRaidNotAvailableQuickStart = 192006
    # [Description("現在解放ボスに挑戦できません。")]
    GuildRaidNotAllowedChallengeReleasableBoss = 192007
    # [Description("ギルドから除名されています。")]
    GuildRaidRemovedGuildMember = 192008
    # [Description("個人報酬の情報が見つかりません。")]
    GuildRaidNormalDamageBarInfoNotFound = 192010
    # [Description("既にボスは解放済みです")]
    GuildRaidAlreadyOpened = 192011
    # [Description("ギルド設立後24時間は解放できません")]
    GuildRaidNotOpenYet = 192012
    # [Description("対象ワールド報酬のデータが存在しません。")]
    GuildRaidNotFoundGoalDamageWorldReward = 192013
    # [Description("目標ダメージが足りません。")]
    GuildRaidNotEnoughGoalDamage = 192014
    # [Description("受け取りずみのワールド報酬です。")]
    GuildRaidAlreadyRewardWorldItem = 192015
    # [Description("ギルドレイドの期限外です。")]
    GuildRaidNotOpenGuildRaid = 192016
    # [Description("ガチャ開催中です。")]
    GachaAlreadyBeenOpened = 200110
    # [Description("既にその聖遺物が選択されています。")]
    GachaAlreadySelectedGachaRelic = 200120
    # [Description("セレクトリストに設定するキャラクター数が多すぎます。")]
    GachaOverMaxCountSelectList = 200130
    # [Description("セレクトリスト対象外のキャラクターが選択されています。")]
    GachaOtherCharacterSelectList = 200131
    # [Description("セレクトリストに設定する同属性のキャラクター数が多すぎます。")]
    GachaOverMaxCountSameElementTypeSelectList = 200132
    # [Description("ガチャ期間外です。")]
    GachaOutOfDate = 200201
    # [Description("ガチャが解放されていません。")]
    GachaNotOpen = 200202
    # [Description("条件を満たしていません。")]
    GachaInvalidButton = 200203
    # [Description("キャラクター所持枠上限です。")]
    GachaHaveMaxCharacter = 200204
    # [Description("運命ガチャの解放条件を満たしていません。")]
    GachaNotEnoughVipLevelOrMaxQuestIdDestinyGacha = 200205
    # [Description("チュートリアルの条件を満たしていません。")]
    GachaInvalidTutorialGacha = 200206
    # [Description("武具ガチャの解放条件を満たしていません。")]
    GachaNotEnoughMaxQuestIdEquipmentGacha = 200207
    # [Description("ガチャを引く回数が足りません。")]
    GachaInvalidDrawCount = 200208
    # [Description("ガチャチケットの使用期限外です。")]
    GachaInvalidGachaTicketPeriod = 200209
    # [Description("運命のガチャのセレクトリスト対象外のキャラクターが選択されています。")]
    GachaOtherCharacterDestinySelectList = 200210
    # [Description("ユーザーのステータスデータが存在しません。")]
    GachaUserStatusDtoNotFound = 200500
    # [Description("ユーザーの放置バトルデータが存在しません。")]
    GachaUserBattleAutoDtoNotFound = 200501
    # [Description("ユーザーのチュートリアルデータが存在しません。")]
    GachaUserTutorialDtoNotFound = 200502
    # [Description("バトルログが見つかりません。")]
    BattleCommonBattleLogNotFound = 220000
    # [Description("ユーザの装備データが存在しません。")]
    EquipmentUserEquipmentDtoNotFound = 231000
    # [Description("ユーザのステータスデータが存在しません。")]
    EquipmentUserStatusDtoNotFound = 231001
    # [Description("ユーザーのキャラクターデータが存在しません。")]
    EquipmentUserCharacterDtoNotFound = 231005
    # [Description("ユーザーのレベルリンクデータが存在しません。")]
    EquipmentUserLevelLinkDtoNotFound = 231006
    # [Description("ユーザーのチュートリアルデータが存在しません。")]
    EquipmentUserTutorialDtoNotFound = 231007
    # [Description("ユーザーの放置バトルデータが存在しません。")]
    EquipmentUserBattleAutoDtoNotFound = 231008
    # [Description("ユーザーの固定キャラクターデータが存在しません。")]
    EquipmentUserLockCharacterDtoNotFound = 231009
    # [Description("同じ種類の宝石は装備できません。")]
    EquipmentCanNotEquipSameKindSpheres = 232000
    # [Description("その部位には装備できません。")]
    EquipmentCanNotEquipOnThisPart = 232001
    # [Description("宝石スロットが存在しません。")]
    EquipmentMissingSphereSlot = 232002
    # [Description("宝石スロットはすべて解放されています。")]
    EquipmentSphereSlotAlreadyUnlockedAll = 232003
    # [Description("スロットの種類が違います。")]
    EquipmentDifferentSlotType = 232004
    # [Description("対象の装備がありません。")]
    EquipmentMissingEquipment = 232005
    # [Description("無効な神器融合のパターンです。")]
    EquipmentInvalidMergeSacredTreasurePattern = 232006
    # [Description("吸収に使用する素材がありません。")]
    EquipmentMissingAbsorbedMaterial = 232007
    # [Description("神器は消費できません。")]
    EquipmentCanNotConsumeSacredTreasure = 232008
    # [Description("装備不可能なキャラタイプです。")]
    EquipmentCharacterTypeCanNotBeEquipped = 232009
    # [Description("装備可能レベルを超えています。")]
    EquipmentExceedCanEquipLevel = 232010
    # [Description("他のキャラクターが装備しています。")]
    EquipmentEquippedByOtherCharacters = 232011
    # [Description("宝石が装着されている装備は選択できません。")]
    EquipmentCanNotSelectEquipmentWithSphere = 232012
    # [Description("限界まで強化済みです。")]
    EquipmentReinforcementLvAlreadyUpperLimit = 232013
    # [Description("通常武具は分解できません。")]
    EquipmentCanNotTakeApartNormalEquipment = 232014
    # [Description("通常武具以外は選択できません。")]
    EquipmentCanNotSelectSetAndExclusiveEquipment = 232015
    # [Description("装備中のアイテムは選択できません。")]
    EquipmentCanNotSelectEquippedItem = 232016
    # [Description("その武具は進化できません。")]
    EquipmentEquipmentCanNotEvolve = 232018
    # [Description("進化後装備情報が見つかりません。")]
    EquipmentEquipmentEvolutionInfoNotFound = 232019
    # [Description("指定した武具レアリティの付加パラメータ数が見つかりません。")]
    EquipmentAdditionalParameterCountNotFound = 232020
    # [Description("同一の武具IDを指定しています。")]
    EquipmentSpecifySameEquipmentGuid = 232021
    # [Description("VIPレベルが不足しています。")]
    EquipmentVipLvNotEnough = 232022
    # [Description("要求アイテムが存在しません。")]
    EquipmentRequiredItemIsNull = 232023
    # [Description("再分配する追加効果が存在しません。")]
    EquipmentNotFoundAdditionalParameterType = 232024
    # [Description("強化素材が不足しています。")]
    EquipmentReinforcementItemNotEnough = 232025
    # [Description("武具を装備してない部位です。")]
    EquipmentNotExistEquipment = 232026
    # [Description("装備できないスロットタイプです。")]
    EquipmentNotEqualEquipmentSlotType = 232027
    # [Description("宝石が不足しています。")]
    EquipmentGetComposeLackSphereResultFailed = 232028
    # [Description("強化レベルが上限を超えてしまいます。")]
    EquipmentInheritanceEquipmentFailed = 232029
    # [Description("セット武具進化に必要な強化レベルを満たしていません。")]
    EquipmentEvolutionSetPossibleLevel = 232030
    # [Description("専用武具進化に必要な強化レベルを満たしていません。")]
    EquipmentEvolutionExclusivePossibleLevel = 232031
    # [Description("装備中キャラクターのレアリティが条件を満たしていません。")]
    EquipmentEvolutionNotEnoughEquippingCharacterRarity = 232032
    # [Description("装備に必要なキャラクターレアリティを満たしていません。")]
    EquipmentEquipLREquipmentPossibleCharacterRarity = 232033
    # [Description("スフィア装着が解放されていません。")]
    EquipmentNotOpenSphereSetContent = 232034
    # [Description("宝石スロット開放数が異常です。")]
    EquipmentUnlockSphereSlotCountInvalid = 232035
    # [Description("武具進化機能の解放条件を満たしていません。")]
    EquipmentNotEnoughMaxQuestIdEvolution = 232036
    # [Description("神装強化機能の解放条件を満たしていません。")]
    EquipmentNotEnoughMaxQuestIdAscend = 232037
    # [Description("武具強化機能の解放条件を満たしていません。")]
    EquipmentNotEnoughMaxQuestIdStrength = 232038
    # [Description("武具研磨機能の解放条件を満たしていません。")]
    EquipmentNotEnoughMaxQuestIdRefine = 232039
    # [Description("無効なデッキ保存種別です。")]
    EquipmentInvalidLockEquipmentDeckType = 232040
    # [Description("装備固定のクールダウン中です。")]
    EquipmentLockEquipmentCooldownNow = 232041
    # [Description("装備固定機能が解放されていません。")]
    EquipmentLockEquipmentNotOpen = 232042
    # [Description("装備固定された武具データが存在しません。")]
    EquipmentLockEquipmentDtoNotFound = 232043
    # [Description("装備固定されたキャラクターが存在しません。")]
    EquipmentNotFoundLockCharacter = 232044
    # [Description("ユーザのフレンドデータが存在しません。")]
    FriendUserFriendDtoNotFound = 241000
    # [Description("ユーザのステータスデータが存在しません。")]
    FriendUserStatusDtoNotFound = 241001
    # [Description("ユーザの放置バトルデータが存在しません。")]
    FriendUserBattleAutoDtoNotFound = 241002
    # [Description("ユーザーのフレンドミッションデータが存在しません。")]
    FriendUserFriendMissionDtoNotFound = 241003
    # [Description("ユーザーのアカウントデータが存在しません。")]
    FriendUserAccountDtoNotFound = 241004
    # [Description("ユーザデータが見つかりません。")]
    FriendUserDataNotFound = 242000
    # [Description("自分自身のIDを検索しようとしています。")]
    FriendCanNotSearchOwnPlayerId = 242001
    # [Description("ブロック可能人数上限に達しています。")]
    FriendBlockListFull = 242002
    # [Description("これ以上フレンドを増やすことはできません。")]
    FriendFriendsFull = 242003
    # [Description("指定したプレイヤーはブロックしていません。")]
    FriendNotBlockTargetPlayer = 242004
    # [Description("相手のフレンド数が一杯です")]
    FriendTargetPlayerFriendsFull = 242005
    # [Description("申請可能数上限です。")]
    FriendFriendApplyingFull = 242006
    # [Description("既にフレンドになっています。")]
    FriendAlreadyFriend = 242007
    # [Description("承認待ちのプレイヤーです。")]
    FriendAwaitingApprovalPlayer = 242008
    # [Description("対象プレイヤーをブロックしています。")]
    FriendTargetPlayerBlocked = 242009
    # [Description("対象プレイヤーはフレンドです。")]
    FriendTargetPlayerIsFriend = 242010
    # [Description("自身のIDを対象にしています。")]
    FriendTargetPlayerIdIsMine = 242011
    # [Description("FriendInfoTypeが無効です。")]
    FriendInvalidFriendInfoType = 242012
    # [Description("相手の申請待ち件数が一杯です。")]
    FriendTargetPlayerReceivedFriendsFull = 242013
    # [Description("既にフレンドポイントを送信しています。")]
    FriendAlreadySentFriendPoint = 242014
    # [Description("本日送信されていないかまたは受取済です。")]
    FriendNotSendOrAlreadyReceivedFriendPoint = 242015
    # [Description("一日の受取上限に達しています。")]
    FriendAlreadyMaxReceived = 242016
    # [Description("フレンドポイントの上限に達しています。")]
    FriendAlreadyMaxOwned = 242017
    # [Description("フレンドキャンペーンが開催されてないです。")]
    FriendNotOpenFriendCampaign = 242018
    # [Description("存在しないフレンドミッションです。")]
    FriendNotContainFriendCampaignMission = 242019
    # [Description("存在しないフレンドコードです。")]
    FriendNotExistFriendCode = 242020
    # [Description("条件が足りなくフレンドコードは入力できないです。")]
    FriendNotOpenFriendCode = 242021
    # [Description("コード入力できる新規ユーザーではありません。")]
    FriendUnusableAccount = 242022
    # [Description("コード入力可能な時間が過ぎました。")]
    FriendOverTimeFriendCode = 242023
    # [Description("もう招待コードを使用しました。")]
    FriendAlreadyUseFriendCode = 242024
    # [Description("自分のコードは使用できません。")]
    FriendCannotUseSelfFriendCode = 242025
    # [Description("違う国のコードは使用できません。")]
    FriendCannotUseAnotherTimeServerFriendCode = 242026
    # [Description("同じアカウントのコードは一回しか使用できません。")]
    FriendCannotUseSameUserFriendCode = 242027
    # [Description("コードの使用制限を超えました。")]
    FriendOverUseLimitFriendCode = 242028
    # [Description("ギルド申請のデータがありません。")]
    GuildJoinRequestDtoNotFound = 251000
    # [Description("ギルドデータがありません。")]
    GuildGuildDtoNotFound = 251001
    # [Description("ユーザーのギルドデータがありません。")]
    GuildUserGuildDtoNotFound = 251002
    # [Description("ギルドオプションデータがありません。")]
    GuildSystemChatOptionNotFound = 251003
    # [Description("ギルドIDが無効です。")]
    GuildInvalidGuildId = 252000
    # [Description("権限が不足しています。")]
    GuildUserHasNoAuthority = 252001
    # [Description("既に存在するギルド名です。")]
    GuildAlreadyExistName = 252002
    # [Description("既にギルドに所属しています。")]
    GuildAlreadyBelong = 252003
    # [Description("申請が取り消されています。")]
    GuildCancelJoinRequest = 252005
    # [Description("ギルドのメンバーが満員です。")]
    GuildGuildMemberFull = 252006
    # [Description("ギルドに加入していないプレイヤーです。")]
    GuildInvalidTargetPlayer = 252007
    # [Description("リーダーは除名できません。")]
    GuildCanNotRemoveLeader = 252008
    # [Description("リーダー以外にギルドメンバーがいます。")]
    GuildExistMemberOtherThanLeader = 252009
    # [Description("戦闘力が不足しています。")]
    GuildNotEnoughBattlePower = 252010
    # [Description("ギルドへの申請数がいっぱいです。")]
    GuildApplyCountMax = 252011
    # [Description("クエスト進行が不足しています。")]
    GuildNotEnoughQuestId = 252012
    # [Description("一日に加入可能回数を超過しました。")]
    GuildDailyJoinedExceeded = 252013
    # [Description("既に加入申請しました")]
    GuildAlreadyApply = 252014
    # [Description("申請数がいっぱいです。")]
    GuildUserApplyCountMax = 252015
    # [Description("ギルド機能が開放されていません")]
    GuildGetGuildIdNotOpen = 252016
    # [Description("ギルドのメンバーが満員です。")]
    GuildApplyGuildGuildMemberFull = 252017
    # [Description("既にギルドに所属しています。")]
    GuildApplyGuildAlreadyBelong = 252018
    # [Description("ギルドに所属していません。")]
    GuildChangeLeaderNotBelongToGuild = 252019
    # [Description("ギルド名が入力されていません。")]
    GuildEmptyGuildName = 252020
    # [Description("ギルド名は10文字まで入力できます。")]
    GuildOverMaxLengthGuildName = 252021
    # [Description("使用できない単語が含まれています。")]
    GuildExistNgWordInGuildName = 252022
    # [Description("ギルド名保存処理に失敗しました。")]
    GuildFailToSaveGuildName = 252023
    # [Description("ユーザーデータが見つかりません。")]
    ShopCurrencyMissionDtoNotFound = 261000
    # [Description("ゲリラパックのデータが見つかりません。")]
    ShopGuerrillaPackDtoNotFound = 261001
    # [Description("ユーザデータが見つかりません。")]
    ShopFirstChargeBonusDtoNotFound = 261002
    # [Description("日付更新によりプレゼントボックスへ送られたか存在していない。")]
    ShopUserShopChargeBonusMissionDtoNotFound = 261003
    # [Description("ユーザデータが見つかりません。")]
    ShopUserAccountDtoNotFound = 261004
    # [Description("ユーザデータが見つかりません。")]
    ShopUserCurrencyMissionDtoNotFound = 261005
    # [Description("ユーザデータが見つかりません。")]
    ShopMonthlyBoostDtoNotFound = 261006
    # [Description("ユーザデータが見つかりません。")]
    ShopAchievementPackDtoNotFound = 261007
    # [Description("不正なリクエストです。")]
    ShopBuyProductInvalidRequest = 262000
    # [Description("VIPレベルが不足しています。")]
    ShopBuyProductNotEnoughVip = 262001
    # [Description("販売期間ではありません。")]
    ShopBuyProductNotOpen = 262002
    # [Description("上限回数購入済みです。")]
    ShopBuyProductBuyCountLimit = 262003
    # [Description("購入済みです。")]
    ShopBuyProductAlready = 262004
    # [Description("解放条件を満たしていません。")]
    ShopBuyProductNotEnoughChapterId = 262005
    # [Description("レシート検証に失敗しました。")]
    ShopInvalidReceipt = 262006
    # [Description("使用ずみのレシートです。")]
    ShopAlreadyUsedReceipt = 262007
    # [Description("補填ずみのレシートです。")]
    ShopAlreadyRecoveredReceipt = 262008
    # [Description("不正なリクエストです。")]
    ShopReceiveRewardInvalidRequest = 262009
    # [Description("必要条件を満たしていません。")]
    ShopReceiveAchievementPackRewardNotEnoughChapterId = 262010
    # [Description("必要条件を満たしていません。")]
    ShopReceiveAchievementPackRewardAlreadyReceive = 262011
    # [Description("期限が切れています。")]
    ShopMonthlyBoostExpired = 262012
    # [Description("既に受取済みです。")]
    ShopMonthlyBoostDailyRewardAlreadyGet = 262013
    # [Description("受取出来ません。")]
    ShopFirstChargeBonusNotReceived = 262014
    # [Description("不正なリクエストです。")]
    ShopFirstChargeBonusInvalidDay = 262015
    # [Description("不正な条件タイプです。")]
    ShopChargeBonusMissionTypeInvalid = 262016
    # [Description("ミッション情報が見つかりません。")]
    ShopChargeBonusMissionInfoNotFound = 262017
    # [Description("取得上限です。")]
    ShopLimitGetChargeBonus = 262018
    # [Description("不正なリクエストです。")]
    ShopEndChargeBonus = 262019
    # [Description("IOSレシート検証に失敗しました。")]
    ShopFailVerifyIOSReceipt = 262020
    # [Description("不正なリクエストです。")]
    ShopGrowthPackIsNotFree = 262021
    # [Description("レアリティ条件を満たしていません。")]
    ShopGrowthPackNotEnoughMaxRarity = 262022
    # [Description("コンテンツが解放されていません。")]
    ShopNotOpen = 262023
    # [Description("ダイヤが不足しています。")]
    ShopCurrencyNotEnough = 262024
    # [Description("既に受取済みです。")]
    ShopCurrencyMissionRewardAlreadyReceived = 262025
    # [Description("無効な数値です。")]
    ShopInvalidBirthYear = 262026
    # [Description("無効な数値です。")]
    ShopInvalidBirthMonth = 262027
    # [Description("既に登録済です。")]
    ShopConfirmAgeAlreadyRegister = 262028
    # [Description("無料ではありません。")]
    ShopRewardIsNotFree = 262029
    # [Description("データが見つかりません。")]
    ShopGuerrillaPackInfoNotFound = 262030
    # [Description("アイテム情報が見つかりません。")]
    ShopCurrencyMissionItemInfoNotFound = 262031
    # [Description("アイテム情報が見つかりません。")]
    ShopAchievementPackItemInfoNotFound = 262032
    # [Description("課金情報と一致しないアカウントです。")]
    ShopInvalidAccount = 262033
    # [Description("購入条件を満たしてありません。")]
    ShopBuyProductNotEnoughCondition = 262034
    # [Description("表示期間条件が不正です。")]
    ShopInvalidDisplayPeriodType = 262035
    # [Description("ユーザーのステータスデータが見つかりません。")]
    ChatUserStatusDtoNotFound = 271000
    # [Description("ユーザーのアカウントデータが見つかりません。")]
    ChatUserAccountDtoNotFound = 271001
    # [Description("対象ユーザにブロックされています。")]
    ChatBlockedByTargetPlayer = 272000
    # [Description("時間の指定が無効です。")]
    ChatInvalidRequestTimeStamp = 272001
    # [Description("自分自身に送信することはできません。")]
    ChatPlayerCanNotSendChatToHimself = 272002
    # [Description("チャットの間隔が短すぎます。")]
    ChatSendMessageRestriction = 272003
    # [Description("チャット禁止中です")]
    ChatSendMessageBanChat = 272004
    # [Description("未受け取りのプレゼントは削除できません。")]
    PresentDeleteNotReceivedPresent = 282001
    # [Description("削除済みのプレゼントは受け取れません。")]
    PresentReceiveDeletedPresent = 282002
    # [Description("プレゼントアイテムデータが存在しません。")]
    PresentItemListDataIsNull = 282003
    # [Description("プレゼントの受け取り期限を過ぎたため、受け取れませんでした。")]
    PresentReceiveExpiredPresent = 282004
    # [Description("アイテムが所持数上限に達しているため受け取れません。")]
    PresentReceiveOverLimitCountPresent = 282005
    # [Description("プレゼント機能が解放されていません。")]
    PresentNotOpen = 282006
    # [Description("受け取り済みのプレゼントは受け取れません。")]
    PresentReceiveAlreadyReceivedPresent = 282007
    # [Description("ユーザーのギルドデータが見つかりません。")]
    LocalGvgUserGuildDtoNotFound = 291000
    # [Description("ユーザーの放置バトルデータが見つかりません。")]
    LocalGvgUserBattleAutoDtoNotFound = 291001
    # [Description("ユーザーはギルドに入っていません。")]
    LocalGvgUserNotJoinGuild = 292000
    # [Description("報酬受け取りに失敗しました。")]
    LocalGvgReceiveRewardInvalidRequest = 292001
    # [Description("マッチング処理中です。")]
    LocalGvgNotMatchingYet = 292002
    # [Description("受け取れる報酬が見つかりませんでした。")]
    LocalGvgNotFoundReceivableReward = 292003
    # [Description("ユーザーのギルドデータが見つかりません。")]
    GlobalGvgUserGuildDtoNotFound = 301000
    # [Description("ギルドデータが見つかりません。")]
    GlobalGvgGuildDtoNotFound = 301001
    # [Description("ユーザーはギルドに入っていません。")]
    GlobalGvgUserNotJoinGuild = 302000
    # [Description("報酬受け取りに失敗しました。")]
    GlobalGvgReceiveRewardInvalidRequest = 302001
    # [Description("受け取れる報酬が見つかりませんでした。")]
    GlobalGvgNotFoundReceivableReward = 302003
    # [Description("ユーザのレベルリンクデータが見つかりません")]
    LevelLinkUserLevelLinkDtoNotFound = 311000
    # [Description("ユーザのキャラクターデータが見つかりません")]
    LevelLinkUserCharacterDtoNotFound = 311001
    # [Description("ユーザのレベルリンクメンバーデータが見つかりません")]
    LevelLinkUserLevelLinkMemberDtoNotFound = 311002
    # [Description("ユーザの情報データが見つかりません")]
    LevelLinkUserStatusDtoNotFound = 311003
    # [Description("セットずみのキャラクターが含まれています")]
    LevelLinkAlreadySetCharacter = 312000
    # [Description("セットできるメンバー数を超えました")]
    LevelLinkOverMember = 312001
    # [Description("パーティーレベルがもう最大です")]
    LevelLinkAlreadyMaxPartyLevel = 312002
    # [Description("条件を満たしているベースメンバー数が足りません")]
    LevelLinkNotEnoughMaxLevelBaseMember = 312003
    # [Description("メンバー枠の最大数を超えました")]
    LevelLinkOverMemberCount = 312004
    # [Description("パーティーレベルモードが開放されていません。")]
    LevelLinkNotPartyLevelModeOpen = 312008
    # [Description("通話での開放限度数を超過しました。")]
    LevelLinkOverOpenSlotCountWithCurrency = 312009
    # [Description("すでに パーティーモードです。")]
    LevelLinkAlreadyPartyMode = 312010
    # [Description("レベルリンク機能が開放されていません")]
    LevelLinkNotOpen = 312011
    # [Description("VipLvが不足しています")]
    VipBuyVipGiftNotEnoughVipLv = 322000
    # [Description("購入済みです")]
    VipBuyVipGiftAlreadyBuy = 322001
    # [Description("商品データが存在しません")]
    VipBuyVipGiftInvalidRequestVipGiftId = 322002
    # [Description("取得済みです")]
    VipGetDailyGiftAlreadyGet = 322003
    # [Description("ユーザーのステータスデータが存在しません。")]
    LoginBonusUserStatusDtoNotFound = 331000
    # [Description("ユーザーの月間ログインボーナス情報が存在しません。")]
    LoginBonusUserMonthlyLoginBonusDtoNotFound = 331001
    # [Description("ユーザーの期間限定ログインボーナス情報が存在しません。")]
    LoginBonusUserLimitedLoginBonusDtoNotFound = 331002
    # [Description("既に受け取り済みの日別報酬です。")]
    LoginBonusAlreadyReceivedDailyReward = 332000
    # [Description("未来の報酬は受け取れません。")]
    LoginBonusReceiveFutureReward = 332001
    # [Description("過去受取可能数が不足しています。")]
    LoginBonusReceivablePastRewardCountNotEnough = 332002
    # [Description("日別報酬情報が存在しません。")]
    LoginBonusDailyRewardInfoIsNull = 332003
    # [Description("既に受け取り済みの合計ログイン報酬です。")]
    LoginBonusAlreadyReceivedLoginCountReward = 332004
    # [Description("合計ログイン日数が不足しています。")]
    LoginBonusLoginCountNotEnough = 332005
    # [Description("合計ログイン報酬情報が存在しません。")]
    LoginBonusLoginCountRewardInfoIsNull = 332006
    # [Description("期間限定ログインボーナスが解放されていません。")]
    LoginBonusLimitedLoginBonusNotOpen = 332101
    # [Description("期間限定ログインボーナスが開催されていません。")]
    LoginBonusLimitedLoginBonusNotHeld = 332102
    # [Description("特別報酬が存在しません。")]
    LoginBonusNotExistSpecialReward = 332103
    # [Description("既に特別報酬は受け取り済みです。")]
    LoginBonusAlreadyReceivedSpecialReward = 332104
    # [Description("ユーザーデータが存在しません。")]
    NoticeUserAccountDtoNotFound = 341001
    # [Description("指定のお知らせアクセス種別が定義されていません")]
    NoticeNotDefinedNoticeAccessType = 342001
    # [Description("指定のお知らせカテゴリーが定義されていません。")]
    NoticeNotDefinedNoticeCategoryType = 342002
    # [Description("指定のお知らせカテゴリーはタイトルから取得できません。")]
    NoticeCanNotGetNoticeAccessCategoryInTitle = 342003
    # [Description("指定の言語種別が定義されていません。")]
    NoticeNotDefinedLanguageType = 342004
    # [Description("ユーザーのミッションデータが存在しません。")]
    MissionUserMissionDtoNotFound = 351000
    # [Description("ユーザーのミッションデータが存在しません。")]
    MissionUserMissionActivityDtoNotFound = 351001
    # [Description("ユーザーの放置バトルデータが存在しません。")]
    MissionUserBattleAutoDtoNotFound = 351002
    # [Description("ユーザーのチュートリアルデータが存在しません。")]
    MissionUserTutorialDtoNotFound = 351003
    # [Description("未解放のミッションです。")]
    MissionNotOpenMission = 352000
    # [Description("報酬が受け取れません。")]
    MissionNotReceivedMission = 352001
    # [Description("要求値を満たしていません。")]
    MissionNotEnoughRequireCount = 352002
    # [Description("存在しない報酬タイプです。")]
    MissionNotExistRewardType = 352003
    # [Description("購入できないミッションです。")]
    MissionMBNotAchievementType = 352004
    # [Description("通貨が不足しています。")]
    MissionNotEnoughCurrency = 352005
    # [Description("存在しないミッショングループタイプです。")]
    MissionNotExistMissionGroupType = 352006
    # [Description("MBがない、または達成済です。")]
    MissionActivityMBNotFoundOrAlreadyAchieved = 352007
    # [Description("受取出来ません。")]
    MissionActivityRewardNotReceived = 352008
    # [Description("ユーザーの放置バトルデータが存在しません。")]
    TradeShopUserBattleAutoDtoNotFound = 361000
    # [Description("ユーザーの放置バトルデータが存在しません。")]
    TradeShopUserStatusDtoNotFound = 361001
    # [Description("ユーザーの交換所データが存在しません。")]
    TradeShopUserTradeShopDtoNotFound = 361002
    # [Description("購入できない景品です。")]
    TradeShopInvalidTradeShopItem = 362000
    # [Description("購入可能な時間が過ぎました。")]
    TradeShopLimitTimeOver = 362001
    # [Description("購入制限を超えました。")]
    TradeShopOverLimitBuyCount = 362002
    # [Description("手動更新できないタブです。")]
    TradeShopInvalidResetType = 362003
    # [Description("利用できないタブです。")]
    TradeShopIsHideTab = 362004
    # [Description("有効期間ではありません。")]
    TradeShopNotOpen = 362005
    # [Description("ランキングが解放されていません。")]
    RankingNotOpenRankingContent = 372000
    # [Description("ユーザーのアカウント情報が存在しません")]
    TutorialAccountDtoNotFound = 401000
    # [Description("ユーザーのステータス情報が存在しません")]
    TutorialUserStatusDtoNotFound = 401001
    # [Description("ユーザーの放置バトル情報が存在しません")]
    TutorialUserBattleAutoDtoNotFound = 401002
    # [Description("ユーザーのデッキ情報が存在しません")]
    TutorialUserDeckDtoNotFound = 401003
    # [Description("不正なリクエストです")]
    TutorialOpenContentInvalidRequest = 402000
    # [Description("演出再生済みです")]
    TutorialOpenContentAlready = 402001
    # [Description("不正なチュートリアルIDです")]
    TutorialClearTutorialInvalidTutorialId = 402002
    # [Description("既に達成済みのチュートリアルです")]
    TutorialClearTutorialAlreadyCleared = 402003
    # [Description("スキップ対象のチュートリアルが存在しません")]
    TutorialSkipTutorialIdIsNullOrEmpty = 402004
    # [Description("スキップの条件を満たしていません")]
    TutorialNotEnoughSkipCondition = 402005
    # [Description("存在しないTreasureChestです。")]
    ItemOpenTreasureChestIdNotFound = 602004
    # [Description("存在しないTreasureChestです。")]
    ItemOpenTreasureChestItemNotFound = 602005
    # [Description("開ける数が少なすぎます。")]
    ItemOpenTreasureChestCountTooLittle = 602006
    # [Description("この宝箱は報酬を選択できません。")]
    ItemOpenTreasureChestCanNotSelect = 602007
    # [Description("この宝箱は報酬を選択してください。")]
    ItemOpenTreasureChestNotSelected = 602008
    # [Description("変換する数が足りません")]
    ItemNotEnoughChangeItemCount = 602009
    # [Description("抽選タイプが不正です。")]
    ItemNotMatchLotteryType = 602010
    # [Description("アイテムの終了日が不正です。")]
    ItemInvalidEndTime = 602011
    # [Description("宝箱の抽選アイテムが存在しません。")]
    ItemGetLotteryItemListGachaLotteryItemListInfoListIsEmpty = 602014
    # [Description("宝箱の抽選リストタイプが定義されていません。")]
    ItemOpenTreasureChestTreasureChestItemListTypeNotDefined = 602015
    # [Description("宝箱の抽選タイプが定義されていません。")]
    ItemOpenTreasureChestTreasureChestLotteryTypeNotDefined = 602016
    # [Description("リクエストの値が範囲外です。")]
    ItemOpenTreasureChestIndexOutOfRange = 602017
    # [Description("宝箱の抽選アイテムが存在しません。")]
    ItemOpenTreasureChestStaticItemIsNull = 602018
    # [Description("天井対象のアイテムが存在しません。")]
    ItemOpenTreasureChestCeilingTargetItemNotFound = 602019
    # [Description("LocalRaidで解散に失敗した")]
    MagicOnionLocalRaidDisbandRoomFailed = 900102
    # [Description("LocalRaidで他の部屋に参加しているので参加に失敗した")]
    MagicOnionLocalRaidJoinRoomAlreadyJoinedOtherRoom = 900103
    # [Description("LocalRaidで残り挑戦回数が不足していて参加に失敗した")]
    MagicOnionLocalRaidJoinRoomNoRemainingChallenges = 900104
    # [Description("LocalRaidで部屋が存在してなくて参加に失敗した")]
    MagicOnionLocalRaidJoinRoomNotExistRoom = 900105
    # [Description("LocalRaidでチームが満員で参加に失敗した")]
    MagicOnionLocalRaidJoinRoomMembersAreFull = 900106
    # [Description("LocalRaidで戦闘力不足で参加に失敗した")]
    MagicOnionLocalRaidJoinRoomNotEnoughBattlePower = 900107
    # [Description("LocalRaidでパスワードが不正で参加に失敗した")]
    MagicOnionLocalRaidJoinRoomWrongPassword = 900108
    # [Description("LocalRaidでRedis処理エラーで参加に失敗した")]
    MagicOnionLocalRaidJoinRoomRedisError = 900109
    # [Description("LocalRaidで脱退に失敗した")]
    MagicOnionLocalRaidLeaveRoomFailed = 900110
    # [Description("LocalRaidで部屋が存在してなくて脱退に失敗した")]
    MagicOnionLocalRaidLeaveRoomNotExistRoom = 900111
    # [Description("LocalRaidでリーダーなので脱退に失敗した")]
    MagicOnionLocalRaidLeaveRoomIsLeader = 900112
    # [Description("LocalRaidでデータの取得に失敗して脱退に失敗した")]
    MagicOnionLocalRaidLeaveRoomNotFoundData = 900113
    # [Description("LocalRaidでRedis処理エラーで脱退に失敗した")]
    MagicOnionLocalRaidLeaveRoomRedisError = 900114
    # [Description("LocalRaidで他の部屋に参加しているので作成に失敗した")]
    MagicOnionLocalRaidOpenRoomAlreadyJoinedOtherRoom = 900115
    # [Description("LocalRaidで開催していないクエストを参照したので作成に失敗した")]
    MagicOnionLocalRaidOpenRoomQuestNotHeld = 900116
    # [Description("LocalRaidで残り挑戦回数が不足していて作成に失敗した")]
    MagicOnionLocalRaidOpenRoomNoRemainingChallenges = 900117
    # [Description("LocalRaidでバトル開始に失敗した")]
    MagicOnionLocalRaidStartBattleFailed = 900118
    # [Description("LocalRaidでデータの取得に失敗してバトル開始に失敗した")]
    MagicOnionLocalRaidStartBattleNotFoundData = 900119
    # [Description("LocalRaidで開催期間が終了していてバトル開始に失敗した")]
    MagicOnionLocalRaidStartBattleExpiredLocalRaidQuest = 900120
    # [Description("LocalRaidで追放に失敗した")]
    MagicOnionLocalRaidRefuse = 900121
    # [Description("LocalRaidでデータの取得に失敗して追放に失敗した")]
    MagicOnionLocalRaidRefuseNotFoundData = 900122
    # [Description("LocalRaidでRedis処理エラーで追放に失敗した")]
    MagicOnionLocalRaidRefuseRedisError = 900123
    # [Description("LocalRaidで部屋が存在してなくて追放に失敗した")]
    MagicOnionLocalRaidRefuseNotExistRoom = 900124
    # [Description("LocalRaidでフレンド以外を誘って勧誘に失敗した")]
    MagicOnionLocalRaidInviteNotFriend = 900125
    # [Description("LocalRaidでデータの取得に失敗して勧誘に失敗した")]
    MagicOnionLocalRaidInviteNotFoundData = 900126
    # [Description("LocalRaidでデータの取得に失敗してフレンドの部屋への参加に失敗した")]
    MagicOnionLocalRaidJoinFriendRoomNotFoundData = 900127
    # [Description("LocalRaidで他の部屋に参加しているのでフレンドの部屋への参加に失敗した")]
    MagicOnionLocalRaidJoinFriendRoomAlreadyJoinedOtherRoom = 900128
    # [Description("LocalRaidで残り挑戦回数が不足していてフレンドの部屋への参加に失敗した")]
    MagicOnionLocalRaidJoinFriendRoomNoRemainingChallenges = 900129
    # [Description("LocalRaidでチームが満員でフレンドの部屋への参加に失敗した")]
    MagicOnionLocalRaidJoinFriendRoomMembersAreFull = 900130
    # [Description("LocalRaidでRedis処理エラーでフレンドの部屋への参加に失敗した")]
    MagicOnionLocalRaidJoinFriendRoomRedisError = 900131
    # [Description("LocalRaidで部屋が存在してなくてフレンドの部屋への参加に失敗した")]
    MagicOnionLocalRaidJoinFriendRoomNotExistRoom = 900132
    # [Description("LocalRaidで他の部屋に参加しているのでランダム参加に失敗した")]
    MagicOnionLocalRaidJoinRandomRoomAlreadyJoinedOtherRoom = 900133
    # [Description("LocalRaidで残り挑戦回数が不足していてランダム参加に失敗した")]
    MagicOnionLocalRaidJoinRandomRoomNoRemainingChallenges = 900134
    # [Description("LocalRaidで部屋が存在してなくてランダム参加に失敗した")]
    MagicOnionLocalRaidJoinRandomRoomNotExistRoom = 900135
    # [Description("LocalRaidでRedis処理エラーでランダム参加に失敗した")]
    MagicOnionLocalRaidJoinRandomRoomRedisError = 900136
    # [Description("LocalRaidで開催期間が終了していて解散された")]
    MagicOnionLocalRaidExpiredLocalRaidQuest = 900137
    # [Description("LocalRaidで残り挑戦回数が不足していて勧誘に失敗した")]
    MagicOnionLocalRaidInviteNoRemainingChallenges = 900138
    # [Description("LocalRaidで開催されているクエストないので失敗しました")]
    MagicOnionLocalRaidNotOpenQuest = 900139
    # [Description("LocalRaidでリーダーなので準備変更に失敗した")]
    MagicOnionLocalRaidReadyIsLeader = 900140
    # [Description("LocalRaidで準備完了ではないユーザがいる")]
    MagicOnionLocalRaidAllNotReady = 900141
    # [Description("LocalRaidで準備完了に失敗した")]
    MagicOnionLocalRaidReadyFailed = 900142
    # [Description("LocalRaidで部屋が存在してなくて準備完了に失敗した")]
    MagicOnionLocalRaidReadyNotExistRoom = 900143
    # [Description("LocalRaidでデータの取得に失敗して準備完了に失敗した")]
    MagicOnionLocalRaidReadyNotFoundData = 900144
    # [Description("LocalRaidでRedis処理エラーでフ準備完了に失敗した")]
    MagicOnionLocalRaidReadyRedisError = 900145
    # [Description("LocalRaidでルーム参加条件変更に失敗した")]
    MagicOnionLocalRaidUpdateRoomConditionFailed = 900146
    # [Description("LocalRaidでリーダーではないのでルーム参加条件変更に失敗した")]
    MagicOnionLocalRaidUpdateRoomConditionIsNotLeader = 900147
    # [Description("LocalRaidでRedis処理エラーでフルーム参加条件変更に失敗した")]
    MagicOnionLocalRaidUpdateRoomConditionRedisError = 900148
    # [Description("LocalRaidで戦闘力更新に失敗した")]
    MagicOnionLocalRaidUpdateBattlePowerFailed = 900150
    # [Description("LocalRaidで部屋が存在してなくて戦闘力更新に失敗した")]
    MagicOnionLocalRaidUpdateBattlePowerNotExistRoom = 900151
    # [Description("LocalRaidでデータの取得に失敗して戦闘力更新に失敗した")]
    MagicOnionLocalRaidUpdateBattlePowerNotFoundData = 900152
    # [Description("LocalRaidでRedis処理エラーでフ戦闘力更新に失敗した")]
    MagicOnionLocalRaidUpdateBattlePowerRedisError = 900153
    # [Description("LocalRaidで戦闘力不足でバトル開始に失敗した")]
    MagicOnionLocalRaidStartBattleNotEnoughBattlePower = 900154
    # [Description("LocalRaidで違うワールドのルームに入ろうとして失敗した")]
    MagicOnionLocalRaidJoinRoomNotSameWorld = 900155
    # [Description("LocalRaidでバトルデータが足りなくてバトル開始を失敗した")]
    MagicOnionLocalRaidNotEnoughBattleData = 900156
    # [Description("GlobalGvgで不正なリクエストによってパーティ追加に失敗した")]
    MagicOnionGlobalGvgAddCastlePartyInvalidRequest = 900302
    # [Description("GlobalGvgでデータの不整合によってパーティ追加に失敗した")]
    MagicOnionGlobalGvgAddCastlePartyInvalidData = 900303
    # [Description("GlobalGvgで配置できない城に配置しようとしてパーティ追加に失敗した")]
    MagicOnionGlobalGvgAddCastlePartyNotOwnCastle = 900304
    # [Description("GlobalGvgで行動力が不足してパーティ追加に失敗した")]
    MagicOnionGlobalGvgAddCastlePartyNotEnoughActionPoint = 900305
    # [Description("GlobalGvgで同じユニットを配置しようとしてパーティ追加に失敗した")]
    MagicOnionGlobalGvgAddCastlePartySameCharacter = 900306
    # [Description("GlobalGvgで先頭のパーティを操作しようとしてパーティ並び替えに失敗した")]
    MagicOnionGlobalGvgOrderCastlePartyFirst = 900307
    # [Description("GlobalGvgでデータの不整合によってパーティ並び替えに失敗した")]
    MagicOnionGlobalGvgOrderCastlePartyInvalidData = 900308
    # [Description("GlobalGvgでデータの不整合によって宣戦に失敗した")]
    MagicOnionGlobalGvgCastleDeclarationInvalidData = 900309
    # [Description("GlobalGvgで隣接していない城に宣戦しようとして宣戦に失敗した")]
    MagicOnionGlobalGvgCastleDeclarationDistant = 900310
    # [Description("GlobalGvgですでに他のギルドに宣戦されている城に宣戦しようとして宣戦に失敗した")]
    MagicOnionGlobalGvgCastleDeclarationByOtherGuild = 900311
    # [Description("GlobalGvgで宣戦の上限数を超えて宣戦しようとして宣戦に失敗した")]
    MagicOnionGlobalGvgCastleDeclarationMaxCount = 900312
    # [Description("GlobalGvgでデータの不整合によって反撃に失敗した")]
    MagicOnionGlobalGvgCastleDeclarationCounterInvalidData = 900313
    # [Description("GlobalGvgでギルドに加入してないエラー")]
    MagicOnionGlobalGvgCheckCanJoinBattleAndNoticeNotJoinGuild = 900314
    # [Description("GlobalGvgでギルドに加入した日は参加できないエラー")]
    MagicOnionGlobalGvgCheckCanJoinBattleAndNoticeJoinGuildToDay = 900315
    # [Description("GlobalGvgでリーダーかサブリーダー以外は操作できないエラー")]
    MagicOnionGlobalGvgCheckCanJoinBattleAndNoticeNotLeaderAndNotSubLeader = 900316
    # [Description("GlobalGvgが開放されていない")]
    MagicOnionGlobalGvgNotOpen = 900317
    # [Description("認証に失敗しました。")]
    MagicOnionAuthenticationFail = 1000000
    # [Description("プレイヤーの情報を見つけません。")]
    MagicOnionNotFoundPlayerInfo = 1000001
    # [Description("ユーザーIDの取得に失敗しました。")]
    MagicOnionFailedToGetUserId = 1000002
    # [Description("ギルドに入ってないです。")]
    MagicOnionNotJoinGuild = 1001000
    # [Description("チャットの内容が長すぎです。")]
    MagicOnionChatLimitOver = 1001001
    # [Description("チャットは連投できません。")]
    MagicOnionRepeatTimeOver = 1001002
    # [Description("メッセージの送信に失敗しました。")]
    MagicOnionFailSendMessage = 1001003
    # [Description("チャット禁止中です")]
    MagicOnionBanChat = 1001004
    # [Description("不正な城のIdです。")]
    MagicOnionInvalidCastleId = 1002000
    # [Description("配置できない城です。")]
    MagicOnionCannotSetCastle = 1002001
    # [Description("行動力が足りません。")]
    MagicOnionNotEnoughActionPoint = 1002002
    # [Description("同じキャラクターを1つの城に2回以上配置できません。")]
    MagicOnionAlreadySetCharacter = 1002003
    # [Description("先頭のパーティは操作できません。")]
    MagicOnionCannotControllFirstParty = 1002004
    # [Description("データが不正です。")]
    MagicOnionInvalidData = 1002005
    # [Description("キャッシュデータが存在しません。")]
    MagicOnionNotFoundCache = 1002006
    # [Description("隣接した城ではありません。")]
    MagicOnionNotNeighborCastle = 1002007
    # [Description("すでに他のギルドに宣戦されています。")]
    MagicOnionAlreadySelectedOtherGuild = 1002008
    # [Description("これ以上宣戦できません。")]
    MagicOnionCannotAttackOtherGuild = 1002009
    # [Description("ギルドに加入した日はLocalGvgに参加できません。")]
    MagicOnionCannotPlayLocalGvgInFirstDay = 1002010
    # [Description("この機能はリーダーかサブリーダーのみ実行できます。")]
    MagicOnionNotLeader = 1002011
    # [Description("ギルドバトルの参加条件を満たしていないです。")]
    MagicOnionNotJoinedGuildBattle = 1002012
    # [Description("宣戦する条件を満たしていないです。")]
    MagicOnionCanNotDeclaration = 1002013
    # [Description("キャラクターのキャッシュデータが存在しません。")]
    MagicOnionNotFoundCharacterCache = 1002014
    # [Description("作戦時間前のためまだ布告できません。")]
    MagicOnionBeforeDeclarationTime = 1002015
    # [Description("ギルドバトルが開催されていません。")]
    MagicOnionNotOpenGuildBattle = 1002016
    # [Description("プッシュ通知対象外の端末です。")]
    PushNotificationNotSupportedDeviceType = 4000000
    # [Description("プッシュ通知の登録に必要な情報が取得できません。")]
    InvalidDeviceToken = 4000001
    # [Description("不正なリクエストです。")]
    InvalidRemoteNotificationIgnoreTypes = 4000002
    # [Description("不正なリクエストです。")]
    NotSupportedRemoteNotificationIgnoreType = 4000003
    # [Description("不正なリクエストです。")]
    PushNotificationNotDefinedLanguageType = 4000004
    # [Description("DMM GAME PLAYERからゲームを起動しなおしてください。")]
    DmmOneTimeTokenExpired = 5000100
    # [Description("不正なリクエストです。")]
    DmmFailedToGetParamFromHeader = 5000101
    # [Description("DMM GAMESとの連携時にエラーが発生しました。")]
    DmmApiRequestFailedAuthCheckLogin = 5000102
    # [Description("DMM GAMESとの連携時にエラーが発生しました。")]
    DmmApiRequestFailed = 5000103
    # [Description("DMM GAMESとの連携時にエラーが発生しました。")]
    DmmApiRequestResultNotZero = 5000104
    # [Description("DMM GAMESとの連携時にエラーが発生しました。")]
    DmmApiRequestFailedIssueOneTimeToken = 5000105
    # [Description("DMM GAMESとの連携時にエラーが発生しました。")]
    DmmApiRequestFailedIdLinkage = 5000106
    # [Description("DMM GAMESとの連携時にエラーが発生しました。")]
    DmmMultiViewerIdLinkageRequested = 5000107
    # [Description("DMM GAMESとの連携機能がメンテナンス中です。")]
    DmmUnderMaintenance = 5000108
    # [Description("DMM GAMESとの連携情報が見つかりません。")]
    DmmDataLinkageInfoNotFound = 5000109
    # [Description("他のアカウントデータとDMMアカウントが連携しています。再度このアカウントデータとDMMアカウントを連携させてください。")]
    DmmDataLinkageNotActive = 5000110
    # [Description("DMM GAMESとの連携情報が見つかりません。")]
    DmmFailedToGetViewerId = 5000111
    # [Description("DMM ポイント確認に失敗しました。")]
    DmmApiRequestFailedAuthCheckPoint = 5000200
    # [Description("DMM月額課金サービスデータがそんざいしません。")]
    DmmApiRequestNotFoundDmmSubscription = 5000201
    # [Description("DMMのデバイスではありません。")]
    DmmApiRequestNotDmmDeviceType = 5000202

# [MessagePackObject(True)]
@dataclass
class ApiErrorResponse(ApiResponseBase, IErrorResponse):
    ErrorCode: ErrorCode
    Message: str
    # [Obsolete("ErrorCodeに移行します")]
    ErrorHandlingType: ErrorHandlingType
    # [Obsolete("ErrorCodeに移行します")]
    ErrorMessageId: int
    # [Obsolete("ErrorCodeに移行します")]
    MessageParams: str

# [Description("パーティー")]
# [MessagePackObject(True)]
@dataclass
class ClearPartyCharacterInfo():
    # [Description("Character固有キー")]
    CharacterGuid: str
    # [Description("CharacterMBのID")]
    CharacterId: int
    # [Description("レアリティ")]
    RarityFlags: Flags[CharacterRarityFlags]
    # [Description("レベル")]
    Level: int
    # [Description("レベルリンク可否")]
    IsLevelLink: bool
    # [Description("キャラクターが装着している武具情報")]
    UserEquipmentDtoInfos: list[UserEquipmentDtoInfo]
    # [Description("ベースパラメータ")]
    BaseParameter: BaseParameter
    # [Description("バトルパラメータ")]
    BattleParameter: BattleParameter
    # [Description("戦闘力")]
    BattlePower: int

# [Description("無窮の塔クリアパーティー情報")]
# [MessagePackObject(True)]
@dataclass
class TowerBattleClearPartyInfo():
    # [Description("クリア当時のキャラクター情報")]
    ClearPartyCharacterInfos: list[ClearPartyCharacterInfo]
    # [Description("クリア日")]
    ClearTimestamp: int
    # [Description("クリア当時デッキの総合戦闘力")]
    DeckBattlePower: int
    # [Description("階層")]
    Floor: int
    # [Description("プレイヤーアイコン枠情報")]
    LegendLeagueClass: LegendLeagueClassType
    # [Description("メインアイコンキャラクター")]
    MainCharacterIconId: int
    # [Description("クリアしたプレイヤーID")]
    PlayerId: int
    # [Description("ユーザー名")]
    PlayerName: str
    # [Description("クリア当時ランク")]
    Rank: int
    # [Description("塔の種類")]
    TowerType: TowerType

# [MessagePackObject(True)]
@dataclass
class BattleRewardResult():
    CharacterExp: int
    DropItemList: list[UserItem]
    ExtraGold: int
    FixedItemList: list[UserItem]
    PlayerExp: int
    RankUp: int

@dataclass
class IHasSteamTicketApiRequest():
    SteamTicket: str

class ShopProductType(Enum):
    # [Description("買い切り一般商品")]
    Default = 0
    # [Description("買い切りダイヤ商品")]
    Currency = 1
    # [Description("VIP情報")]
    VipInfo = 2
    # [Description("魔女の贈り物")]
    GrowthPack = 4
    # [Description("盟約特権")]
    ContractPrivilege = 5
    # [Description("月間ブースト")]
    MonthlyBoost = 6
    # [Description("課金機能付きミッション")]
    CurrencyMission = 7
    # [Description("初課金ボーナス")]
    FirstChargeBonus = 8
    # [Description("達成パック")]
    AchievementPack = 9
    # [Description("チャージ特典")]
    ChargeBonus = 10
    # [Description("ゲリラパック")]
    GuerrillaPack = 11
    # [Description("全検索")]
    AllSearch = 99

# [MessagePackObject(True)]
@dataclass
class AcquisitionShopRewardInfo():
    BonusItemList: list[UserItem]
    CharacterList: list[UserCharacterDtoInfo]
    ItemList: list[UserItem]
    ShopProductType: ShopProductType

# [MessagePackObject(True)]
@dataclass
class ShopAchievementInfo():
    # [Description("報酬解放章")]
    RequiredChapterId: int
    # [Description("報酬リスト")]
    # [Nest(True, 1)]
    UserItemList: list[UserItem]

# [MessagePackObject(True)]
@dataclass
class ShopProductAchievementPack():
    # [Description("ダイアログベース画像ID")]
    DialogImageId: int
    # [Description("終了日時")]
    EndTime: str
    # [Description("獲得ダイヤ量")]
    GetCurrencyCount: int
    # [Description("開放されているか")]
    IsOpen: bool
    # [Description("商品名キー")]
    NameKey: str
    # [Description("パネルベース画像ID")]
    PanelImageId: int
    # [Description("ProductId")]
    ProductId: str
    # [Description("払い戻し倍率")]
    RefundRate: int
    # [Description("報酬リスト")]
    ShopAchievementInfoList: list[ShopAchievementInfo]
    # [Description("商品値段")]
    ShopProductPrice: int
    # [Description("詳細ダイアログの概要説明キー")]
    SummaryKey: str
    # [Description("シンボル画像ID")]
    SymbolImageId: int
    # [Description("開放報酬")]
    UserItem: UserItem
    # [Description("受取情報")]
    UserShopAchievementPackDtoInfoList: list[UserShopAchievementPackDtoInfo]

# [MessagePackObject(True)]
@dataclass
class ShopChargeBonusMissionDetail():
    # [Description("獲得済み回数")]
    AlreadyReceivedCount: int
    # [Description("獲得可能回数")]
    CanReceiveCount: int
    # [Description("日数")]
    Day: int
    # [Description("獲得制限回数")]
    GetLimitCount: int
    # [Description("目標設定値")]
    RequiredValue: int
    # [Description("ShopChargeBonusMissionMBのID")]
    ShopChargeBonusMissionMBId: int
    # [Description("目標表示テキストキー")]
    TextKey: str
    # [Description("その日獲得した有償ダイヤの数")]
    TodayGetCurrency: int
    # [Description("報酬リスト")]
    UserItemList: list[UserItem]

class ShopChargeBonusMissionType(Enum):
    # [Description("買い切りダイヤ商品購入")]
    Currency = 1
    # [Description("有償ダイヤ購入")]
    CurrencySum = 2
    # [Description("有償ダイヤ連日購入")]
    CurrencySumDays = 3

# [MessagePackObject(True)]
@dataclass
class ShopProductChargeBonus():
    # [Description("ShopChargeBonusMBのID")]
    ShopChargeBonusMBId: int
    # [Description("詳細ダイアログベース画像ID")]
    DialogImageId: int
    # [Description("終了日時")]
    EndDateTime: str
    # [Description("商品パネルのベース画像ID")]
    ImageId: int
    # [Description("商品パネルのメッセージキー")]
    MessageKey: str
    # [Description("表示名キー")]
    NameKey: str
    # [Description("目標リスト")]
    ShopChargeBonusMissionDetailList: list[ShopChargeBonusMissionDetail]
    # [Description("チャージ特典条件タイプ")]
    ShopChargeBonusMissionType: ShopChargeBonusMissionType
    # [Description("詳細ダイアログ概要説明キー")]
    SummaryKey: str
    # [Description("シンボル画像ID")]
    SymbolImageId: int

# [MessagePackObject(True)]
@dataclass
class ShopContractPrivilegeDescription():
    # [Description("説明キー")]
    DescriptionKey: str
    # [Description("表示番号")]
    DisplayNumber: int

# [MessagePackObject(True)]
@dataclass
class ShopProductContractPrivilege():
    # [Description("特権概要説明")]
    DescriptionContractPrivilege: str
    # [Description("定期購読の説明")]
    DescriptionSubscription: str
    # [Description("ダイアログ画像ID")]
    DialogImageId: int
    # [Description("有効期限")]
    ExpirationTimeStamp: int
    # [Description("無料トライアルを既に使用しているか")]
    IsAlreadyUsedTrial: bool
    # [Description("パネル画像ID")]
    PanelImageId: int
    # [Description("1週間購入ボタンのProductId")]
    ProductIdWeekly: str
    # [Description("1週間購入の値段")]
    ShopProductPriceWeekly: int
    # [Description("1カ月購入ボタンのProductId")]
    ProductIdMonthly: str
    # [Description("1カ月購入の値段")]
    ShopProductPriceMonthly: int
    # [Description("特権詳細説明リスト")]
    ShopContractPrivilegeDescriptionList: list[ShopContractPrivilegeDescription]

# [MessagePackObject(True)]
@dataclass
class ShopProductCurrency():
    # [Description("お得バッジ画像ID")]
    BadgeImageId: int
    # [Description("告知用大画像ID")]
    BigImageId: int
    # [Description("ボーナス率")]
    BonusTextKey: str
    # [Description("画像ID")]
    ImageId: int
    # [Description("商品名キー")]
    NameKey: str
    # [Description("ProductId")]
    ProductId: str
    # [Description("商品値段")]
    ShopProductPrice: int
    # [Description("ボーナス報酬")]
    UserItemBonus: UserItem
    # [Description("報酬リスト")]
    UserItemList: list[UserItem]

# [MessagePackObject(True)]
@dataclass
class ShopCurrencyMissionInfo():
    # [Description("商品ID")]
    # [Nest(True, 1)]
    CommonRewardItem: UserItem
    # [Description("商品種別タイプ")]
    # [Nest(True, 1)]
    PremiumRewardItem1: UserItem
    # [Description("商品種別タイプ")]
    # [Nest(True, 1)]
    PremiumRewardItem2: UserItem
    # [Description("要求Pt")]
    RequiredPoint: int

class ShopCurrencyMissionType(Enum):
    # [Description("貢献メダル収集")]
    ActivityMedal = 1

# [MessagePackObject(True)]
@dataclass
class UserShopCurrencyMissionRewardDtoInfo():
    IsReceiveCommon: bool
    IsReceivePremium: bool
    RequiredPoint: int

# [MessagePackObject(True)]
@dataclass
class ShopProductCurrencyMission():
    # [Description("現在のポイント")]
    CurrentPoint: int
    # [Description("ダイアログベース画像ID")]
    DialogImageId: int
    # [Description("ミッションの終了日時")]
    EndDateTime: str
    # [Description("開放についての説明キー")]
    ExplanationKey: str
    # [Description("PT購入ボタン表示するか")]
    IsDisplayBuyPointButton: bool
    # [Description("開放報酬")]
    IsPremium: bool
    # [Description("商品名キー")]
    NameKey: str
    # [Description("パネルベース画像ID")]
    PanelImageId: int
    # [Description("ProductId")]
    ProductId: str
    # [Description("商品値段")]
    ShopProductPrice: int
    # [Description("目標リスト")]
    ShopCurrencyMissionInfoList: list[ShopCurrencyMissionInfo]
    # [Description("課金機能付きミッションの種類")]
    ShopCurrencyMissionType: ShopCurrencyMissionType
    # [Description("詳細ダイアログの概要説明キー")]
    SummaryKey: str
    # [Description("開放報酬")]
    UserItem: UserItem
    # [Description("受取状況リスト")]
    UserShopCurrencyMissionRewardDtoInfoList: list[UserShopCurrencyMissionRewardDtoInfo]

# [Description("購入回数制限タイプ")]
class ShopBuyLimitType(Enum):
    # [Description("購入回数制限なし")]
    None_ = 0
    # [Description("永久の購入回数制限")]
    Forever = 1
    # [Description("日単位の購入回数制限")]
    Daily = 2
    # [Description("週単位の購入回数制限")]
    Weekly = 3
    # [Description("月単位の購入回数制限")]
    Monthly = 4
    # [Description("指定された経過日数が経過し、その商品が閉じるときにリセット")]
    EndDisplayProduct = 5

class ShopProductUiType(Enum):
    Default = 0

# [Description("ショップアイテム")]
# [MessagePackObject(True)]
@dataclass
class ShopItem(IUserCharacterItem):
    RarityFlags: Flags[CharacterRarityFlags]
    # [Nest(True, 1)]
    Item: UserItem

# [MessagePackObject(True)]
@dataclass
class ShopProductDefault():
    # [Description("お得バッジ画像ID")]
    BadgeImageId: int
    # [Description("告知用大画像ID")]
    BigImageId: int
    # [Description("期間内購入回数")]
    BuyCountPeriod: int
    # [Description("購入回数制限の制限回数")]
    BuyLimitCount: int
    # [Description("ディスカウント率")]
    DiscountRate: int
    # [Description("終了日時")]
    EndDateTime: str
    # [Description("画像ID")]
    ImageId: int
    # [Description("無料フラグ")]
    IsFree: bool
    # [Description("ShopProductDefaultMBのId")]
    MBId: int
    # [Description("商品名キー")]
    NameKey: str
    # [Description("ProductId")]
    ProductId: str
    # [Description("購入回数リセット時間")]
    ResetTime: int
    # [Description("購入回数制限タイプ")]
    ShopBuyLimitType: ShopBuyLimitType
    # [Description("商品値段")]
    ShopProductPrice: int
    # [Description("商品UIタイプ")]
    ShopProductUiType: ShopProductUiType
    # [Description("報酬リスト")]
    UserItemList: list[ShopItem]

# [MessagePackObject(True)]
@dataclass
class ShopProductFirstChargeBonus():
    # [Description("詳細ダイアログキャラクターID")]
    CharacterId: int
    # [Description("商品パネルのベース画像ID")]
    PanelImageId: int
    # [Description("1日目の報酬")]
    ShopItemList1: list[ShopItem]
    # [Description("2日目の報酬")]
    ShopItemList2: list[ShopItem]
    # [Description("3日目の報酬")]
    ShopItemList3: list[ShopItem]
    # [Description("受取状況(未開放の場合はnull)")]
    UserShopFirstChargeBonusDtoInfo: UserShopFirstChargeBonusDtoInfo

# [Description("成長パックバフタイプ")]
class GrowthPackBuffType(Enum):
    # [Description("放置バトル")]
    Auto = 1
    # [Description("バトルリーグ")]
    BattleLeague = 2
    # [Description("ギルドレイド")]
    GuildRaid = 3

# [MessagePackObject(True)]
@dataclass
class ShopGrowthPackBuffInfo():
    # [Description("上昇するパラメータ")]
    # [PropertyOrder(2)]
    BattleParameterType: BattleParameterType
    # [Description("パラメータ増減タイプ")]
    # [PropertyOrder(3)]
    ChangeParameterType: ChangeParameterType
    # [Description("バフの影響範囲")]
    # [PropertyOrder(1)]
    GrowthPackBuffType: GrowthPackBuffType
    # [Description("値")]
    # [PropertyOrder(4)]
    Value: int

# [MessagePackObject(True)]
@dataclass
class ShopProductGrowthPackDetail():
    # [Description("バフ情報")]
    BuffInfo: ShopGrowthPackBuffInfo
    # [Description("現在購入回数")]
    CurrentBuyCount: int
    # [Description("バフか否か")]
    IsBuff: bool
    # [Description("無料フラグ")]
    IsFree: bool
    # [Description("購入可能回数")]
    MaxBuyCount: int
    # [Description("MBのID")]
    MBId: int
    # [Description("ProductId")]
    ProductId: str
    # [Description("商品値段")]
    ShopProductPrice: int
    # [Description("報酬リスト")]
    ShopItemList: list[ShopItem]

# [MessagePackObject(True)]
@dataclass
class ShopGrowthPackGoalDetail():
    # [Description("目標レアリティ")]
    CharacterRarityFlags: Flags[CharacterRarityFlags]
    # [Description("商品リスト")]
    ShopProductGrowthPackInfoList: list[ShopProductGrowthPackDetail]

# [MessagePackObject(True)]
@dataclass
class ShopProductGrowthPack():
    # [Description("キャラクターID")]
    CharacterId: int
    # [Description("終了日時")]
    EndTime: str
    # [Description("成長目標の不可視レアリティ")]
    InvisibleStartRarityFlag: CharacterRarityFlags
    # [Description("名称キー")]
    NameKey: str
    # [Description("成長リスト")]
    ShopGrowthPackGoalDetailList: list[ShopGrowthPackGoalDetail]

# [MessagePackObject(True)]
@dataclass
class ShopProductMonthlyBoost():
    # [Description("お得バッジ画像ID")]
    BadgeImageId: int
    # [Description("割引率")]
    DiscountRate: int
    # [Description("期限")]
    ExpirationTimeStamp: int
    # [Description("ヘルプパス")]
    HelpPath: str
    # [Description("デイリー報酬を受取済みか")]
    IsAlreadyReceive: bool
    # [Description("事前購入フラグ")]
    IsPrePurchased: bool
    # [Description("商品名キー")]
    NameKey: str
    # [Description("パネル画像ID")]
    PanelImageId: int
    # [Description("ProductId")]
    ProductId: str
    # [Description("商品値段")]
    ShopProductPrice: int
    # [Description("特権詳細説明リスト")]
    ShopContractPrivilegeDescriptionList: list[ShopContractPrivilegeDescription]
    # [Description("デイリー報酬")]
    UserItemDailyList: list[UserItem]
    # [Description("購入時報酬")]
    UserItem: UserItem

# [MessagePackObject(True)]
@dataclass
class ShopProductInfo():
    # [Description("表示順(昇順)")]
    DisplayOrder: int
    # [Description("商品MBのId")]
    MbId: int
    # [Description("商品MBのProductId")]
    # [Obsolete("1.2.2強制アップデート後削除")]
    ProductId: int
    # [Description("達成パック用データ")]
    ShopProductAchievementPack: ShopProductAchievementPack
    # [Description("チャージ特典用データ")]
    ShopProductChargeBonus: ShopProductChargeBonus
    # [Description("盟約特権用データ")]
    ShopProductContractPrivilege: ShopProductContractPrivilege
    # [Description("買い切りダイヤ商品用データ")]
    ShopProductCurrency: ShopProductCurrency
    # [Description("課金機能付きミッション用データ")]
    ShopProductCurrencyMission: ShopProductCurrencyMission
    # [Description("買い切り一般商品用データ")]
    ShopProductDefault: ShopProductDefault
    # [Description("初課金ボーナス用データ")]
    ShopProductFirstChargeBonus: ShopProductFirstChargeBonus
    # [Description("魔女の贈り物用データ")]
    ShopProductGrowthPack: ShopProductGrowthPack
    # [Description("ゲリラパック用データ")]
    ShopProductGuerrillaPack: ShopProductGuerrillaPack
    # [Description("月間ブースト用データ")]
    ShopProductMonthlyBoost: ShopProductMonthlyBoost
    # [Description("商品種別タイプ")]
    ShopProductType: ShopProductType

# [Description("装飾データ")]
# [MessagePackObject(True)]
@dataclass
class DecorationData():
    # [Description("アイコンID")]
    IconId: int
    # [Description("装飾ID")]
    DecorationId: int
    # [Description("カラー")]
    DecorationColor: str
    # [Description("追加装飾ID")]
    DecorationSpecialId: int
    # [Description("追加装飾カラー")]
    DecorationSpecialColor: str
    # [Description("購入回数制限タイプ")]
    ShopBuyLimitType: ShopBuyLimitType

# [MessagePackObject(True)]
@dataclass
class ShopTabInfo():
    # [Description("レイアウト")]
    CustomTextLayout: CustomTextLayout
    # [Description("装飾データ")]
    DecorationData: DecorationData
    # [Description("表示順(昇順)")]
    DisplayOrder: int
    # [Description("Id")]
    Id: int
    # [Description("タブ画像ID")]
    ImageId: int
    # [Description("ダイヤタブかどうか")]
    IsCurrencyTab: bool
    # [Description("タブ名キー")]
    NameKey: str
    # [Description("商品一覧")]
    ShopProductInfoList: list[ShopProductInfo]

# [MessagePackObject(True)]
@dataclass
class ShopProductSubInfo():
    # [Description("商品Id")]
    ProductId: str
    # [Description("商品値段")]
    ShopProductPrice: int

# [MessagePackObject(True)]
@dataclass
class GuildRank():
    BattlePower: int
    GuildInfo: GuildInfo
    GuildStock: int
    IsApplying: bool
    Rank: int

# [Description("ボス表示情報")]
# [MessagePackObject(True)]
@dataclass
class BossDisplayInfo():
    # [Description("ボス名称")]
    NameKey: str
    # [Description("ボスId(BattleEnemyMB)")]
    BossEnemyId: int

# [Description("ボス情報")]
# [MessagePackObject(True)]
@dataclass
class BossBattleInfo():
    # [Description("クエストId(QuestMB)")]
    QuestId: int
    # [Description("ドロップアイテムリスト")]
    BossBattleDropItems: list[UserItem]
    # [Description("ボスバトル確定ドロップアイテムリスト")]
    FixedBossBattleDropItems: list[UserItem]
    # [Description("ボスバトル初回ドロップアイテムリスト")]
    FirstBossBattleDropItems: list[UserItem]
    # [Description("ボス表示情報リスト")]
    BossDisplayInfos: list[BossDisplayInfo]

# [MessagePackObject(True)]
@dataclass
class MapPlayerInfo():
    LatestQuestId: int
    MainCharacterIconId: int
    PlayerId: int
    PlayerRank: int
    QuestId: int

# [MessagePackObject(True)]
@dataclass
class UserMapBuildingDtoInfo():
    SelectedIndex: int
    QuestMapBuildingId: int

# [MessagePackObject(True)]
@dataclass
class PresentItem(IUserCharacterItem):
    # [Description("アイテム")]
    # [Nest(True, 2)]
    # [PropertyOrder(1)]
    Item: UserItem
    # [Description("キャラクターレアリティ")]
    # [PropertyOrder(2)]
    RarityFlags: Flags[CharacterRarityFlags]

# [MessagePackObject(True)]
@dataclass
class UserPresentDtoInfo():
    CreateAt: int
    DisplayLimitDate: int
    Guid: str
    IsReceived: bool
    ItemList: list[PresentItem]
    Message: str
    ReceiveLimitDate: int
    Title: str

# [MessagePackObject(True)]
@dataclass
class ClearNotificationInfo():
    NotificationType: NotificationType
    Value: int

# [Description("お知らせカテゴリー")]
class NoticeCategoryType(Enum):
    # [Description("イベントタブ")]
    EventTab = 0
    # [Description("お知らせタブ")]
    NoticeTab = 1

# [Description("お知らせボタンのシンボル画像タイプ")]
class NoticeButtonImageType(Enum):
    # [Description("表示なし")]
    None_ = 0
    # [Description("インフォメーション")]
    Information = 1
    # [Description("アップデート")]
    Update = 2
    # [Description("メンテナンス")]
    Maintenance = 3
    # [Description("不具合")]
    Bug = 4
    # [Description("イベント")]
    Event = 5
    # [Description("ガチャ")]
    Gacha = 6
    # [Description("キャンペーン")]
    Campaign = 7
    # [Description("その他")]
    Other = 8

# [Description("お知らせ情報")]
# [MessagePackObject(True)]
@dataclass
class NoticeInfo():
    # [Description("バナーID")]
    BannerId: int
    # [Description("ボタン画像タイプ")]
    ButtonImageType: NoticeButtonImageType
    # [Description("ボタン上のタイトル")]
    ButtonTitle: str
    # [Description("カテゴリー")]
    CategoryType: NoticeCategoryType
    # [Description("NoticeMBのId")]
    Id: int
    # [Description("本文")]
    MainText: str
    # [Description("本文上のタイトル")]
    Title: str
    # [Description("グループID")]
    GroupId: int

# [Description("お知らせをどこから開いたか")]
class NoticeAccessType(Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("タイトル")]
    Title = 1
    # [Description("マイページ")]
    MyPage = 2

# [MessagePackObject(True)]
@dataclass
class MissionInfo():
    MissionExpirationTimeStamp: int
    UserMissionActivityDtoInfo: UserMissionActivityDtoInfo
    UserMissionDtoInfoDict: dict[MissionType, list[UserMissionDtoInfo]]

# [MessagePackObject(True)]
@dataclass
class AcquisitionMissionRewardInfo():
    CharacterList: list[UserCharacterDtoInfo]
    ItemList: list[UserItem]

# [Description("期間限定ログボの報酬アイテム")]
# [MessagePackObject(True)]
@dataclass
class LimitedLoginBonusRewardItem(IUserCharacterItem):
    # [Description("特別報酬アイテム")]
    Item: UserItem
    # [Description("キャラレアリティ")]
    RarityFlags: Flags[CharacterRarityFlags]

class LocalRaidRoomConditionsType(Enum):
    None_ = 0
    BattlePower = 1
    Password = 2
    All = 3

# [MessagePackObject(True)]
@dataclass
class LocalRaidBattleLogPlayerInfo():
    IsLeader: bool
    IsReady: bool
    IsInvite: bool
    PlayerInfo: PlayerInfo

# [MessagePackObject(True)]
@dataclass
class LocalRaidPartyInfo():
    ConditionsType: LocalRaidRoomConditionsType
    LeaderPlayerId: int
    LeaderPlayerName: str
    LocalRaidBattleLogPlayerInfoList: list[LocalRaidBattleLogPlayerInfo]
    Password: int
    WorldId: int
    QuestId: int
    RequiredBattlePower: int
    RoomId: str
    TotalBattlePower: int
    IsReady: bool

# [MessagePackObject(True)]
@dataclass
class LocalRaidBattleLogInfo():
    BattleEndInfo: BattleEndInfo
    BattleTime: int
    BattleToken: str
    LocalRaidPartyInfo: LocalRaidPartyInfo
    QuestId: int
    ClearLevel: int

# [MessagePackObject(True)]
@dataclass
class UserGvgCharacterInfo():
    BattlePower: int
    IsSettingLevelLink: bool
    UserCharacterInfo: UserCharacterInfo

# [MessagePackObject(False)]
@dataclass
class PartyInfo():
    # [Key(4)]
    AliveCharacterIdList: list[int]
    # [Key(0)]
    BattlePower: int
    # [Key(6)]
    GuildId: int
    # [Key(5)]
    IsNpc: bool
    # [Key(2)]
    OwnerPlayerId: int
    # [Key(3)]
    OwnerPlayerRank: int
    # [Key(1)]
    UserGvgCharacterInfoList: list[UserGvgCharacterInfo]

# [MessagePackObject(False)]
@dataclass
class CastleBattleHistoryInfo_PartyInfoAndName():
    # [Key(3)]
    CharacterId: int
    # [Key(2)]
    OwnerPlayerGuildName: str
    # [Key(1)]
    OwnerPlayerName: str
    # [Key(0)]
    PartyInfo: PartyInfo

# [MessagePackObject(False)]
@dataclass
class CastleBattleHistoryInfo():
    # [Key(2)]
    AttackerParty: CastleBattleHistoryInfo_PartyInfoAndName
    # [Key(0)]
    BattleToken: str
    # [Key(7)]
    IsCounter: bool
    # [Key(1)]
    LocalHoursAndMinutes: int
    # [Key(3)]
    ReceiverParty: CastleBattleHistoryInfo_PartyInfoAndName
    # [Key(4)]
    WinContinueCount: int
    # [Key(5)]
    LoserWinContinueCount: int
    # [Key(6)]
    WinGroupType: BattleFieldCharacterGroupType

# [MessagePackObject(True)]
@dataclass
class RecordInfo():
    ContinueCount: int
    GuildName: str
    IsNpc: bool
    LegendLeagueClassType: LegendLeagueClassType
    PlayerCharacterId: int
    PlayerId: int
    PlayerName: str

# [Description("キャラクターソート種別")]
class CharacterSortType(Enum):
    # [Description("レアリティ")]
    Rarity = 0
    # [Description("戦力")]
    BattlePower = 1
    # [Description("アバターなしのキャラID")]
    RootCharacterId = 2
    # [Description("キャラタイプ")]
    CharacterType = 3
    # [Description("属性")]
    CharacterAttribute = 4
    # [Description("キャラレベル")]
    CharacterLevel = 5
    # [Description("レベルリンクレベル確認ダイアログ用")]
    CheckLevelLinkLevel = 6
    # [Description("キャラ一覧画面 デフォルト設定")]
    CharacterListDefault = 7
    # [Description("お気に入りキャラ")]
    Favorite = 8
    # [Description("ソートしない")]
    None_ = 9

# [Description("高速周回チケット")]
class QuestQuickTicketType(Enum):
    # [Description("ゴールド1時間")]
    GoldHours1 = 1
    # [Description("ゴールド2時間")]
    GoldHours2 = 2
    # [Description("ゴールド6時間")]
    GoldHours6 = 3
    # [Description("ゴールド8時間")]
    GoldHours8 = 4
    # [Description("ゴールド24時間")]
    GoldHours24 = 5
    # [Description("経験珠1時間")]
    ExpHours1 = 6
    # [Description("経験珠2時間")]
    ExpHours2 = 7
    # [Description("経験珠6時間")]
    ExpHours6 = 8
    # [Description("経験珠8時間")]
    ExpHours8 = 9
    # [Description("経験珠24時間")]
    ExpHours24 = 10
    # [Description("潜在宝珠1時間")]
    SeedHours1 = 11
    # [Description("潜在宝珠2時間")]
    SeedHours2 = 12
    # [Description("潜在宝珠6時間")]
    SeedHours6 = 13
    # [Description("潜在宝珠8時間")]
    SeedHours8 = 14
    # [Description("潜在宝珠24時間")]
    SeedHours24 = 15
    # [Description("豪華な袋1時間")]
    LuxuryHours1 = 16
    # [Description("豪華な袋2時間")]
    LuxuryHours2 = 17
    # [Description("豪華な袋6時間")]
    LuxuryHours6 = 18
    # [Description("豪華な袋8時間")]
    LuxuryHours8 = 19
    # [Description("豪華な袋24時間")]
    LuxuryHours24 = 20

# [MessagePackObject(True)]
@dataclass
class TreasureChestReward(IUserCharacterItem):
    SacredTreasureType: SacredTreasureType
    RarityFlags: Flags[CharacterRarityFlags]
    Item: UserItem

# [MessagePackObject(True)]
@dataclass
class TreasureChestItemLotteryRate():
    LotteryRate: float
    IsCeilingTarget: bool
    TreasureChestReward: TreasureChestReward

# [MessagePackObject(True)]
@dataclass
class TreasureChestItemLotteryRateListInfo():
    CeilingCount: int
    LotteryRateList: list[TreasureChestItemLotteryRate]
    TreasureChestItemId: int

# [MessagePackObject(True)]
@dataclass
class GuildRaidBossInfo():
    BossGuid: str
    Name: str
    MaxHp: int
    TotalDamage: int
    StartTimeStamp: int
    EndTimeStamp: int
    CurrentHp: int

# [MessagePackObject(True)]
@dataclass
class GuildRaidDtoInfo():
    BossType: GuildRaidBossType
    CloseLimitTime: int
    LastReleaseTime: int
    TotalChallengeCount: int
    TotalDamage: int

# [MessagePackObject(True)]
@dataclass
class GuildRaidUserRankingInfo():
    LegendLeagueClass: LegendLeagueClassType
    MainCharacterIconId: int
    PlayerId: int
    PlayerName: str
    TotalDamage: int
    TotalDamagePercent: float

# [MessagePackObject(True)]
@dataclass
class UserGuildRaidDtoInfo():
    BattleLogAtMaxDamageJson: str
    BossGuid: str
    ChallengeCount: int
    DropItemJson: str
    MaxDamage: int
    TotalDamage: int

# [MessagePackObject(True)]
@dataclass
class UserGuildRaidPreviousDtoInfo():
    BattleLogJson: str
    Damage: int
    DropItemCount: int
    GuildRaidBossType: GuildRaidBossType

# [MessagePackObject(True)]
@dataclass
class GuildRaidInfo():
    DropDiamondLotteryItemList: list[UserItem]
    GuildRaidBossInfo: GuildRaidBossInfo
    GuildRaidDtoInfo: GuildRaidDtoInfo
    GuildRaidUserRankingInfos: list[GuildRaidUserRankingInfo]
    IsOpen: bool
    IsExistWorldDamageReward: bool
    ObtainableEquipmentList: list[UserItem]
    UserGuildRaidDtoInfo: UserGuildRaidDtoInfo
    UserGuildRaidPreviousDtoInfo: UserGuildRaidPreviousDtoInfo

# [MessagePackObject(True)]
@dataclass
class WorldRewardInfo():
    GoalDamage: int
    IsReceived: bool

# [Description("システムチャット")]
class SystemChatMessageIdType(Enum):
    # [Description("AギルドがBギルドのXX拠点に開戦を宣言しました！")]
    Declare = 1
    # [Description("AギルドがBギルドのXX拠点を占領しました！")]
    Occupy = 2
    # [Description("AギルドがBギルドのXX拠点に奪還を宣言しました！")]
    Recapture = 3
    # [Description("Ａがパーティを進軍させＢギルドのＸＸ城に攻撃を開始しました！")]
    Campaign = 4
    # [Description("ＢギルドのＸＸ城に進軍させたパーティが全敗になった！加勢に向かいましょう！")]
    CompleteDefeat = 5
    # [Description("占領しているXX城がＡギルドのＢに攻撃されました！急いで防衛に向かいましょう！")]
    Defense = 6
    # [Description("今回AギルドによるXX拠点への攻撃の防衛に成功しました！")]
    Offense = 7
    # [Description("レジェンドリーグ第１位　[PlayerName]
    #     レジェンドリーグ第２位　[PlayerName]
    #     レジェンドリーグ第３位　[PlayerName]")]
    LegendLeague = 8
    # [Description("バトルリーグ第１位　[PlayerName]
    #     バトルリーグ第２位　[PlayerName]
    #     バトルリーグ第３位　[PlayerName]")]
    BattleLeague = 9
    # [Description("マスターが[PlayerName]のギルド参加を承認しました")]
    GuildJoinApproved = 10
    # [Description("新しく[PlayerName]がギルドに加入しました")]
    GuildJoinFree = 11
    # [Description("[PlayerName]がギルドを脱退しました")]
    GuildLeave = 12
    # [Description("マスターが[PlayerName]をギルドから追放しました")]
    GuildMemberRemove = 13
    # [Description("[BeforePlayerName]が[AfterPlayerName]にプレイヤー名を変更しました")]
    ChangePlayerName = 14

# [MessagePackObject(True)]
@dataclass
class GuildSystemChatOptionInfo():
    Type: SystemChatMessageIdType
    IsValid: bool

# [MessagePackObject(True)]
@dataclass
class GuildEditInfo():
    GuildAnnouncement: str
    GuildOverView: GuildOverView
    GuildSystemChatOptionInfos: list[GuildSystemChatOptionInfo]

# [MessagePackObject(True)]
@dataclass
class CastleRewardInfo():
    CastleId: int
    LotteryRewardList: list[UserItem]

# [MessagePackObject(True)]
@dataclass
class GuildGvgInfo():
    IsOpen: bool
    CurrentRanking: int
    TodayRanking: int
    RemainingDeclarationCount: int
    RewardLimitTime: int
    CanGetCastleRewardInfoList: list[CastleRewardInfo]
    GotCastleRewardInfoList: list[CastleRewardInfo]
    CastleCountLarge: int
    CastleCountMedium: int
    CastleCountSmall: int

# [MessagePackObject(True)]
@dataclass
class RecommendationGuildInfo():
    GuildInfo: GuildInfo
    IsApplying: bool

# [MessagePackObject(True)]
@dataclass
class SearchGuildResultInfo():
    GuildInfo: GuildInfo
    IsApplying: bool
    PlayerInfoList: list[PlayerInfo]

# [MessagePackObject(True)]
@dataclass
class GlobalGvgGuildInfo():
    AddedPointLastTime: int
    BattlePower: int
    BattlePowerRank: int
    CastleCountLarge: int
    CastleCountMedium: int
    CastleCountSmall: int
    GuildId: int
    GuildLv: int
    GuildName: str
    LeaderPlayerInfo: PlayerInfo
    MemberCount: int
    Point: int
    Rank: int
    WorldId: int

# [MessagePackObject(True)]
@dataclass
class GlobalGvgGroupInfo():
    GlobalGvgGroupType: GlobalGvgGroupType
    GlobalGvgGuildInfoList: list[GlobalGvgGuildInfo]
    MatchingNumber: int

# [MessagePackObject(True)]
@dataclass
class GachaBonusInfo():
    GachaBonusCount: int
    GachaBonusItem: UserItem
    LotteryProbability: int

# [MessagePackObject(True)]
@dataclass
class GachaButtonInfo():
    ConsumeUserItem: UserItem
    DisplayOrder: int
    GachaButtonId: int
    LotteryCount: int

# [MessagePackObject(True)]
@dataclass
class GachaCaseInfo():
    DisplayOrder: int
    ElementType: ElementType
    EndTime: int
    GachaBonusDrawCount: int
    GachaBonusInfoList: list[GachaBonusInfo]
    GachaButtonInfoList: list[GachaButtonInfo]
    GachaCaseId: int
    GachaCaseUiId: int
    GachaCategoryType: GachaCategoryType
    GachaGroupType: GachaGroupType
    GachaRelicType: GachaRelicType
    GachaSelectCharacterIdList: list[int]
    GachaSelectListType: GachaSelectListType
    MaxDrawGold: int
    RemainingDrawGold: int
    GachaDrawCount: int
    GachaCeilingCount: int
    GachaCaseFlags: Flags[GachaCaseFlags]

# [MessagePackObject(True)]
@dataclass
class GachaResultItem(IUserItem):
    CharacterRarityFlags: Flags[CharacterRarityFlags]
    GachaLotteryId: int
    GachaLotteryItemListId: int
    Guid: str
    IsCeilingItem: bool
    ItemCount: int
    ItemId: int
    ItemType: ItemType

# [MessagePackObject(True)]
@dataclass
class GachaDestinyLogInfo():
    Name: str
    UserItem: UserItem

# [MessagePackObject(True)]
@dataclass
class GachaElementInfo():
    EndTimeOpenBlue: int
    EndTimeOpenGreen: int
    EndTimeOpenRed: int
    EndTimeOpenYellow: int
    ServerOpenElementType: ElementType

# [MessagePackObject(True)]
@dataclass
class GachaItemRate(IUserCharacterItem):
    CharacterRarityFlags: Flags[CharacterRarityFlags]
    Item: UserItem
    AddItem: UserItem
    LotteryRate: float

# [MessagePackObject(True)]
@dataclass
class GachaBonusRate():
    GachaCount: int
    GachaItemRateList: list[GachaItemRate]
    Index: int

# [MessagePackObject(True)]
@dataclass
class GachaRarityRate():
    CharacterRarityFlags: Flags[CharacterRarityFlags]
    LotteryRate: float

# [Description("フレンド画面の取得データ")]
class FriendInfoType(Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("フレンド")]
    Friend = 1
    # [Description("承認待ち")]
    ApprovalPending = 2
    # [Description("申請中")]
    Applying = 3
    # [Description("ブロック")]
    Block = 4

# [MessagePackObject(True)]
@dataclass
class NewFriendInfo():
    FriendType: FriendInfoType
    PlayerId: int

@dataclass
class IAdditionalParameter():
    AdditionalParameterHealth: int
    AdditionalParameterIntelligence: int
    AdditionalParameterMuscle: int
    AdditionalParameterEnergy: int

# [MessagePackObject(True)]
@dataclass
class UserEquipment(IUserItem, IReadOnlyEquipment, IAdditionalParameter):
    CharacterGuid: str
    HasParameter: bool
    EquipmentId: int
    Guid: str
    ItemCount: int
    ItemId: int
    ItemType: ItemType
    AdditionalParameterHealth: int
    AdditionalParameterIntelligence: int
    AdditionalParameterMuscle: int
    AdditionalParameterEnergy: int
    SphereId1: int
    SphereId2: int
    SphereId3: int
    SphereId4: int
    SphereUnlockedCount: int
    LegendSacredTreasureExp: int
    LegendSacredTreasureLv: int
    MatchlessSacredTreasureExp: int
    MatchlessSacredTreasureLv: int
    ReinforcementLv: int

# [Description("武具変更情報")]
# [MessagePackObject(True)]
@dataclass
class EquipmentChangeInfo():
    EquipmentGuid: str
    EquipmentId: int
    EquipmentSlotType: EquipmentSlotType
    IsInherit: bool

@dataclass
class IDungeonBattleRequest():
    CurrentTermId: int

# [Description("時空の洞窟 味方情報")]
# [MessagePackObject(True)]
@dataclass
class DungeonBattleAllyInfo():
    # [Description("レアリティ")]
    CharacterRarityFlags: Flags[CharacterRarityFlags]
    # [Description("残りのHP（‰）")]
    CurrentHpPerMill: int
    # [Description("属性")]
    ElementType: ElementType
    # [Description("BattleCharacterReport.BattleCharacterGuid")]
    Guid: int
    # [Description("ユニットアイコンID")]
    UnitIconId: int
    # [Description("ユニットアイコンタイプ")]
    UnitIconType: UnitIconType

# [MessagePackObject(True)]
@dataclass
class UserDungeonBattleCharacterDtoInfo():
    CharacterId: int
    CurrentHpPerMill: int
    GuestId: int
    Guid: str

# [Description("時空の洞窟 マス状態")]
class DungeonBattleGridState(Enum):
    # [Description("すべて完了し、次のマスに進むことができる")]
    Done = 0
    # [Description("選択した")]
    Selected = 1
    # [Description("報酬が未受け取り")]
    Reward = 2

# [MessagePackObject(True)]
@dataclass
class UserDungeonBattleDtoInfo():
    CurrentBoughtShopCounts: list[int]
    CurrentGridGuid: str
    CurrentGridState: DungeonBattleGridState
    DoneGridGuids: list[str]
    DoneRewardClearLayers: list[int]
    GuestCharacterMap: dict[str, list[int]]
    IsLostLatestBattle: bool
    RelicIds: list[int]
    UseDungeonRecoveryItemCount: int

# [MessagePackObject(True)]
@dataclass
class UserDungeonBattleShopDtoInfo():
    GridGuid: str
    PlayerId: int
    TermId: int
    TradeShopItemList: list[TradeShopItem]

# [Description("時空の洞窟 敵情報")]
# [MessagePackObject(True)]
@dataclass
class DungeonBattleEnemyInfo():
    # [Description("戦闘力")]
    BattlePower: int
    # [Description("レアリティ")]
    CharacterRarityFlags: Flags[CharacterRarityFlags]
    # [Description("属性")]
    ElementType: ElementType
    # [Description("レベル")]
    Level: int
    # [Description("ユニットアイコンID")]
    UnitIconId: int
    # [Description("ユニットアイコンタイプ")]
    UnitIconType: UnitIconType

# [Description("時空の洞窟 難易度")]
class DungeonBattleDifficultyType(Enum):
    # [Description("通常")]
    Normal = 0
    # [Description("ハード")]
    Hard = 1

# [MessagePackObject(True)]
@dataclass
class DungeonBattleGrid():
    DungeonGridGuid: str
    DungeonGridId: int
    X: int
    Y: int

# [MessagePackObject(True)]
@dataclass
class DungeonBattleLayer():
    DungeonDifficultyType: DungeonBattleDifficultyType
    DungeonGrids: list[DungeonBattleGrid]
    LayerCount: int

# [MessagePackObject(True)]
@dataclass
class UserDungeonBattleGuestCharacterDtoInfo():
    BaseParameter: BaseParameter
    BattleParameter: BattleParameter
    BattlePower: int
    CharacterId: int
    GuestEquipmentDtoInfos: list[UserEquipmentDtoInfo]
    Guid: str
    Level: int
    PlayerId: int
    RarityFlags: Flags[CharacterRarityFlags]

# [MessagePackObject(True)]
@dataclass
class UserCharacter(IUserItem):
    CharacterId: int
    CharacterRarityFlags: Flags[CharacterRarityFlags]
    Guid: str
    ItemCount: int
    ItemId: int
    ItemType: ItemType

# [MessagePackObject(False)]
@dataclass
class PrivateChatLogPlayerInfo():
    # [Key(0)]
    ExistUnread: bool
    # [Key(1)]
    PlayerInfo: PlayerInfo
    # [Key(2)]
    LocalTimestamp: int

class ChatType(Enum):
    SvS = 0
    World = 1
    Guild = 2
    Private = 3
    Friend = 4

# [Description("システムチャット種別")]
class SystemChatType(Enum):
    None_ = 0
    # [Description("LocalGvg(ワールド)")]
    LocalGvgWorld = 1
    # [Description("LocalGvg(ギルド)")]
    LocalGvgGuild = 2
    # [Description("GlobalGvg(ワールド)")]
    GlobalGvgWorld = 3
    # [Description("GlobalGvg(ギルド)")]
    GlobalGvgGuild = 4
    # [Description("LegendLeague")]
    LegendLeague = 5
    # [Description("BattleLeague")]
    BattleLeague = 6
    # [Description("Guild")]
    Guild = 7
    # [Description("ChangePlayerName")]
    ChangePlayerName = 8

# [MessagePackObject(False)]
@dataclass
class ChatInfo():
    # [Key(0)]
    CharacterId: int
    # [Key(1)]
    ChatType: ChatType
    # [Key(8)]
    LegendLeagueClass: LegendLeagueClassType
    # [Key(2)]
    Message: str
    # [Key(3)]
    PlayerId: int
    # [Key(4)]
    PlayerName: str
    # [Key(10)]
    SystemChatMessageArgs: str
    # [Key(9)]
    SystemChatMessageIdType: SystemChatMessageIdType
    # [Key(5)]
    SystemChatMessageKey: str
    # [Key(6)]
    SystemChatType: SystemChatType
    # [Key(7)]
    LocalTimeStamp: int

# [MessagePackObject(True)]
@dataclass
class CharacterDetailInfo():
    UserEquipmentDtoInfos: list[UserEquipmentDtoInfo]
    BaseParameter: BaseParameter
    BattleParameter: BattleParameter
    BattlePower: int
    Level: int
    RarityFlags: Flags[CharacterRarityFlags]

# [MessagePackObject(True)]
@dataclass
class CharacterRankUpMaterialInfo():
    # [Description("ランクアップ対象キャラクター Guid")]
    TargetGuid: str
    # [Description("素材キャラクターGuid1")]
    MaterialGuid1: str
    # [Description("素材キャラクター Guid2")]
    MaterialGuid2: str

# [Description("メモリーログタイプ")]
class MemoryLogType(Enum):
    # [Description("初回報酬受取")]
    FirstReward = 1
    # [Description("無報酬")]
    NoReward = 2
    # [Description("ガチャからの閲覧")]
    Gacha = 3

# [MessagePackObject(True)]
@dataclass
class RankResetReceiveCharacter(IUserCharacterItem):
    RarityFlags: Flags[CharacterRarityFlags]
    Item: UserItem

# [Description("懸賞カウンター条件タイプ")]
class BountyQuestConditionType(Enum):
    # [Description("属性")]
    Element = 0
    # [Description("レアリティ")]
    Rarity = 1

# [MessagePackObject(True)]
@dataclass
class BountyQuestConditionInfo():
    # [Description("懸賞カウンター条件タイプ")]
    BountyQuestConditionType: BountyQuestConditionType
    # [Description("属性")]
    ElementType: ElementType
    # [Description("レアリティ")]
    Rarity: CharacterRarityFlags
    # [Description("必要な数")]
    RequireCount: int

# [MessagePackObject(True)]
@dataclass
class BountyQuestInfo():
    # [Description("懸賞カウンタークエストID")]
    BountyQuestId: int
    # [Description("懸賞カウンタークエスト名キー")]
    BountyQuestNameKey: str
    # [Description("懸賞カウンタータイプ")]
    BountyQuestType: BountyQuestType
    # [Description("懸賞カウンタークエストレアリティ")]
    BountyQuestRarity: BountyQuestRarityFlags
    # [Description("設定可能なキャラー数")]
    CharacterMaxCount: int
    # [Description("懸賞カウンター制限時間(ミリ秒)")]
    BountyQuestLimitTime: int
    # [Description("懸賞カウンタークリアタイム(ミリ秒)")]
    BountyQuestClearTime: int
    # [Description("懸賞カウンター条件リスト")]
    BountyQuestConditionInfos: list[BountyQuestConditionInfo]
    # [Description("懸賞カウンター報酬リスト")]
    RewardItems: list[UserItem]
    # [Description("高速完了初期必要ダイヤ")]
    InitialRequireCurrencyForQuick: int

# [MessagePackObject(True)]
@dataclass
class UserBountyQuestBoardDtoInfo():
    BountyQuestType: BountyQuestType
    BountyQuestRarity: BountyQuestRarityFlags
    ClearCount: int

# [MessagePackObject(True)]
@dataclass
class BountyQuestMemberInfo():
    # [Description("プレイヤーID")]
    PlayerId: int
    # [Description("キャラクターID")]
    CharacterId: int
    # [Description("ユーザーキャラクターGUID")]
    UserCharacterGuid: str
    # [Description("キャラクターレアリティ")]
    CharacterRarityFlags: Flags[CharacterRarityFlags]

# [MessagePackObject(True)]
@dataclass
class UserBountyQuestDtoInfo():
    Date: int
    BountyQuestId: int
    BountyQuestType: BountyQuestType
    BountyQuestLimitStartTime: int
    BountyQuestEndTime: int
    RewardEndTime: int
    IsReward: bool
    StartMembers: list[BountyQuestMemberInfo]

# [MessagePackObject(True)]
@dataclass
class UserBountyQuestMemberDtoInfo():
    UserCharacterGuid: str
    CharacterId: int
    RarityFlags: Flags[CharacterRarityFlags]
    DispatchPlayerId: int
    DispatchPlayerName: str
    DispatchEndTime: int
    PlayerId: int

# [Description("祈りの泉：プレイヤータイプ")]
class BountyQuestPlayerType(Enum):
    # [Description("自分")]
    Self = 0
    # [Description("フレンドとギルドメンバー")]
    FriendAndGuildMember = 1

# [MessagePackObject(True)]
@dataclass
class BountyQuestStartInfo():
    # [Description("懸賞カウンタークエストID")]
    BountyQuestId: int
    # [Description("懸賞カウンタークエスト派遣メンバー情報")]
    BountyQuestMemberInfos: list[BountyQuestMemberInfo]

# [Description("ボスバトルクリアパーティー情報")]
# [MessagePackObject(True)]
@dataclass
class ClearPartyInfo():
    # [Description("クリア当時のキャラクター情報")]
    ClearPartyCharacterInfos: list[ClearPartyCharacterInfo]
    # [Description("バトルタイプ")]
    BattleType: BattleType
    # [Description("クリア日")]
    ClearTimestamp: int
    # [Description("クリア当時デッキの総合戦闘力")]
    DeckBattlePower: int
    # [Description("プレイヤーアイコン枠情報")]
    LegendLeagueClass: LegendLeagueClassType
    # [Description("メインアイコンキャラクター")]
    MainCharacterIconId: int
    # [Description("クリアしたプレイヤーID")]
    PlayerId: int
    # [Description("ユーザー名")]
    PlayerName: str
    # [Description("クエストId(QuestMB)")]
    QuestId: int
    # [Description("クリア当時ランク")]
    Rank: int

# [MessagePackObject(True)]
@dataclass
class LegendLeagueRankingPlayerInfo():
    ConsecutiveVictoryCount: int
    CurrentPoint: int
    CurrentRank: int
    DefenseBattlePower: int
    PlayerInfo: PlayerInfo
    UserCharacterDtoInfoList: list[UserCharacterDtoInfo]

# [MessagePackObject(True)]
@dataclass
class LegendLeagueLogInfo():
    AttackBattlePower: int
    AttackCharacterBaseParameterMap: dict[str, BaseParameter]
    AttackCharacterBattleParameterMap: dict[str, BattleParameter]
    AttackCharacterDtoInfoList: list[UserCharacterDtoInfo]
    AttackEquipmentDtoInfoListMap: dict[str, list[UserEquipmentDtoInfo]]
    BattleEndInfo: BattleEndInfo
    BattleTime: int
    BattleToken: str
    DefenseBattlePower: int
    DefenseCharacterBaseParameterMap: dict[str, BaseParameter]
    DefenseCharacterBattleParameterMap: dict[str, BattleParameter]
    DefenseCharacterDtoInfoList: list[UserCharacterDtoInfo]
    DefenseEquipmentDtoInfoListMap: dict[str, list[UserEquipmentDtoInfo]]
    GetPoint: int
    RivalPlayerInfo: PlayerInfo
    TargetConsecutiveVictoryCount: int
    TargetPoint: int

# [MessagePackObject(True)]
@dataclass
class PvpBattleLogInfo():
    AttackBattlePower: int
    AttackCharacterBaseParameterMap: dict[str, BaseParameter]
    AttackCharacterBattleParameterMap: dict[str, BattleParameter]
    AttackCharacterInfoList: list[UserCharacterInfo]
    AttackEquipmentDtoInfoListMap: dict[str, list[UserEquipmentDtoInfo]]
    BattleEndInfo: BattleEndInfo
    BattleTime: int
    BattleToken: str
    DefenseBattlePower: int
    DefenseCharacterBaseParameterMap: dict[str, BaseParameter]
    DefenseCharacterBattleParameterMap: dict[str, BattleParameter]
    DefenseCharacterInfoList: list[UserCharacterInfo]
    DefenseEquipmentDtoInfoListMap: dict[str, list[UserEquipmentDtoInfo]]
    NewRank: int
    OldRank: int
    RivalPlayerInfo: PlayerInfo

# [MessagePackObject(True)]
@dataclass
class PvpRankingPlayerInfo():
    CurrentRank: int
    DefenseBattlePower: int
    PlayerInfo: PlayerInfo
    UserCharacterInfoList: list[UserCharacterInfo]

# [Description("高速周回実行タイプ")]
class QuestQuickExecuteType(Enum):
    # [Description("仮想通貨で実行")]
    Currency = 0
    # [Description("特典で実行")]
    Privilege = 1

# [MessagePackObject(True)]
@dataclass
class AutoBattleRewardResult():
    BattleCountAll: int
    BattleCountWin: int
    BattleRewardResult: BattleRewardResult
    BattleTotalTime: int
    GoldByPopulation: int
    PotentialJewelByPopulation: int

# [MessagePackObject(True)]
@dataclass
class AccountMessageInfo():
    Message: str
    PlayerId: int
    Title: str

# [MessagePackObject(True)]
@dataclass
class WarningMessageInfo():
    ConfirmDateTime: DateTime
    DisplayOrder: int
    MessageInfo: AccountMessageInfo
    WarningId: int
    WorldId: int

# [MessagePackObject(True)]
@dataclass
class PlayerDataInfo():
    CharacterId: int
    LastLoginTime: int
    LegendLeagueClass: LegendLeagueClassType
    Name: str
    Password: str
    PlayerId: int
    PlayerRank: int
    WorldId: int

class AppAssetVersionEnvType(Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("sbx環境")]
    Sbx = 1
    # [Description("stg環境")]
    Stg = 2
    # [Description("prd環境")]
    Prd = 3

# [Description("アプリアセットバージョン情報")]
# [MessagePackObject(True)]
@dataclass
class AppAssetVersionInfo():
    # [Description("環境種別")]
    EnvType: AppAssetVersionEnvType
    # [Description("無条件ダウンロードをスキップするか")]
    IsSkipAssetDownload: bool
    # [Description("アプリバージョン")]
    Version: str

# [Description("ワールド情報")]
# [MessagePackObject(True)]
@dataclass
class WorldInfo():
    # [Description("ゲームサーバー")]
    GameServerId: int
    # [Description("ワールドId")]
    Id: int
    # [Description("ワールド設立日")]
    StartTime: DateTime

# [Description("メインテナンス突破ユーザー情報")]
# [MessagePackObject(True)]
@dataclass
class MaintenanceDebugUserInfo():
    # [Description("ユーザーID")]
    UserId: int
    # [Description("プレイヤーID")]
    PlayerId: int
    # [Description("デバックユーザー状態")]
    IsDebugUser: bool

# [Description("ターゲットサーバータイプ")]
class MaintenanceServerType(Enum):
    # [Description("全て")]
    All = 0
    # [Description("認証サーバー")]
    AuthServer = 1
    # [Description("ゲームサーバー")]
    GameServer = 2

# [Description("ターゲット領域タイプ")]
class MaintenanceAreaType(Enum):
    # [Description("全て")]
    All = 0
    # [Description("ゲームサーバー単位")]
    GameServer = 1
    # [Description("ワールド単位")]
    World = 2

# [Description("メンテナンス情報")]
# [MessagePackObject(True)]
@dataclass
class MaintenanceInfo():
    # [Description("対象サーバー種別")]
    MaintenanceServerType: MaintenanceServerType
    # [Description("開始日時")]
    StartTimeFixJST: DateTime
    # [Description("終了日時")]
    EndTimeFixJST: DateTime
    # [Description("プラットフォームリスト")]
    MaintenancePlatformTypes: list[int]
    # [Description("領域タイプ")]
    MaintenanceAreaType: MaintenanceAreaType
    # [Description("領域Idタイプ")]
    AreaIds: list[int]
    # [Description("メンテナンス対象機能種別リスト")]
    MaintenanceFunctionTypes: list[int]

# [Description("新規ユーザー管理種別")]
class ManagementNewUserType(Enum):
    # [Description("タイムサーバー単位")]
    TimeServer = 0
    # [Description("ワールド単位")]
    World = 1

# [Description("新規ユーザー管理情報")]
# [MessagePackObject(True)]
@dataclass
class ManagementNewUserInfo():
    # [Description("終了日時")]
    EndTimeFixJST: DateTime
    # [Description("新規ユーザーの作成禁止するか")]
    IsUnableToCreateUser: bool
    # [Description("新規ユーザー管理種別")]
    ManagementNewUserType: ManagementNewUserType
    # [Description("開始日時")]
    StartTimeFixJST: DateTime
    # [Description("ターゲットIdリスト")]
    TargetIds: list[int]

# [MessagePackObject(True)]
@dataclass
class TitleInfo():
    BgmNumberJP: int
    BgmNumberUS: int
    MovieNumber: int
    X: float
    Y: float
    Scale: float

# [Description("リモート通知種別")]
class RemoteNotificationType(Enum):
    None_ = 0
    # [Description("ギルドチャット")]
    GuildChat = 1
    # [Description("個人チャット")]
    PersonalChat = 2
    # [Description("ギルドレイドボスの開放")]
    GuildRaidBoss = 3
    # [Description("イベント")]
    Event = 4
    # [Description("不具合補填")]
    Compensation = 5
    # [Description("リテンション")]
    Retention = 6

# [Description("ユーザー設定タイプ")]
class UserSettingsType(Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("テキスト言語")]
    TextLanguage = 1
    # [Description("ボイス言語")]
    VoiceLanguage = 2
    # [Description("オプトイン/アウト")]
    PrivacySettings = 3

