# AUTOGENERATED FILE. DO NOT EDIT.
# mypy: disable-error-code="call-arg"
from __future__ import annotations

from dataclasses import dataclass as _dataclass, field as _field
from datetime import datetime as _datetime, timedelta as _timedelta
from typing import Protocol as _Protocol

from .array_packed import ArrayPacked as _ArrayPacked
from .enums import Enum as _Enum
from .flags import Flags as _Flags

@_dataclass(slots=True)
class MasterBookBase():
    Id: int = 0
    IsIgnore: bool | None = None
    Memo: str = ""

# [Description("ランキング種別")]
class RankingDataType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("プレイヤー戦闘力")]
    PlayerBattlePower = 1
    # [Description("プレイヤーランク")]
    PlayerRank = 2
    # [Description("プレイヤーメインクエスト")]
    PlayerMainQuest = 3
    # [Description("プレイヤー無窮の塔")]
    PlayerTower = 4
    # [Description("属性の塔 蒼")]
    TowerBlue = 5
    # [Description("属性の塔 紅")]
    TowerRed = 6
    # [Description("属性の塔 翠")]
    TowerGreen = 7
    # [Description("属性の塔 黄")]
    TowerYellow = 8

# [Description("アイテムの種類")]
class ItemType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("無償仮想通貨")]
    CurrencyFree = 1
    # [Description("有償仮想通貨")]
    CurrencyPaid = 2
    # [Description("ゲーム内通貨")]
    Gold = 3
    # [Description("武具")]
    Equipment = 4
    # [Description("武具の欠片")]
    EquipmentFragment = 5
    # [Description("キャラクター")]
    Character = 6
    # [Description("キャラクターの絆")]
    CharacterFragment = 7
    # [Description("洞窟の加護")]
    DungeonBattleRelic = 8
    # [Description("アダマンタイト")]
    EquipmentSetMaterial = 9
    # [Description("n時間分アイテム")]
    QuestQuickTicket = 10
    # [Description("キャラ育成素材")]
    CharacterTrainingMaterial = 11
    # [Description("武具強化アイテム")]
    EquipmentReinforcementItem = 12
    # [Description("交換所アイテム")]
    ExchangePlaceItem = 13
    # [Description("スフィア")]
    Sphere = 14
    # [Description("魔装強化アイテム")]
    MatchlessSacredTreasureExpItem = 15
    # [Description("ガチャチケット")]
    GachaTicket = 16
    # [Description("宝箱、未鑑定スフィアなど")]
    TreasureChest = 17
    # [Description("宝箱の鍵")]
    TreasureChestKey = 18
    # [Description("ボスチケット")]
    BossChallengeTicket = 19
    # [Description("無窮の塔チケット")]
    TowerBattleTicket = 20
    # [Description("回復の果実")]
    DungeonRecoveryItem = 21
    # [Description("プレイヤー経験値")]
    PlayerExp = 22
    # [Description("フレンドポイント")]
    FriendPoint = 23
    # [Description("生命樹の雫")]
    EquipmentRarityCrystal = 24
    # [Description("レベルリンク経験値")]
    LevelLinkExp = 25
    # [Description("ギルドストック")]
    GuildFame = 26
    # [Description("ギルド経験値")]
    GuildExp = 27
    # [Description("貢献メダル")]
    ActivityMedal = 28
    # [Description("VIP経験値")]
    VipExp = 29
    # [Description("パネル図鑑解放判定アイテム")]
    PanelGetJudgmentItem = 30
    # [Description("パネルミッション マス解放アイテム")]
    UnlockPanelGridItem = 31
    # [Description("パネル図鑑解放アイテム")]
    PanelUnlockItem = 32
    # [Description("楽曲チケット")]
    MusicTicket = 33
    # [Description("特別プレイヤーアイコン")]
    SpecialIcon = 34
    # [Description("アイコンの断片")]
    IconFragment = 35
    # [Description("タイプ強化アイテム")]
    GuildTowerJobReinforcementMaterial = 36
    # [Description("リアル景品(グッズ)")]
    RealPrizeGoods = 37
    # [Description("リアル景品(デジタル)")]
    RealPrizeDigital = 38
    # [Description("人気投票(ItemId => PopularityVoteMBのId)")]
    PopularityVote = 39
    # [Description("ラッキーチャンスガチャチケット")]
    LuckyChanceGachaTicket = 40
    # [Description("チャットふきだし")]
    ChatBalloon = 41
    # [Description("アダマントボックス")]
    EquipmentSetMaterialBox = 42
    # [Description("書庫整理マス解放アイテム")]
    BookSortGridCellUnlockItem = 43
    # [Description("書庫整理交換所アイテム")]
    BookSortEventExchangePlaceItem = 44
    # [Description("イベント交換所アイテム")]
    EventExchangePlaceItem = 50
    # [Description("Stripeクーポン")]
    StripeCoupon = 1001

# [Description("全てのアイテムが実装するインターフェース")]
# [Union(0, typeof)]
_ItemType = ItemType
class IUserItem(_Protocol):
    # [Description("アイテムの種類")]
    # [PropertyOrder(1)]
    ItemType: _ItemType
    # [Description("アイテムのID")]
    # [PropertyOrder(2)]
    ItemId: int
    # [Description("アイテムの数")]
    # [PropertyOrder(3)]
    ItemCount: int

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserItem():
    ItemCount: int = 0
    ItemId: int = 0
    ItemType: _ItemType = _field(default_factory=lambda: _ItemType())

# [Description("武具のレアリティ")]
# [Flags]
class EquipmentRarityFlags(_Enum):
    # [Description("None")]
    None_ = 0
    # [Description("D")]
    D = 1
    # [Description("C")]
    C = 2
    # [Description("B")]
    B = 4
    # [Description("A")]
    A = 8
    # [Description("S")]
    S = 16
    # [Description("R")]
    R = 32
    # [Description("SR")]
    SR = 64
    # [Description("SSR")]
    SSR = 128
    # [Description("UR")]
    UR = 256
    # [Description("LR")]
    LR = 512

# [MessagePackObject(True)]
_EquipmentRarityFlags = EquipmentRarityFlags
@_dataclass(slots=True)
class ActiveSkillInfo():
    # [Description("加護ID")]
    BlessingItemId: int = 0
    # [Description("キャラクターレベル制限")]
    CharacterLevel: int = 0
    # [Description("スキル説明文キー")]
    DescriptionKey: str = ""
    # [Description("専属武具レアリティ")]
    EquipmentRarityFlags: _Flags[_EquipmentRarityFlags] = _field(default_factory=lambda: _Flags["_EquipmentRarityFlags"]([]))
    # [Description("優先順位")]
    OrderNumber: int = 0
    # [Description("サブセットIDリスト")]
    SubSetSkillIds: list[int] = _field(default_factory=list["int"])

# [Description("端末&プラットフォーム種別")]
class DeviceType(_Enum):
    # [Description("iOS")]
    iOS = 1
    # [Description("Android")]
    Android = 2
    # [Description("Unity")]
    UnityEditor = 3
    # [Description("Windows")]
    Win64 = 4
    # [Description("DmmGames")]
    DmmGames = 5
    # [Description("Steam")]
    Steam = 6
    # [Description("Apk")]
    Apk = 7

# [Description("基礎パラメータ")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class BaseParameter():
    # [Description("技力​")]
    Energy: int = 0
    # [Description("耐久力​")]
    Health: int = 0
    # [Description("魔力")]
    Intelligence: int = 0
    # [Description("筋力")]
    Muscle: int = 0

# [Description("バトルパラメータ")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class BattleParameter():
    # [Description("攻撃力")]
    AttackPower: int = 0
    # [Description("回避")]
    Avoidance: int = 0
    # [Description("クリティカル")]
    Critical: int = 0
    # [Description("クリダメ強化")]
    CriticalDamageEnhance: int = 0
    # [Description("クリティカル耐性")]
    CriticalResist: int = 0
    # [Description("ダメージ強化")]
    DamageEnhance: int = 0
    # [Description("カウンタ​")]
    DamageReflect: int = 0
    # [Description("弱体効果命中​")]
    DebuffHit: int = 0
    # [Description("弱体効果耐性")]
    DebuffResist: int = 0
    # [Description("防御力")]
    Defense: int = 0
    # [Description("防御貫通力")]
    DefensePenetration: int = 0
    # [Description("HP")]
    HP: int = 0
    # [Description("命中")]
    Hit: int = 0
    # [Description("HP吸収")]
    HpDrain: int = 0
    # [Description("魔法クリダメ緩和")]
    MagicCriticalDamageRelax: int = 0
    # [Description("魔法ダメージ緩和")]
    MagicDamageRelax: int = 0
    # [Description("物理クリダメ緩和")]
    PhysicalCriticalDamageRelax: int = 0
    # [Description("物理ダメージ緩和")]
    PhysicalDamageRelax: int = 0
    # [Description("スピード​")]
    Speed: int = 0

# [Description("キャラクターのレアリティ")]
# [Flags]
class CharacterRarityFlags(_Enum):
    # [Description("None")]
    None_ = 0
    # [Description("N")]
    N = 1
    # [Description("R")]
    R = 2
    # [Description("R+")]
    RPlus = 4
    # [Description("SR")]
    SR = 8
    # [Description("SR+")]
    SRPlus = 16
    # [Description("SSR")]
    SSR = 32
    # [Description("SSR+")]
    SSRPlus = 64
    # [Description("UR")]
    UR = 128
    # [Description("UR+")]
    URPlus = 256
    # [Description("LR")]
    LR = 512
    # [Description("LR+")]
    LRPlus = 1024
    # [Description("LR+2")]
    LRPlus2 = 2048
    # [Description("LR+3")]
    LRPlus3 = 4096
    # [Description("LR+4")]
    LRPlus4 = 8192
    # [Description("LR+5")]
    LRPlus5 = 16384
    # [Description("LR+6")]
    LRPlus6 = 32768
    # [Description("LR+7")]
    LRPlus7 = 65536
    # [Description("LR+8")]
    LRPlus8 = 131072
    # [Description("LR+9")]
    LRPlus9 = 262144
    # [Description("LR+10")]
    LRPlus10 = 524288

class ElementType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("藍")]
    Blue = 1
    # [Description("紅")]
    Red = 2
    # [Description("翠")]
    Green = 3
    # [Description("黄")]
    Yellow = 4
    # [Description("天")]
    Light = 5
    # [Description("冥")]
    Dark = 6

# [Description("職業")]
# [Flags]
class JobFlags(_Enum):
    # [Description("None")]
    None_ = 0
    # [Description("ウォリアー")]
    Warrior = 1
    # [Description("スナイパー")]
    Sniper = 2
    # [Description("ソーサラー")]
    Sorcerer = 4

class UnitIconType(_Enum):
    # [Description("キャラクター")]
    Character = 0
    # [Description("敵キャラクター")]
    EnemyCharacter = 1
    # [Description("魔女クリファ")]
    WitchQlipha = 2

_BaseParameter = BaseParameter
_BattleParameter = BattleParameter
_CharacterRarityFlags = CharacterRarityFlags
_ElementType = ElementType
_JobFlags = JobFlags
_UnitIconType = UnitIconType
class IBattleEnemy(_Protocol):
    ActiveSkillIds: list[int]
    BaseParameter: _BaseParameter
    BattleEnemyCharacterId: int
    BattleParameter: _BattleParameter
    BattlePower: int
    CharacterRarityFlags: _Flags[_CharacterRarityFlags]
    ElementType: _ElementType
    EnemyAdjustId: int
    EnemyEquipmentId: int
    EnemyRank: int
    ExclusiveEquipmentRarityFlags: _Flags[EquipmentRarityFlags]
    JobFlags: _Flags[_JobFlags]
    NameKey: str
    NormalSkillId: int
    PassiveSkillIds: list[int]
    UnitIconId: int
    UnitIconType: _UnitIconType

# [Description("バトルタイプ")]
class BattleScheduleType(_Enum):
    # [Description("バトルタイプなし")]
    None_ = 0
    # [Description("クエスト(ボス、オートバトル)")]
    Quest = 1
    # [Description("無窮の塔")]
    TowerInfinite = 2
    # [Description("愁（しゅう）")]
    TowerBlue = 3
    # [Description("業（ごう）")]
    TowerRed = 4
    # [Description("心（しん）")]
    TowerGreen = 5
    # [Description("渇（かつ）")]
    TowerYellow = 6

class CharacterColorType(_Enum):
    None_ = 0
    BluePurple = 1
    BlueGreen = 2
    RedPeach = 3
    BrightYellow = 4
    Gray = 5

# [Description("懸賞カウンタータイプ")]
class BountyQuestType(_Enum):
    # [Description("ソロ")]
    Solo = 0
    # [Description("チーム")]
    Team = 1
    # [Description("ゲリラ")]
    Guerrilla = 2

# [Description("祈りの泉クエストレアリティ")]
# [Flags]
class BountyQuestRarityFlags(_Enum):
    # [Description("None")]
    None_ = 0
    # [Description("N*")]
    NInit = 1
    # [Description("N")]
    N = 2
    # [Description("R")]
    R = 4
    # [Description("SR")]
    SR = 8
    # [Description("SSR")]
    SSR = 16
    # [Description("UR")]
    UR = 32
    # [Description("LR")]
    LR = 64

# [MessagePackObject(True)]
_BountyQuestType = BountyQuestType
@_dataclass(slots=True)
class BoardRankConditionInfo():
    # [Description("クエストレベル")]
    BountyQuestRarity: BountyQuestRarityFlags = _field(default_factory=lambda: BountyQuestRarityFlags())
    # [Description("懸賞カウンタークエストタイプ")]
    BountyQuestType: _BountyQuestType = _field(default_factory=lambda: _BountyQuestType())
    # [Description("必要な数")]
    RequireCount: int = 0
    # [Description("累計必要クリア数")]
    TotalRequireCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BookSortBonusFloorSelectItems():
    EndMaxClearQuestId: int = 0
    # [Nest(True, 1)]
    ItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    StartMaxClearQuestId: int = 0

class StartEndTimeZoneType(_Enum):
    LocalStartLocalEnd = 0
    LocalStartJstEnd = 1
    JstStartLocalEnd = 10
    JstStartJstEnd = 11

_StartEndTimeZoneType = StartEndTimeZoneType
class IHasStartEndTimeZone(_Protocol):
    # [DateTimeString]
    EndTime: str
    StartEndTimeZoneType: _StartEndTimeZoneType
    # [DateTimeString]
    StartTime: str

# [Description("マイページアイコン表示場所タイプ")]
class MypageIconDisplayLocationType(_Enum):
    # [Description("マイページのみ")]
    MypageOnly = 0
    # [Description("イベントポータルのみ")]
    EventPortalOnly = 1
    # [Description("マイページとイベントポータル")]
    MypageAndEventPortal = 2

class IHasStartEndTime(_Protocol):
    # [DateTimeString]
    EndTime: str
    # [DateTimeString]
    StartTime: str

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BountyQuestEventTargetItemInfo():
    ItemId: int = 0
    ItemType: _ItemType = _field(default_factory=lambda: _ItemType())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BountyQuestEventTargetQuestTypeInfo():
    BountyQuestType: _BountyQuestType = _field(default_factory=lambda: _BountyQuestType())

# [Description("アイテム変換タイプ")]
class ChangeItemType(_Enum):
    # [Description("販売")]
    Sell = 0
    # [Description("ゴールド交換")]
    GoldExchange = 1

# [Description("基礎パラメータの種類")]
class BaseParameterType(_Enum):
    # [Description("筋力")]
    Muscle = 1
    # [Description("技力")]
    Energy = 2
    # [Description("魔力")]
    Intelligence = 3
    # [Description("耐久力")]
    Health = 4

# [Description("パラメーター増減タイプ")]
class ChangeParameterType(_Enum):
    # [Description("加算(+X)")]
    Addition = 1
    # [Description("乗算(+X%)")]
    AdditionPercent = 2
    # [Description("キャラLv×係数")]
    CharacterLevelConstantMultiplicationAddition = 3

# [Description("基礎パラメータ変動情報")]
# [MessagePackObject(True)]
_BaseParameterType = BaseParameterType
_ChangeParameterType = ChangeParameterType
@_dataclass(slots=True)
class BaseParameterChangeInfo():
    # [Description("変動する基礎パラメータ")]
    # [PropertyOrder(1)]
    BaseParameterType: _BaseParameterType = _field(default_factory=lambda: _BaseParameterType())
    # [Description("パラメータ増減タイプ")]
    # [PropertyOrder(2)]
    ChangeParameterType: _ChangeParameterType = _field(default_factory=lambda: _ChangeParameterType())
    # [Description("値")]
    # [PropertyOrder(3)]
    Value: float = 0.0

# [Description("バトルパラメータの種類")]
class BattleParameterType(_Enum):
    # [Description("HP")]
    Hp = 1
    # [Description("攻撃力")]
    AttackPower = 2
    # [Description("物理ダメージ緩和")]
    PhysicalDamageRelax = 3
    # [Description("魔法ダメージ緩和")]
    MagicDamageRelax = 4
    # [Description("命中")]
    Hit = 5
    # [Description("回避")]
    Avoidance = 6
    # [Description("クリティカル")]
    Critical = 7
    # [Description("クリティカル耐性")]
    CriticalResist = 8
    # [Description("クリダメ強化")]
    CriticalDamageEnhance = 9
    # [Description("物理クリダメ緩和")]
    PhysicalCriticalDamageRelax = 10
    # [Description("魔法クリダメ緩和")]
    MagicCriticalDamageRelax = 11
    # [Description("防御貫通力")]
    DefensePenetration = 12
    # [Description("防御力")]
    Defense = 13
    # [Description("物魔防御貫通")]
    DamageEnhance = 14
    # [Description("弱体効果命中")]
    DebuffHit = 15
    # [Description("弱体効果耐性")]
    DebuffResist = 16
    # [Description("リフレクト")]
    DamageReflect = 17
    # [Description("HP吸収")]
    HpDrain = 18
    # [Description("スピード")]
    Speed = 19

# [Description("バトルパラメータ変動情報")]
# [MessagePackObject(True)]
_BattleParameterType = BattleParameterType
@_dataclass(slots=True)
class BattleParameterChangeInfo():
    # [Description("変動するバトルパラメータ")]
    # [PropertyOrder(1)]
    BattleParameterType: _BattleParameterType = _field(default_factory=lambda: _BattleParameterType())
    # [Description("パラメータ増減タイプ")]
    # [PropertyOrder(2)]
    ChangeParameterType: _ChangeParameterType = _field(default_factory=lambda: _ChangeParameterType())
    # [Description("値")]
    # [PropertyOrder(3)]
    Value: float = 0.0

class IHasJstStartEndTime(_Protocol):
    # [DateTimeString]
    EndTimeFixJST: str
    # [DateTimeString]
    StartTimeFixJST: str

# [Description("キャラクターボイスの分類")]
class CharacterVoiceCategory(_Enum):
    # [Description("通常セリフ")]
    Basic = 0
    # [Description("誕生日セリフ")]
    Birthday = 1
    # [Description("カムバックセリフ")]
    ComeBack = 2
    # [Description("ログインセリフ")]
    Login = 3
    # [Description("ランクアップセリフ")]
    RankUp = 4
    # [Description("その他")]
    Other = 5
    # [Description("登場")]
    Appear = 6
    # [Description("決め台詞")]
    SignaturePhrase = 7
    # [Description("バトル勝利")]
    BattleWin = 8
    # [Description("バトル敗北")]
    BattleLose = 9
    # [Description("朗読")]
    Monologue = 10

class TimelineType(_Enum):
    MyPage = 0
    Battle = 1
    Skill = 2
    SkillQlipha = 3
    Memory = 4
    MyPageQlipha = 5
    Monologue = 6

# [MessagePackObject(True)]
_TimelineType = TimelineType
@_dataclass(slots=True)
class CharacterVoicePath():
    # [Description("TimelineType")]
    # [PropertyOrder(1)]
    TimelineType: _TimelineType = _field(default_factory=lambda: _TimelineType())
    # [Description("TimelineId")]
    # [PropertyOrder(2)]
    TimelineId: int = 0
    # [Description("VoiceId")]
    # [PropertyOrder(3)]
    VoiceId: int = 0

# [Description("視聴可能ボイスの解放条件")]
class UnlockCharacterDetailVoiceType(_Enum):
    # [Description("条件無し")]
    None_ = 0
    # [Description("ランクアップボイス1")]
    RankUp1 = 1
    # [Description("ランクアップボイス2")]
    RankUp2 = 2
    # [Description("ランクアップボイス3")]
    RankUp3 = 3
    # [Description("ランクアップボイス4")]
    RankUp4 = 4
    # [Description("ランクアップボイス5")]
    RankUp5 = 5
    # [Description("ランクアップボイス6")]
    RankUp6 = 6
    # [Description("誕生日")]
    Birthday = 7
    # [Description("メモリー全視聴")]
    MemoryComplete = 8
    # [Description("クエストクリア")]
    QuestClear = 9

class CharacterType(_Enum):
    Normal = 0
    Qlipha = 1
    ColorChange = 2

# [Description("アイテムのレアリティ")]
# [Flags]
class ItemRarityFlags(_Enum):
    # [Description("None")]
    None_ = 0
    # [Description("D")]
    D = 1
    # [Description("C")]
    C = 2
    # [Description("B")]
    B = 4
    # [Description("A")]
    A = 8
    # [Description("S")]
    S = 16
    # [Description("R")]
    R = 32
    # [Description("SR")]
    SR = 64
    # [Description("SSR")]
    SSR = 128
    # [Description("UR")]
    UR = 256
    # [Description("LR")]
    LR = 512

# [MessagePackObject(True)]
@_dataclass(slots=True)
class CharacterRarityCoefficientInfo():
    b: int = 0
    m: float = 0.0

# [Description("キャラクターの血液型")]
class CharacterBloodType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("A型")]
    A = 1
    # [Description("B型")]
    B = 2
    # [Description("O型")]
    O = 3
    # [Description("AB型")]
    AB = 4

# [Description("各言語に翻訳されたテキスト")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class TranslatedText():
    # [Description("日本語")]
    # [PropertyOrder(1)]
    jaJP: str = ""
    # [Description("インドネシア語")]
    # [PropertyOrder(10)]
    idID: str = ""
    # [Description("ベトナム語")]
    # [PropertyOrder(11)]
    viVN: str = ""
    # [Description("ロシア語")]
    # [PropertyOrder(12)]
    ruRU: str = ""
    # [Description("ドイツ語")]
    # [PropertyOrder(13)]
    deDE: str = ""
    # [Description("英語")]
    # [PropertyOrder(2)]
    enUS: str = ""
    # [Description("韓国語")]
    # [PropertyOrder(3)]
    koKR: str = ""
    # [Description("中国語(繁体字)")]
    # [PropertyOrder(4)]
    zhTW: str = ""
    # [Description("中国語(簡体字)")]
    # [PropertyOrder(5)]
    zhCN: str = ""
    # [Description("フランス語")]
    # [PropertyOrder(6)]
    frFR: str = ""
    # [Description("スペイン語")]
    # [PropertyOrder(7)]
    esMX: str = ""
    # [Description("ポルトガル語")]
    # [PropertyOrder(8)]
    ptBR: str = ""
    # [Description("タイ語")]
    # [PropertyOrder(9)]
    thTH: str = ""

# [Description("ランクアップ·タイプ")]
class ElementClassificationType(_Enum):
    # [Description("None")]
    None_ = 0
    # [Description("基本属性")]
    DefaultElement = 1
    # [Description("特殊属性")]
    SpecialElement = 2

# [Description("ランクアップ·タイプ")]
class RankUpType(_Enum):
    # [Description("None")]
    None_ = 0
    # [Description("同一属性")]
    ElementType = 1
    # [Description("同じキャラクターID")]
    SameName = 2

# [Description("地域タイプ")]
class CountryCodeType(_Enum):
    # [Description("日本")]
    Japan = 0
    # [Description("アメリカ(英語圏)")]
    America = 1
    # [Description("韓国")]
    Korea = 2
    # [Description("台湾")]
    Taiwan = 3
    # [Description("フランス")]
    France = 4
    # [Description("中国")]
    China = 5
    # [Description("メキシコ")]
    Mexico = 6
    # [Description("ブラジル")]
    Brazil = 7
    # [Description("タイ")]
    Thailand = 8
    # [Description("インドネシア")]
    Indonesia = 9
    # [Description("ベトナム")]
    Vietnam = 10
    # [Description("ロシア")]
    Russia = 11
    # [Description("ドイツ")]
    Germany = 12
    # [Description("エジプト")]
    Egypt = 13

# [Description("ミッション達成条件タイプ")]
class MissionAchievementType(_Enum):
    # [Description("無し")]
    None_ = 0
    # [Description("日付をまたいでログインした時")]
    Login = 100
    # [Description("ダイヤによる購入")]
    BoughtByCurrency = 200
    # [Description("フレンドコード使用")]
    UseFriendCode = 300
    # [Description("新キャラミッション")]
    NewCharacter = 1000
    # [Description("カムバックミッション中に貢献メダルを獲得した時")]
    MissionTotalActivityAtComeback = 1010100
    # [Description("新キャラミッション中に貢献メダルを獲得した時")]
    MissionTotalActivityAtNewCharacterMission = 1010200
    # [Description("期間限定ミッション中に貢献メダルを獲得した時")]
    MissionTotalActivityAtEvent = 1010300
    # [Description("パネルミッション中に貢献メダルを獲得した時")]
    MissionTotalActivityAtPanelMission = 1010400
    # [Description("コラボミッション中に貢献メダルを獲得した時")]
    MissionTotalActivityAtCollabMission = 1010500
    # [Description("マイページで自己紹介文を変更した時")]
    PlayerInfoEditComment = 2010100
    # [Description("フレンドになった最大の人数")]
    FriendMaxFriendCount = 3010100
    # [Description("フレンドポイントを送信した時")]
    FriendSendFriendPointCount = 3010200
    # [Description("アカウント連携を行った時")]
    SocialAuthAccount = 4010100
    # [Description("公式Twitterフォロー")]
    SocialFollowOfficialTwitter = 4020100
    # [Description("公式Youtubeフォロー")]
    SocialFollowOfficialYoutube = 4020200
    # [Description("Url1遷移")]
    Url1Transition = 4020300
    # [Description("Url2遷移")]
    Url2Transition = 4020400
    # [Description("ショップ（聖装鋼タブ）購入回数")]
    ExchangeLegendForgeMergeCount = 5010100
    # [Description("ショップ（精錬鋼タブ）購入回数")]
    ExchangeEquipmentForgeMergeCount = 5020200
    # [Description("ショップ（全てのタブ）購入回数")]
    ExchangeAllBuyCount = 5030100
    # [Description("ショップ（レギュラータブ）購入回数")]
    ExchangeRegularBuyCount = 5030200
    # [Description("ショップ（ギルドタブ）購入回数")]
    ExchangeGvGBuyCount = 5040100
    # [Description("ショップ（時空の洞窟タブ）購入回数")]
    ExchangeDungeonBattleBuyCount = 5050100
    # [Description("ロイヤルショップのダイヤ購入でダイヤを購入した時")]
    ShopTotalBuyCurrency = 6010100
    # [Description("キャラレベルアップ")]
    CharacterLevelUpCount = 7010100
    # [Description("レベルリンク達成レベル")]
    CharacterLevelLinkMaxLevel = 7010200
    # [Description("武具達成レベル")]
    CharacterEquipmentMaxLevel = 7010300
    # [Description("Lv1スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel1 = 7010401
    # [Description("Lv2スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel2 = 7010402
    # [Description("Lv3スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel3 = 7010403
    # [Description("Lv4スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel4 = 7010404
    # [Description("Lv5スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel5 = 7010405
    # [Description("Lv6スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel6 = 7010406
    # [Description("Lv7スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel7 = 7010407
    # [Description("Lv8スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel8 = 7010408
    # [Description("Lv9スフィア装着個数")]
    CharacterSphereMaxEquipCountLevel9 = 7010409
    # [Description("魔装達成レベル")]
    CharacterMatchlessSacredTreasureMaxLevel = 7010500
    # [Description("聖装達成レベル")]
    CharacterLegendSacredTreasureMaxLevel = 7010600
    # [Description("武具研磨回数")]
    CharacterEquipmentTrainingCount = 7010700
    # [Description("武具強化達成レベル")]
    CharacterEquipmentReinforceMaxLevel = 7010800
    # [Description("神装強化回数")]
    CharacterEquipmentMergeCount = 7010900
    # [Description("最大総戦闘力")]
    CharacterMaxBattlePower = 7011000
    # [Description("キャラクター達成レベル")]
    CharacterCharacterMaxLevel = 7011100
    # [Description("武具強化最大達成レベル")]
    CharacterAllEquipmentReinforceMaxLevel = 7011200
    # [Description("キャラクター最高到達レアリティ")]
    CharacterRankUpMaxRarity = 7020100
    # [Description("キャラクター進化回数")]
    CharacterRankUpEvolutionCount = 7020200
    # [Description("レベルリンク枠解放数")]
    CharacterLevelLinkOpenSlotCount = 7030100
    # [Description("最高所持スフィアレベル")]
    EquipmentSphereMaxLevel = 8010100
    # [Description("スフィア合成回数")]
    EquipmentSphereComposeCount = 8010200
    # [Description("精錬武具（武具鋳造）個数")]
    EquipmentForgeCount = 8020100
    # [Description("Rナヘマー武具シリーズ合成回数")]
    EquipmentComposeCountR = 8030101
    # [Description("SRサンダルフォン武具シリーズ合成回数")]
    EquipmentComposeCountSR = 8030102
    # [Description("SSRアスタロト武具シリーズ合成回数")]
    EquipmentComposeCountSSR = 8030103
    # [Description("プレイヤー達成レベル")]
    AutoBattleMaxPlayerLevel = 9010100
    # [Description("獲得した合計領民数")]
    AutoBattleAddPopulation = 9010200
    # [Description("ボス勝利回数")]
    BossBattleVictoryCount = 9010300
    # [Description("最高到達クエスト")]
    AutoBattleMaxClearQuest = 9010400
    # [Description("最高到達章")]
    AutoBattledMaxClearChapter = 9010500
    # [Description("放置バトル報酬受け取り回数")]
    AutoBattleGetRewardCount = 9010600
    # [Description("高速バトル回数")]
    AutoBattleQuickCount = 9020100
    # [Description("時空の洞窟階層3クリア回数")]
    DungeonBattleClearThirdFloorCount = 10010100
    # [Description("時空の洞窟階層1クリア回数")]
    DungeonBattleClearFirstFloorCount = 10010200
    # [Description("時空の洞窟で〇人以上の○○タイプのキャラを使って戦闘に勝利")]
    DungeonBattleClearUnitJobTypeBase = 10010300
    # [Description("時空の洞窟で1人以上のウォリアータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear1UnitWarriorType = 10010311
    # [Description("時空の洞窟で1人以上のスナイパータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear1UnitSniperType = 10010312
    # [Description("時空の洞窟で1人以上のソーサラータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear1UnitSorcererType = 10010314
    # [Description("時空の洞窟で2人以上のウォリアータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear2UnitWarriorType = 10010321
    # [Description("時空の洞窟で2人以上のスナイパータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear2UnitSniperType = 10010322
    # [Description("時空の洞窟で2人以上のソーサラータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear2UnitSorcererType = 10010324
    # [Description("時空の洞窟で3人以上のウォリアータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear3UnitWarriorType = 10010331
    # [Description("時空の洞窟で3人以上のスナイパータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear3UnitSniperType = 10010332
    # [Description("時空の洞窟で3人以上のソーサラータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear3UnitSorcererType = 10010334
    # [Description("時空の洞窟で4人以上のウォリアータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear4UnitWarriorType = 10010341
    # [Description("時空の洞窟で4人以上のスナイパータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear4UnitSniperType = 10010342
    # [Description("時空の洞窟で4人以上のソーサラータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear4UnitSorcererType = 10010344
    # [Description("時空の洞窟で5人以上のウォリアータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear5UnitWarriorType = 10010351
    # [Description("時空の洞窟で5人以上のスナイパータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear5UnitSniperType = 10010352
    # [Description("時空の洞窟で5人以上のソーサラータイプのキャラを使って戦闘に勝利")]
    DungeonBattleClear5UnitSorcererType = 10010354
    # [Description("時空の洞窟新キャラミッション")]
    DungeonBattleNewCharacter = 10011000
    # [Description("無窮の塔階層クリア数")]
    TowerBattleMaxClearFloor = 11010100
    # [Description("属性の塔到達下限階層")]
    TowerBattleMinClearElementTower = 11010200
    # [Description("無窮の塔勝利回数")]
    TowerBattleTotalWinCount = 11010300
    # [Description("バトルリーグ挑戦回数")]
    BattleLeagueChallengeCount = 12010100
    # [Description("バトルリーグ最高順位")]
    BattleLeagueMaxRanking = 12010200
    # [Description("幻影の神殿勝利回数")]
    LocalRaidVictoryCount = 13010100
    # [Description("幻影の神殿で〇人以上の○属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictoryUnitElementTypeBase = 13010200
    # [Description("幻影の神殿で1人以上の天属性か冥属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory1UnitLightAndDarkType = 13010210
    # [Description("幻影の神殿で1人以上の藍属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory1UnitBlueType = 13010211
    # [Description("幻影の神殿で1人以上の紅属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory1UnitRedType = 13010212
    # [Description("幻影の神殿で1人以上の翠属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory1UnitGreenType = 13010213
    # [Description("幻影の神殿で1人以上の黄属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory1UnitYellowType = 13010214
    # [Description("幻影の神殿で1人以上の天属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory1UnitLightType = 13010215
    # [Description("幻影の神殿で1人以上の冥属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory1UnitDarkType = 13010216
    # [Description("幻影の神殿で2人以上の天属性か冥属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory2UnitLightAndDarkType = 13010220
    # [Description("幻影の神殿で2人以上の藍属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory2UnitBlueType = 13010221
    # [Description("幻影の神殿で2人以上の紅属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory2UnitRedType = 13010222
    # [Description("幻影の神殿で2人以上の翠属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory2UnitGreenType = 13010223
    # [Description("幻影の神殿で2人以上の黄属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory2UnitYellowType = 13010224
    # [Description("幻影の神殿で2人以上の天属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory2UnitLightType = 13010225
    # [Description("幻影の神殿で2人以上の冥属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory2UnitDarkType = 13010226
    # [Description("幻影の神殿で3人以上の天属性か冥属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory3UnitLightAndDarkType = 13010230
    # [Description("幻影の神殿で3人以上の藍属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory3UnitBlueType = 13010231
    # [Description("幻影の神殿で3人以上の紅属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory3UnitRedType = 13010232
    # [Description("幻影の神殿で3人以上の翠属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory3UnitGreenType = 13010233
    # [Description("幻影の神殿で3人以上の黄属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory3UnitYellowType = 13010234
    # [Description("幻影の神殿で3人以上の天属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory3UnitLightType = 13010235
    # [Description("幻影の神殿で3人以上の冥属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory3UnitDarkType = 13010236
    # [Description("幻影の神殿で4人以上の天属性か冥属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory4UnitLightAndDarkType = 13010240
    # [Description("幻影の神殿で4人以上の藍属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory4UnitBlueType = 13010241
    # [Description("幻影の神殿で4人以上の紅属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory4UnitRedType = 13010242
    # [Description("幻影の神殿で4人以上の翠属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory4UnitGreenType = 13010243
    # [Description("幻影の神殿で4人以上の黄属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory4UnitYellowType = 13010244
    # [Description("幻影の神殿で4人以上の天属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory4UnitLightType = 13010245
    # [Description("幻影の神殿で4人以上の冥属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory4UnitDarkType = 13010246
    # [Description("幻影の神殿で5人以上の天属性か冥属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory5UnitLightAndDarkType = 13010250
    # [Description("幻影の神殿で5人以上の藍属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory5UnitBlueType = 13010251
    # [Description("幻影の神殿で5人以上の紅属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory5UnitRedType = 13010252
    # [Description("幻影の神殿で5人以上の翠属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory5UnitGreenType = 13010253
    # [Description("幻影の神殿で5人以上の黄属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory5UnitYellowType = 13010254
    # [Description("幻影の神殿で5人以上の天属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory5UnitLightType = 13010255
    # [Description("幻影の神殿で5人以上の冥属性のキャラで編成して戦闘に勝利（自身の編成のみ有効）")]
    LocalRaidVictory5UnitDarkType = 13010256
    # [Description("祈りの泉クエスト受領回数")]
    BountyQuestAllStartQuestCount = 14010100
    # [Description("祈りの泉新キャラミッション")]
    BountyQuestNewCharacter = 14011000
    # [Description("祈りの泉マルチクエスト受領回数")]
    BountyQuestTeamStartQuestCount = 14020100
    # [Description("キャラ入手数")]
    GachaNewJoinCharacter = 15010100
    # [Description("キャラガチャ回数")]
    GachaDrawCount = 15010200
    # [Description("ダイヤ消費量")]
    ConsumeCurrencyCount = 15010300
    # [Description("ギルド加入回数")]
    GuildJoinCount = 16010100
    # [Description("ギルドログイン回数")]
    GuildLoginCount = 16010200
    # [Description("ギルドレイド回数（解放ボス含む）")]
    GuildGuildRaidChallengeCount = 16020100
    # [Description("ワールドチャット発言回数")]
    ChatSayWorldChatCount = 17010100
    # [Description("アップデート回数")]
    OsStoreUpdateCount = 18010100
    # [Description("パネル図鑑遷移")]
    PictureBookTransitionPanel = 21010100
    # [Description("楽曲再生画面遷移回数")]
    MusicPlayerTransitionCount = 22010100
    # [Description("指定楽曲開放")]
    BuyMusic = 22010200
    # [Description("ギルドツリーで1つのタイプのキャラを〇体以上使って戦闘に勝利")]
    GuildTowerWinUnitSameJobTypeBase = 23010100
    # [Description("ギルドツリーで1つのタイプのキャラを1体以上使って戦闘に勝利")]
    GuildTowerWin1UnitSameJobType = 23010101
    # [Description("ギルドツリーで1つのタイプのキャラを2体以上使って戦闘に勝利")]
    GuildTowerWin2UnitSameJobType = 23010102
    # [Description("ギルドツリーで1つのタイプのキャラを3体以上使って戦闘に勝利")]
    GuildTowerWin3UnitSameJobType = 23010103
    # [Description("ギルドツリーで1つのタイプのキャラを4体以上使って戦闘に勝利")]
    GuildTowerWin4UnitSameJobType = 23010104
    # [Description("ギルドツリーで1つのタイプのキャラを5体以上使って戦闘に勝利")]
    GuildTowerWin5UnitSameJobType = 23010105
    # [Description("ギルドツリーの勝利回数")]
    GuildTowerWinCount = 23010200
    # [Description("ギルドツリーでの最大達成コンボ数")]
    GuildTowerMaxComboCount = 23010300
    # [Description("開花の種の獲得数")]
    GuildTowerGetJobReinforcementMaterialCount = 23010400
    # [Description("全てのタイプのギルドツリー強化Lvの内で最大到達のレベル")]
    GuildTowerMaxJobLevel = 23020100
    # [Description("全てのタイプのギルドツリー強化Lvの内で最低到達のレベル")]
    GuildTowerMinJobLevel = 23020200
    # [Description("週間トピックス遷移")]
    WeeklyTopicsTransitionCount = 24010100
    # [Description("人気投票チケットの消費数")]
    ConsumePopularityVoteTicket = 25010100
    # [Description("魔女の書庫整理 マス解放数")]
    BookSortUnlockGridCell = 26010100
    # [Description("魔女の書庫整理 最大到達フロア")]
    BookSortMaxFloor = 26010200
    # [Description("魔女の書庫整理 アイテムの消費量")]
    BookSortConsumeItemCount = 26010300

# [Description("SNS情報")]
# [MessagePackObject(True)]
_MissionAchievementType = MissionAchievementType
@_dataclass(slots=True)
class SnsInfo():
    # [Description("ミッション達成条件タイプ")]
    MissionAchievementType: _MissionAchievementType = _field(default_factory=lambda: _MissionAchievementType())
    # [Description("SNS名称のキー")]
    NameKey: str = ""
    # [Description("URL")]
    Url: str = ""

# [Description("遷移先タイプ")]
class TransferSpotType(_Enum):
    # [Description("遷移無し")]
    None_ = 0
    # [Description("放置バトル")]
    AutoBattle = 10
    # [Description("祈りの泉")]
    BountyQuest = 20
    # [Description("時空の洞窟")]
    DungeonBattle = 30
    # [Description("ガチャ")]
    GachaCase = 40
    # [Description("試練")]
    Competition = 50
    # [Description("幻影の神殿")]
    LocalRaid = 60
    # [Description("お知らせ")]
    Notice = 70
    # [Description("ロイヤルショップ（タブ指定）")]
    ShopTab = 80
    # [Description("ロイヤルショップ（商品指定）")]
    ShopItem = 81
    # [Description("無窮の塔（通常）")]
    TowerBattle = 90
    # [Description("無窮の塔（塔指定）")]
    TowerBattleSelectTower = 91
    # [Description("交換所")]
    TradeShop = 100
    # [Description("外部ウェブサイト")]
    OuterWebSite = 110
    # [Description("月間ログインボーナス")]
    MonthlyLoginBonus = 120
    # [Description("期間限定ログインボーナス")]
    LimitedLoginBonus = 121
    # [Description("初心者ミッション")]
    BeginnerMission = 130
    # [Description("カムバックミッション")]
    ComebackMission = 131
    # [Description("新キャラミッション")]
    NewCharacterMission = 132
    # [Description("イベントミッション")]
    EventMission = 133
    # [Description("友達招待")]
    FriendCampaign = 134
    # [Description("パネルミッション")]
    PanelMission = 135
    # [Description("コラボミッション")]
    CollabMission = 136
    # [Description("ゲリラパック")]
    GuerrillaPack = 140
    # [Description("格納アイコン")]
    StoreIcon = 150
    # [Description("キャラ")]
    Character = 160
    # [Description("チャット")]
    Chat = 170
    # [Description("ギルド")]
    Guild = 180
    # [Description("ギルドレイド")]
    GuildRaid = 181
    # [Description("ギルドレイドワールドダメージ報酬ダイアログ")]
    GuildRaidWorldReward = 182
    # [Description("アイテム自動回収ダイアログ")]
    RetrieveItem = 190
    # [Description("ギルド勧誘")]
    GuildMemberRecruit = 200
    # [Description("個別通知ダイアログ")]
    IndividualNotification = 210
    # [Description("星導交換所")]
    StarsGuidanceTradeShop = 220
    # [Description("初回インストール時のワールド指定")]
    TitleWorld = 230
    # [Description("ラッキーチャンス")]
    LuckyChance = 240
    # [Description("ラッキーチャンス当選者入力フォーム")]
    LuckyChanceInputForm = 250
    # [Description("週間トピックス")]
    WeeklyTopics = 260
    # [Description("人気投票")]
    PopularityVote = 270
    # [Description("イベントポータル")]
    EventPortal = 280
    # [Description("書庫整理")]
    BookSort = 290
    # [Description("ワールド誘導")]
    WorldGuidance = 300
    # [Description("フレンド")]
    Friend = 4

# [MessagePackObject(True)]
_TransferSpotType = TransferSpotType
@_dataclass(slots=True)
class TransferDetailInfo():
    # [Description("遷移タイプ")]
    # [PropertyOrder(1)]
    TransferSpotType: _TransferSpotType = _field(default_factory=lambda: _TransferSpotType())
    # [Description("遷移先詳細１")]
    # [PropertyOrder(2)]
    NumberInfo1: int = 0
    # [Description("遷移先詳細２")]
    # [PropertyOrder(3)]
    NumberInfo2: int = 0
    # [Description("遷移先詳細３")]
    # [PropertyOrder(4)]
    StringInfo: str = ""

# [Description("RawDataダウンロードタイプ")]
class RawDataDownloadType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("タイトルダウンロード")]
    Title = 1
    # [Description("タイトルダウンロード(JP)")]
    TitleLanguageJP = 2
    # [Description("タイトルダウンロード(US)")]
    TitleLanguageUS = 3
    # [Description("タイトルダウンロード(KR)")]
    TitleLanguageKR = 4
    # [Description("タイトルダウンロード(TW)")]
    TitleLanguageTW = 5
    # [Description("タイトルダウンロード(FR)")]
    TitleLanguageFR = 6
    # [Description("タイトルダウンロード(CN)")]
    TitleLanguageCN = 7
    # [Description("タイトルダウンロード(ES)")]
    TitleLanguageES = 8
    # [Description("タイトルダウンロード(PT)")]
    TitleLanguagePT = 9
    # [Description("タイトルダウンロード(TH)")]
    TitleLanguageTH = 10
    # [Description("タイトルダウンロード(ID)")]
    TitleLanguageID = 11
    # [Description("タイトルダウンロード(VN)")]
    TitleLanguageVN = 12
    # [Description("タイトルダウンロード(RU)")]
    TitleLanguageRU = 13
    # [Description("タイトルダウンロード(DE)")]
    TitleLanguageDE = 14

# [Description("時空の洞窟 マス種別")]
class DungeonBattleGridType(_Enum):
    # [Description("初期地点")]
    Start = 0
    # [Description("バトルマス（通常）")]
    BattleNormal = 1
    # [Description("バトルマス（エリート）")]
    BattleElite = 2
    # [Description("バトルマス（ボス）")]
    BattleBoss = 3
    # [Description("バトルマス（ボス）加護無し")]
    BattleBossNoRelic = 4
    # [Description("回復マス")]
    Recovery = 5
    # [Description("キャラ加入マス")]
    JoinCharacter = 6
    # [Description("ミステリーショップマス")]
    Shop = 7
    # [Description("加護強化マス")]
    RelicReinforce = 8
    # [Description("加護の挑戦マス")]
    BattleAndRelicReinforce = 9
    # [Description("カロンマス")]
    TreasureChest = 10
    # [Description("復活")]
    Revival = 11
    # [Description("イベント通常バトルマス")]
    EventBattleNormal = 12
    # [Description("イベント強敵バトルマス")]
    EventBattleElite = 13
    # [Description("イベント特殊バトルマス")]
    EventBattleSpecial = 14

# [Description("時空の洞窟　戦闘力ボーナス対象")]
class DungeonBattleRelicBattlePowerBonusTargetType(_Enum):
    # [Description("すべて")]
    All = 0
    # [Description("愁（しゅう）")]
    ElementBlue = 1
    # [Description("業（ごう）")]
    ElementRed = 2
    # [Description("心（しん）")]
    ElementGreen = 3
    # [Description("渇（かつ）")]
    ElementYellow = 4
    # [Description("ウォリアー")]
    Warrior = 5
    # [Description("スナイパー")]
    Sniper = 6
    # [Description("ソーサラー")]
    Sorcerer = 7

# [Description("時空の洞窟 加護レアリティ")]
class DungeonBattleRelicRarityType(_Enum):
    None_ = 0
    # [Description("R")]
    R = 1
    # [Description("SR")]
    SR = 2
    # [Description("SSR")]
    SSR = 3

# [Description("パッシブスキル種別")]
class PassiveType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("キャラパッシブタイプ")]
    EachUnit = 1
    # [Description("チームパッシブタイプ")]
    Team = 2

# [MessagePackObject(True)]
_PassiveType = PassiveType
@_dataclass(slots=True)
class PassiveSkillTypeInfo():
    # [Description("パッシブスキルID")]
    PassiveSkillId: int = 0
    # [Description("パッシブタイプ")]
    PassiveType: _PassiveType = _field(default_factory=lambda: _PassiveType())

# [Description("エフェクトグループアイコンタイプ")]
class EffectGroupIconType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("キャラクター")]
    Character = 1
    # [Description("加護")]
    Blessing = 2
    # [Description("敵")]
    Enemy = 3
    # [Description("専属武器")]
    ExclusiveWeapon = 4

# [Description("エフェクトグループ情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class EffectGroupInfo():
    # [Description("エフェクトグループID")]
    EffectGroupId: int = 0
    # [Description("優先度")]
    OrderNumber: int = 0

# [Description("属性条件タイプ")]
class ElementBonusConditionType(_Enum):
    # [Description("4属性+天")]
    Default = 0
    # [Description("冥属性")]
    Dark = 1

# [Description("属性ボーナス発動段階タイプ")]
class ElementBonusPhaseType(_Enum):
    # [Description("None")]
    None_ = 0
    # [Description("段階1")]
    First = 1
    # [Description("段階2")]
    Second = 2
    # [Description("段階3")]
    Third = 3
    # [Description("段階4")]
    Fourth = 4
    # [Description("段階5")]
    Fifth = 5

# [Description("必要アイテム情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class EquipmentEvolutionInfo():
    # [Description("レアリティ")]
    # [PropertyOrder(1)]
    RarityFlags: _Flags[EquipmentRarityFlags] = _field(default_factory=lambda: _Flags["EquipmentRarityFlags"]([]))
    # [Description("進化前武具レベル")]
    # [PropertyOrder(2)]
    BeforeEquipmentLv: int = 0
    # [Description("進化後武具レベル")]
    # [PropertyOrder(3)]
    AfterEquipmentLv: int = 0
    # [Description("必要アイテムリスト")]
    # [Nest(True, 1)]
    # [PropertyOrder(4)]
    RequiredItemList: list[UserItem] = _field(default_factory=list["UserItem"])

# [Description("武具進化の種類")]
class EvolutionType(_Enum):
    # [Description("レベル最大値上昇")]
    ReinforcementLevelMaximumUp = 0
    # [Description("レアリティ上昇")]
    RarityUp = 1

# [Description("武具カテゴリ")]
class EquipmentCategory(_Enum):
    # [Description("通常武具")]
    Normal = 1
    # [Description("セット武具")]
    Set = 2
    # [Description("専用武器")]
    Exclusive = 3

# [Description("武具の種類")]
class EquipmentSlotType(_Enum):
    # [Description("武器")]
    Weapon = 1
    # [Description("装飾品")]
    Sub = 2
    # [Description("アーム")]
    Gauntlet = 3
    # [Description("メット")]
    Helmet = 4
    # [Description("メイル")]
    Armor = 5
    # [Description("ブーツ")]
    Shoes = 6

# [Description("第2フレーム種類")]
class SecondaryFrameType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("属性アイコン")]
    ElementIcon = 1
    # [Description("効果時間表示")]
    EffectTime = 2
    # [Description("レベル")]
    Level = 3
    # [Description("キャラアイコン_中央")]
    CenteredCharacterIcon = 4

# [Description("セット装備の効果")]
# [MessagePackObject(True)]
_BaseParameterChangeInfo = BaseParameterChangeInfo
_BattleParameterChangeInfo = BattleParameterChangeInfo
@_dataclass(slots=True)
class EquipmentSetEffect():
    # [Description("発動に必要な装備数")]
    # [PropertyOrder(1)]
    RequiredEquipmentCount: int = 0
    # [Description("発動効果(BaseParameter)")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    BaseParameterChangeInfo: _BaseParameterChangeInfo = _field(default_factory=lambda: _BaseParameterChangeInfo())
    # [Description("発動効果(BattleParameter)")]
    # [Nest(True, 1)]
    # [PropertyOrder(3)]
    BattleParameterChangeInfo: _BattleParameterChangeInfo = _field(default_factory=lambda: _BattleParameterChangeInfo())

class ErrorMessageType(_Enum):
    None_ = 0
    Dialog = 1
    DialogWithError = 2
    Toast = 3

class ICharacterImage(_Protocol):
    # [Description("キャラ画像Id")]
    CharacterImageId: int
    # [Description("キャラ画像サイズ")]
    CharacterImageSize: float
    # [Description("キャラ画像座標X")]
    CharacterImageX: float
    # [Description("キャラ画像座標Y")]
    CharacterImageY: float

# [Description("ミッション遷移先タイプ")]
class MissionTransitionDestinationType(_Enum):
    # [Description("遷移先無し")]
    None_ = 0
    # [Description("デイリーミッション")]
    MissionDaily = 101
    # [Description("プレイヤー情報")]
    PlayerInfo = 201
    # [Description("フレンド一覧")]
    Friend = 301
    # [Description("アカウント連携")]
    LinkAccount = 401
    # [Description("Twitter ")]
    Twitter = 402
    # [Description("YouTube")]
    YouTube = 403
    # [Description("Url1")]
    Url1 = 404
    # [Description("Url2")]
    Url2 = 405
    # [Description("ショップ（武具合成＿聖装タブ）")]
    ExchangeLegendForge = 501
    # [Description("ショップ（武具合成＿通常タブ）")]
    ExchangeEquipmentForge = 502
    # [Description("ショップ（店舗タブ）")]
    Exchange = 503
    # [Description("GvGショップ")]
    ExchangeGvG = 504
    # [Description("時空の洞窟ショップ")]
    ExchangeDungeonBattle = 505
    # [Description("ロイヤルショップ＿ダイヤ購入タブ")]
    Shop = 601
    # [Description("キャラ画面（所持キャラタブ）")]
    CharacterList = 701
    # [Description("キャラ画面（進化タブ）")]
    CharacterRankUp = 702
    # [Description("レベルリンク（共鳴クリスタル）")]
    LevelLink = 703
    # [Description("アイテムボックス_スフィア")]
    ItemBoxSphere = 801
    # [Description("アイテムボックス_武具")]
    ItemBoxEquipment = 802
    # [Description("アイテムボックス画面（パーツタブ）")]
    ItemBoxParts = 803
    # [Description("オートバトル")]
    AutoBattle = 901
    # [Description("高速バトルダイアログ")]
    AutoBattleQuick = 902
    # [Description("時空の洞窟")]
    DungeonBattle = 1001
    # [Description("無窮の塔")]
    TowerBattle = 1101
    # [Description("バトルリーグ")]
    BattleLeague = 1201
    # [Description("幻影の神殿")]
    LocalRaid = 1301
    # [Description("祈りの泉（ノーマルタブ）")]
    BountyQuestSolo = 1401
    # [Description("祈りの泉（チームタブ）")]
    BountyQuestTeam = 1402
    # [Description("ガチャ（キャラタブ）")]
    Gacha = 1501
    # [Description("ギルド")]
    Guild = 1601
    # [Description("ギルドレイド画面（ソーニャ）")]
    GuildRaid = 1602
    # [Description("チャット")]
    Chat = 1701
    # [Description("各OSのストア")]
    OsStore = 1801
    # [Description("キャラ詳細")]
    CharacterDetail = 1901
    # [Description("マイページお気に入り設定ダイアログ")]
    FavoriteCharacter = 2001
    # [Description("パネル図鑑")]
    PanelPictureBook = 2101
    # [Description("楽曲再生")]
    MusicPlayer = 2201
    # [Description("ギルドツリーメイン画面")]
    GuildTower = 2301
    # [Description("ギルドツリーLV強化ダイアログ")]
    GuildTowerReinforceJob = 2302
    # [Description("週間トピックス")]
    WeeklyTopics = 2401
    # [Description("人気投票メイン画面")]
    PopularityVote = 2501
    # [Description("魔女の書庫整理")]
    BookSort = 2601

# [Description("ガチャカテゴリータイプ")]
class GachaCategoryType(_Enum):
    # [Description("キャラ")]
    Character = 0
    # [Description("武具")]
    Equipment = 1

# [Description("運命ガチャタイプ")]
class GachaDestinyType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("愁、業、心、渇属性")]
    BlueAndRedAndGreenAndYellow = 1
    # [Description("こちらの承認")]
    LightAndDark = 2

# [Description("ガチャグループタイプ")]
class GachaGroupType(_Enum):
    # [Description("グループ無し")]
    None_ = 0
    # [Description("属性")]
    Element = 1
    # [Description("聖天使の神託")]
    HolyAngel = 2

# [Description("ガチャ聖遺物タイプ")]
class GachaRelicType(_Enum):
    None_ = 0
    # [Description("天契の聖杯")]
    ChaliceOfHeavenly = 1
    # [Description("蒼穹の銀勲")]
    SilverOrderOfTheBlueSky = 2
    # [Description("希求の神翼")]
    DivineWingsOfDesire = 3
    # [Description("悠園の果実")]
    FruitOfTheGarden = 4

# [Description("ガチャリセットタイプ")]
class GachaResetType(_Enum):
    # [Description("リセット無し")]
    None_ = 0
    # [Description("毎日4:00")]
    Daily = 1
    # [Description("毎週月曜4:00")]
    Weekly = 2

# [Description("ガチャセレクトリストタイプ")]
class GachaSelectListType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("プライズ共通")]
    Default = 1
    # [Description("運命")]
    Destiny = 2
    # [Description("星の導き")]
    StarsGuidance = 3
    # [Description("選択ピックアップ")]
    SelectablePickUp = 4

# [Description("ガチャ表示用フラグ")]
# [Flags]
class GachaCaseFlags(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("天井表示")]
    ShowCeilingCount = 1
    # [Description("レビュー誘導判定無し")]
    IgnoreReview = 2
    # [Description("シェアボタン表示なし")]
    HideShareButton = 4
    # [Description("ガチャ詳細ダイアログ スペシャルリスト非表示")]
    HideSpecialList = 8

# [MessagePackObject(True)]
@_dataclass(slots=True)
class CustomTextLayoutInfo():
    BannerAlignment: int = 0
    BannerFontSize: int = 0
    BannerLetterSpacing: float = 0.0
    BannerLineSpacing: float = 0.0
    BannerOutlineColor: str = ""
    BannerPositionX: float = 0.0
    BannerPositionY: float = 0.0
    TitleFontSize: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class CustomTextLayout():
    # [Description("日本語")]
    # [Nest(True, 2)]
    # [PropertyOrder(1)]
    jaJP: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())
    # [Description("インドネシア語")]
    # [Nest(True, 2)]
    # [PropertyOrder(10)]
    idID: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())
    # [Description("ベトナム語")]
    # [Nest(True, 2)]
    # [PropertyOrder(11)]
    viVN: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())
    # [Description("ロシア語")]
    # [Nest(True, 2)]
    # [PropertyOrder(12)]
    ruRU: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())
    # [Description("ドイツ語")]
    # [Nest(True, 2)]
    # [PropertyOrder(13)]
    deDE: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())
    # [Description("英語")]
    # [Nest(True, 2)]
    # [PropertyOrder(2)]
    enUS: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())
    # [Description("韓国語")]
    # [Nest(True, 2)]
    # [PropertyOrder(3)]
    koKR: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())
    # [Description("中国語(繁体字)")]
    # [Nest(True, 2)]
    # [PropertyOrder(4)]
    zhTW: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())
    # [Description("中国語(簡体字)")]
    # [Nest(True, 2)]
    # [PropertyOrder(5)]
    zhCN: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())
    # [Description("フランス語")]
    # [Nest(True, 2)]
    # [PropertyOrder(6)]
    frFR: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())
    # [Description("スペイン語")]
    # [Nest(True, 2)]
    # [PropertyOrder(7)]
    esMX: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())
    # [Description("ポルトガル語")]
    # [Nest(True, 2)]
    # [PropertyOrder(8)]
    ptBR: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())
    # [Description("タイ語")]
    # [Nest(True, 2)]
    # [PropertyOrder(9)]
    thTH: CustomTextLayoutInfo = _field(default_factory=lambda: CustomTextLayoutInfo())

# [Description("ガチャボーナスゲージ表示タイプ")]
class GachaBonusGaugeType(_Enum):
    # [Description("次のボーナスでドローカウントをリセット")]
    SingleReset = 0
    # [Description("ドロー回数を累計表示")]
    SingleSum = 1
    # [Description("ボーナスを複数表示")]
    Multi = 2

# [Description("タイトル背景色")]
class GachaTitleColorType(_Enum):
    None_ = 0
    # [Description("黄色")]
    Yellow = 1
    # [Description("緑")]
    Green = 2
    # [Description("青")]
    Blue = 3
    # [Description("赤紫")]
    RedPurple = 4
    # [Description("水灰")]
    BlueGray = 5
    # [Description("青紫")]
    BluePurple = 6
    # [Description("赤")]
    Red = 7

# [Description("ガチャ追加キャラタイプ")]
class GachaAddCharacterType(_Enum):
    # [Description("未指定")]
    None_ = 0
    # [Description("復刻")]
    Reprint = 1
    # [Description("新規")]
    New = 2

# [Description("城タイプ")]
class CastleType(_Enum):
    # [Description("下位")]
    Small = 0
    # [Description("中位")]
    Medium = 1
    # [Description("上位")]
    Large = 2

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GlobalGvgFixedRewards():
    # [Nest(True, 1)]
    LowerClass: list[UserItem] = _field(default_factory=list["UserItem"])
    # [Nest(True, 1)]
    MediumClass: list[UserItem] = _field(default_factory=list["UserItem"])
    # [Nest(True, 1)]
    UpperClass: list[UserItem] = _field(default_factory=list["UserItem"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildRaidDamageBar():
    DamageBarCount: int = 0
    DamageBarMaxValue: int = 0

class GuildRaidBossType(_Enum):
    # [Description("通常ボス")]
    Normal = 0
    # [Description("解放ボス")]
    Releasable = 1
    # [Description("イベントボス")]
    Event = 2

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildDamageBarReward():
    DamageBarCount: int = 0
    # [Nest(True, 1)]
    GuildRewardItems: list[UserItem] = _field(default_factory=list["UserItem"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildRaidGoldCoefficientInfo():
    AdditiveCoefficient: int = 0
    DivisionCoefficient: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class NormalDamageBarReward():
    DamageBarCount: int = 0
    # [Nest(True, 1)]
    NormalRewardGoldCoefficientInfo: GuildRaidGoldCoefficientInfo = _field(default_factory=lambda: GuildRaidGoldCoefficientInfo())
    # [Nest(True, 1)]
    NormalRewardItems: list[UserItem] = _field(default_factory=list["UserItem"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildRaidQuestClearEquipmentLvList():
    EquipmentLv: int = 0
    QuestClearValue: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class WorldDamageBarReward():
    GoalDamage: int = 0
    # [Nest(True, 1)]
    WorldRewardItems: list[UserItem] = _field(default_factory=list["UserItem"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildTowerComboBonus():
    ComboBonus: int = 0
    ComboCount: int = 0

class GuildTowerCharacterConditionType(_Enum):
    # [Description("健康")]
    None_ = 0
    # [Description("疲労(小)")]
    FatigueSmall = 1
    # [Description("疲労(大)")]
    FatigueLarge = 2

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildTowerDebuffParameter():
    AttackPowerAddition: int = 0
    AttackPowerMultiplier: int = 0
    CharacterConditionType: GuildTowerCharacterConditionType = _field(default_factory=lambda: GuildTowerCharacterConditionType())
    Critical: int = 0
    CriticalDamageEnhance: int = 0
    DebuffCount: int = 0
    DebuffHit: int = 0
    HPAddition: int = 0
    HPMultiplier: int = 0
    Hit: int = 0
    Speed: int = 0

# [Description("ヘルプ付加情報タイプ")]
class HelpParameterType(_Enum):
    # [Description("無し")]
    None_ = 0
    # [Description("所属するワールド")]
    BelongingWorlds = 1
    # [Description("ギルドバトル最小配置数")]
    GuildBattleMinPlacement = 2
    # [Description("グランドバトル最小配置数")]
    GrandBattleMinPlacement = 3
    # [Description("人気投票期間情報")]
    PopularityVoteTimeInfo = 4

# [Description("ヘルプパート")]
# [MessagePackObject(True)]
_HelpParameterType = HelpParameterType
@_dataclass(slots=True)
class HelpPartInfo():
    # [Description("見出し")]
    # [PropertyOrder(1)]
    HeadLine: str = ""
    # [Description("本文")]
    # [PropertyOrder(2)]
    MainText: str = ""
    # [Description("付加情報")]
    # [PropertyOrder(3)]
    HelpParameterType: _HelpParameterType = _field(default_factory=lambda: _HelpParameterType())

# [Description("問い合わせボタンタイプ")]
class InquiryButtonType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("URL")]
    Url = 1
    # [Description("メール")]
    Mail = 2
    # [Description("アカウント削除")]
    AccountDelete = 3

# [Description("所持数上限切替クエスト")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class MaxCountSwitchingQuest():
    # [Description("クエストID")]
    # [PropertyOrder(1)]
    QuestId: int = 0
    # [Description("所持数上限")]
    # [PropertyOrder(2)]
    MaxCount: int = 0

# [Description("レジェンドリーグ階級の種類")]
class LegendLeagueClassType(_Enum):
    None_ = 0
    # [Description("シュバリエ")]
    Chevalier = 1
    # [Description("パラディン")]
    Paladin = 2
    # [Description("デューク")]
    Duke = 3
    # [Description("ロイヤルランク")]
    Royal = 4
    # [Description("レジェンドランク")]
    Legend = 5
    # [Description("ワールド・ルーラー")]
    WorldRuler = 6

# [Description("期間限定イベントの種類")]
class LimitedEventType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("属性の塔全開放")]
    ElementTowerAllRelease = 1
    # [Description("シリアルコード入力")]
    SerialCode = 2
    # [Description("通知強制削除")]
    NotificationForceCancel = 10000
    # [Description("GooglePlayのレシート消費をクライアントで行う")]
    EnableGooglePlayReceiptConsumeByClient = 10001

# [Description("キャラクターレアリティを持つ可能性があるアイテムが実装するインターフェース")]
class IUserCharacterItem(_Protocol):
    Item: UserItem
    RarityFlags: _Flags[CharacterRarityFlags]

# [Description("期間限定ログボの日別報酬アイテム")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class DailyLimitedLoginBonusItem():
    # [Description("日付")]
    # [PropertyOrder(1)]
    Date: int = 0
    # [Description("報酬アイテム")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    DailyRewardItem: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("キャラレアリティ")]
    # [PropertyOrder(3)]
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [Description("期間限定ログボの毎日報酬アイテム")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class EveryDayLimitedLoginBonusItem():
    # [Description("毎日報酬アイテム")]
    # [Nest(True, 1)]
    # [PropertyOrder(1)]
    EveryDayRewardItem: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("キャラレアリティ")]
    # [PropertyOrder(2)]
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [Description("期間限定ログボの特別報酬アイテム")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class SpecialLimitedLoginBonusItem():
    # [Description("日付")]
    # [PropertyOrder(1)]
    Date: int = 0
    # [Description("特別報酬アイテム")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    SpecialRewardItem: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("キャラレアリティ")]
    # [PropertyOrder(3)]
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [Description("ローカル通知種別")]
class LocalNotificationSendType(_Enum):
    None_ = 0
    # [Description("時刻指定")]
    TimeSpecified = 1
    # [Description("放置報酬上限到達")]
    AutoBattle = 2
    # [Description("一週間限定パック終了直前")]
    OneWeekLimitedPack = 3

# [Description("ローカル通知種別")]
class LocalNotificationType(_Enum):
    None_ = 0
    # [Description("オートバトル報酬上限到達")]
    AutoBattle = 1
    # [Description("幻影の神殿開始")]
    LocalRaid = 2
    # [Description("バトルリーグ報酬受け取り")]
    BattleLeagueReward = 3
    # [Description("一週間パック終了")]
    OneWeekLimitedPack = 4

# [MessagePackObject(True)]
@_dataclass(slots=True)
class LocalRaidStartEndTime():
    EndTime: int = 0
    StartTime: int = 0

class LocalRaidQuestGroupType(_Enum):
    # [Description("1欄")]
    First = 1
    # [Description("2欄")]
    Second = 2
    # [Description("3欄")]
    Third = 3
    # [Description("4欄")]
    Fourth = 4
    # [Description("5欄")]
    Fifth = 5

class ILotteryWeight(_Protocol):
    LotteryWeight: int

# [MessagePackObject(True)]
@_dataclass(slots=True)
class LocalRaidQuestIdWeight():
    # [Description("幻影の神殿のクエストId")]
    # [PropertyOrder(1)]
    LocalRaidQuestId: int = 0
    # [Description("出現割合")]
    # [PropertyOrder(2)]
    LotteryWeight: int = 0

# [MessagePackObject(True)]
_LocalRaidQuestGroupType = LocalRaidQuestGroupType
@_dataclass(slots=True)
class LocalRaidQuestIdGroup():
    # [Description("幻影の神殿のクエストグループ種別")]
    # [PropertyOrder(1)]
    LocalRaidQuestGroupType: _LocalRaidQuestGroupType = _field(default_factory=lambda: _LocalRaidQuestGroupType())
    # [Description("幻影の神殿のクエストIdグループ")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    LocalRaidQuestIdWeights: list[LocalRaidQuestIdWeight] = _field(default_factory=list["LocalRaidQuestIdWeight"])

# [Description("ミッショングループ")]
class MissionGroupType(_Enum):
    # [Description("メイン")]
    Main = 0
    # [Description("デイリー")]
    Daily = 1
    # [Description("ウィークリー")]
    Weekly = 2
    # [Description("初心者")]
    Beginner = 3
    # [Description("カムバック")]
    Comeback = 4
    # [Description("新キャラ")]
    NewCharacter = 5
    # [Description("イベント")]
    Limited = 6
    # [Description("パネル")]
    Panel = 9
    # [Description("ギルドミッション")]
    Guild = 10
    # [Description("ギルドツリー")]
    GuildTower = 11
    # [Description("コラボ")]
    Collab = 12
    # [Description("人気投票")]
    PopularityVote = 13
    # [Description("魔女の書庫整理")]
    BookSort = 14
    # [Description("デイリー追加報酬")]
    DailyBonus = 1000

# [MessagePackObject(True)]
@_dataclass(slots=True)
class MissionReward():
    # [Nest(True, 1)]
    # [PropertyOrder(1)]
    Item: UserItem = _field(default_factory=lambda: UserItem())
    # [PropertyOrder(2)]
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [Description("ミッションタイプ")]
class MissionType(_Enum):
    Main = 0
    Daily = 1
    Weekly = 2
    BeginnerFirstDay = 311
    BeginnerFirstDayLevel = 312
    BeginnerFirstDayStage = 313
    BeginnerFirstDayBuy = 314
    BeginnerSecondDay = 321
    BeginnerSecondDayQuick = 322
    BeginnerSecondDayBattleLeague = 323
    BeginnerSecondDayBuy = 324
    BeginnerThirdDay = 331
    BeginnerThirdDayForge = 332
    BeginnerThirdDayDungeonBattle = 333
    BeginnerThirdDayBuy = 334
    BeginnerFourthDay = 341
    BeginnerFourthDayReinforceEquipment = 342
    BeginnerFourthDayTowerBattle = 343
    BeginnerFourthDayBuy = 344
    BeginnerFifthDay = 351
    BeginnerFifthDayBountyQuest = 352
    BeginnerFifthDayTotalCharacter = 353
    BeginnerFifthDayBuy = 354
    BeginnerSixthDay = 361
    BeginnerSixthDaySphere = 362
    BeginnerSixthDayCharacterEvolution = 363
    BeginnerSixthDayBuy = 364
    BeginnerSeventhDay = 371
    BeginnerSeventhDayTraining = 372
    BeginnerSeventhDayLocalRaid = 373
    BeginnerSeventhDayBuy = 374
    ComebackLogin = 401
    ComebackActivity = 402
    ComebackConsumeCurrency = 403
    NewCharacter = 5
    LimitedFirstDayTab1 = 611
    LimitedFirstDayTab2 = 612
    LimitedFirstDayTab3 = 613
    LimitedFirstDayTab4 = 614
    LimitedSecondDayTab1 = 621
    LimitedSecondDayTab2 = 622
    LimitedSecondDayTab3 = 623
    LimitedSecondDayTab4 = 624
    LimitedThirdDayTab1 = 631
    LimitedThirdDayTab2 = 632
    LimitedThirdDayTab3 = 633
    LimitedThirdDayTab4 = 634
    LimitedFourthDayTab1 = 641
    LimitedFourthDayTab2 = 642
    LimitedFourthDayTab3 = 643
    LimitedFourthDayTab4 = 644
    LimitedFifthDayTab1 = 651
    LimitedFifthDayTab2 = 652
    LimitedFifthDayTab3 = 653
    LimitedFifthDayTab4 = 654
    LimitedSixthDayTab1 = 661
    LimitedSixthDayTab2 = 662
    LimitedSixthDayTab3 = 663
    LimitedSixthDayTab4 = 664
    LimitedSeventhDayTab1 = 671
    LimitedSeventhDayTab2 = 672
    LimitedSeventhDayTab3 = 673
    LimitedSeventhDayTab4 = 674
    PanelSheet1 = 901
    PanelSheet2 = 902
    PanelSheet3 = 903
    Guild = 10
    GuildTower = 11
    Collab = 12
    PopularityVote = 13
    BookSort = 14

# [Description("解放されるコマンドの種類")]
class OpenCommandType(_Enum):
    # [Description("コマンド無し")]
    None_ = 0
    # [Description("アルカナ")]
    Arcana = 1
    # [Description("ショップ")]
    Shop = 2
    # [Description("ミッション")]
    Mission = 3
    # [Description("時空の洞窟")]
    DungeonBattle = 4
    # [Description("バトルスキップ")]
    BattleSkip = 5
    # [Description("バトル倍速")]
    BattleSpeed = 6
    # [Description("バトル4倍速")]
    BattleSpeed4 = 7
    # [Description("時空の洞窟 見逃し補填")]
    DungeonBattleCompensation = 8
    # [Description("無窮の塔")]
    TowerBattle = 9
    # [Description("祈りの泉")]
    BountyQuest = 10
    # [Description("バトルリーグ")]
    BattleLeague = 11
    # [Description("幻影の神殿")]
    LocalRaid = 12
    # [Description("レジェンドリーグ")]
    LegendLeague = 13
    # [Description("運命ガチャ")]
    GachaDestiny = 14
    # [Description("エスペリアタワー")]
    EsperiaTower = 15
    # [Description("洞窟バトルハードモード")]
    DungeonBattleHardMode = 16
    # [Description("メモリー")]
    CharacterStory = 17
    # [Description("ロイヤルショップ")]
    RoyalShop = 18
    # [Description("ランキング")]
    Ranking = 19
    # [Description("スフィア装着")]
    SphereSet = 20
    # [Description("武具合成通常")]
    ShopNormalEquipment = 21
    # [Description("武具合成聖装")]
    ShopLegendEquipment = 22
    # [Description("ギルド（GVG）")]
    ShopGuild = 23
    # [Description("キャラコインショップ")]
    ShopCharacter = 24
    # [Description("時空の洞窟")]
    ShopDungeonBattle = 25
    # [Description("バトルリーグ")]
    ShopBattleLeague = 26
    # [Description("レジェンドリーグ")]
    ShopLegendLeague = 27
    # [Description("限定特典")]
    ShopLimited = 28
    # [Description("進化")]
    RankUp = 29
    # [Description("プレゼント")]
    Present = 30
    # [Description("武具強化")]
    EquipmentStrength = 31
    # [Description("神装強化")]
    EquipmentAscend = 32
    # [Description("武具進化")]
    EquipmentEvolution = 33
    # [Description("祈りの泉一括派遣、受け取り")]
    BountyQuestQuick = 34
    # [Description("ギルドレイドの掃討")]
    GuildRaidQuick = 35
    # [Description("ボス/無窮の塔掃討")]
    BossBattleQuick = 36
    # [Description("武具ガチャ")]
    GachaEquipment = 37
    # [Description("武具研磨")]
    EquipmentRefine = 38
    # [Description("フレンド")]
    Friend = 39
    # [Description("マイページ")]
    FooterMyPage = 40
    # [Description("キャラ")]
    FooterCharacter = 41
    # [Description("アイテムボックス")]
    FooterItemBox = 42
    # [Description("試練")]
    FooterCompetition = 43
    # [Description("ガチャ")]
    FooterGacha = 44
    # [Description("チャット")]
    FooterChat = 45
    # [Description("ギルド")]
    FooterGuild = 46
    # [Description("魔水晶（ショップ）&キャラ詳細_専用武器交換")]
    ShopMagicCrystal = 47
    # [Description("聖遺物（ショップ）")]
    ShopRelics = 48
    # [Description("スフィア（ショップ）")]
    ShopSphere = 49
    # [Description("イベント（ショップ）")]
    ShopEventExchange = 50
    # [Description("グランドバトル（ショップ）")]
    ShopGrandBattle = 51
    # [Description("時空の洞窟スキップ")]
    DungeonBattleSkip = 52
    # [Description("武具一括研磨")]
    EquipmentBulkRefine = 53
    # [Description("レベルリンク")]
    LevelLink = 80
    # [Description("チュートリアルスキップ")]
    SkipTutorial = 100
    # [Description("月間ログインボーナス")]
    MonthlyLoginBonus = 120
    # [Description("期間限定ログインボーナス")]
    LimitedLoginBonus = 121
    # [Description("第二大陸")]
    SecondContinent = 140
    # [Description("星の導きガチャ")]
    GachaStarsGuidance = 160
    # [Description("楽曲再生")]
    MusicPlayer = 180
    # [Description("フレンドコード")]
    FriendCode = 200
    # [Description("ランキング到達報酬")]
    AchieveRanking = 220
    # [Description("貢献メダル達成報酬の一括受け取り説明テキスト")]
    ReceiveAllActivityMedalRewardText = 240
    # [Description("貢献メダル達成報酬の一括受け取り")]
    ReceiveAllActivityMedalReward = 241
    # [Description("ゴールド交換")]
    GoldExchange = 260
    # [Description("星導交換所")]
    StarsGuidanceTradeShop = 280
    # [Description("神装強化(一括選択機能)")]
    BulkEquipmentAscend = 300
    # [Description("週間トピックス")]
    WeeklyTopics = 320
    # [Description("ラッキーチャンス")]
    LuckyChance = 340
    # [Description("人気投票")]
    PopularityVote = 360
    # [Description("武具一括進化")]
    BulkEquipmentEvolution = 380
    # [Description("進化解放")]
    RankRelease = 400
    # [Description("一括進化の優先設定")]
    RankUpPrioritySetting = 420
    # [Description("スフィア装着(一括装着カスタム)")]
    BulkSphereSet = 440
    # [Description("イベントポータル")]
    EventPortal = 460
    # [Description("アイテムボックス 消費タブ一括使用")]
    BulkUseItem = 480
    # [Description("模擬戦")]
    FriendBattle = 490
    # [Description("書庫整理")]
    BookSort = 500
    # [Description("武具固定")]
    LockEquipment = 1000
    # [Description("武具固定(ギルドバトル用)")]
    LockEquipmentGuildBattle = 1001

class MonologueTextType(_Enum):
    None_ = 0
    SongLyrics = 1
    Monologue = 2

# [MessagePackObject(True)]
_MonologueTextType = MonologueTextType
@_dataclass(slots=True)
class MonologueSettingData():
    # [Description("歌詞開始時間（秒）")]
    # [PropertyOrder(1)]
    SongLyricsStartTime: float = 0.0
    # [Description("歌詞終了時間（秒）")]
    # [PropertyOrder(2)]
    SongLyricsEndTime: float = 0.0
    # [Description("歌詞テキストキー")]
    # [PropertyOrder(3)]
    SongLyricsKey: str = ""
    # [Description("朗読テキストタイプ")]
    # [PropertyOrder(4)]
    MonologueTextType: _MonologueTextType = _field(default_factory=lambda: _MonologueTextType())

class MonologueBgmType(_Enum):
    Lament = 0
    LamentAndVoice = 1

# [Description("日別ログイン報酬情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class LoginDailyRewardInfo():
    # [Description("日数")]
    # [PropertyOrder(1)]
    Day: int = 0
    # [Description("日別ログイン報酬")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    RewardItem: UserItem = _field(default_factory=lambda: UserItem())

# [Description("合計ログイン報酬情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class LoginCountRewardInfo():
    # [Description("合計ログイン日数")]
    # [PropertyOrder(1)]
    DayCount: int = 0
    # [Description("合計ログイン報酬リスト")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    RewardItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    # [Description("画像パス")]
    # [PropertyOrder(3)]
    ImagePath: str = ""
    # [Description("画像X座標")]
    # [PropertyOrder(4)]
    PositionX: int = 0

# [Description("コンテンツ開放タイプ")]
class OpenContentType(_Enum):
    # [Description("ランクアップ")]
    RankUp = 0
    # [Description("クエストクリア")]
    QuestClear = 1
    # [Description("パーティレベル")]
    PartyLevel = 2

# [Description("パネル図鑑のタブタイプ")]
class PanelTabType(_Enum):
    # [Description("イベント")]
    Event = 1
    # [Description("タイトル")]
    Title = 2

# [Description("ビンゴ種別")]
class BingoType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("上段")]
    UpperRow = 1
    # [Description("中段")]
    CenterRow = 2
    # [Description("下段")]
    LowerRow = 3
    # [Description("左列")]
    LeftColumn = 4
    # [Description("中列")]
    CenterColumn = 5
    # [Description("右列")]
    RightColumn = 6

# [Description("ビンゴ報酬情報")]
# [MessagePackObject(True)]
_BingoType = BingoType
@_dataclass(slots=True)
class BingoRewardInfo():
    # [Description("ビンゴ種別")]
    BingoType: _BingoType = _field(default_factory=lambda: _BingoType())
    # [Description("報酬アイテムリスト")]
    # [Nest(True, 2)]
    RewardItemList: list[UserItem] = _field(default_factory=list["UserItem"])

# [Description("パネルミッションのシート情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class PanelMissionSheetInfo():
    # [Description("ビンゴ報酬情報リスト")]
    # [Nest(True, 1)]
    BingoRewardInfoList: list[BingoRewardInfo] = _field(default_factory=list["BingoRewardInfo"])
    # [Description("対象ミッションIDリスト")]
    MissionIdList: list[int] = _field(default_factory=list["int"])
    # [Description("パネル図鑑MBのID")]
    PanelMBId: int = 0
    # [Description("シート番号")]
    SheetNo: int = 0
    # [Description("X座標")]
    X: float = 0.0
    # [Description("Y座標")]
    Y: float = 0.0

# [Description("パッシブスキルトリガー")]
class PassiveTrigger(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("ターン開始時")]
    TurnStart = 1
    # [Description("ターン終了時")]
    TurnEnd = 2
    # [Description("計算前パッシブ")]
    BeforeCalculation = 3
    # [Description("被致命的ダメージ時")]
    InstantDeathDamage = 5
    # [Description("自分死亡時")]
    SelfDead = 6
    # [Description("第三者味方死亡時")]
    AllyDead = 7
    # [Description("被攻撃時")]
    ReceiveDamage = 8
    # [Description("攻撃時")]
    GiveDamage = 9
    # [Description("第三者の攻撃時、味方の被攻撃時")]
    AllyReceiveDamage = 10
    # [Description("被デバフ時")]
    ReceiveDebuff = 11
    # [Description("デバフ時")]
    GiveDeBuff = 12
    # [Description("第三者のデバフ時")]
    AllyReceiveDeBuff = 13
    # [Description("回復時")]
    GiveHeal = 14
    # [Description("第三者の回復時")]
    AllyReceiveHeal = 15
    # [Description("与バフ時")]
    GiveBuff = 16
    # [Description("自身以外の味方の与バフ時")]
    AllyGiveBuff = 17
    # [Description("敵復活時")]
    EnemyRecovery = 18
    # [Description("自分復活時")]
    SelfRecovery = 19
    # [Description("第三者敵死亡時パッシブ")]
    OtherEnemyDead = 20
    # [Description("敵死亡時")]
    EnemyDead = 21
    # [Description("第三者味方の攻撃時")]
    AllyGiveDamage = 22
    # [Description("第三者敵の与回復時")]
    EnemyReceiveHeal = 23
    # [Description("被バフ時")]
    ReceiveBuff = 24
    # [Description("敵の与バフ時")]
    EnemyGiveBuff = 25
    # [Description("戦闘開始時")]
    BattleStart = 26
    # [Description("戦闘終了時")]
    BattleEnd = 27
    # [Description("ターン開始時(行動順決定前)")]
    TurnStartBeforeSpeedCheck = 28
    # [Description("被攻撃時（命中or回避）")]
    TargetAttack = 29
    # [Description("被回復時")]
    ReceiveHeal = 30
    # [Description("被連携ダメージ時")]
    ReceiveResonanceDamage = 31
    # [Description("行動開始時")]
    ActionStart = 32
    # [Description("行動終了時")]
    ActionEnd = 33
    # [Description("被自傷ダメージ時")]
    SelfInjury = 34
    # [Description("自分以外の味方の被自傷ダメージ時")]
    AllySelfInjury = 35
    # [Description("被行動阻害時")]
    ReceiveConfuseActionDebuff = 36
    # [Description("与行動阻害時")]
    GiveConfuseActionDebuff = 37
    # [Description("第三者味方の被行動阻害時")]
    AllyReceiveConfuseActionDebuff = 38
    # [Description("ターン開始時B")]
    TurnStartBType = 39
    # [Description("被バフ解除時")]
    ReceiveRemoveBuff = 40
    # [Description("被ダメージ量判定(自分の情報だけ参照)")]
    CheckReceiveDamageSelf = 41
    # [Description("被ダメージ量判定")]
    CheckReceiveDamage = 42
    # [Description("被持続ダメージ量判定(P41)時パッシブトリガー")]
    NextCheckReceiveDamageSelf = 43
    # [Description("被ダメージ量判定")]
    NextCheckReceiveDamage = 44
    # [Description("敵死亡時（条件なし）")]
    AlwaysEnemyDead = 45
    # [Description("被致命的ダメージ時回復")]
    RecoveryFromInstantDeathDamage = 52
    # [Description("特殊ダメージ死亡(毒、共鳴など)")]
    SpecialDamageDead = 62

# [MessagePackObject(True)]
_PassiveTrigger = PassiveTrigger
@_dataclass(slots=True)
class PassiveSubSetSkillInfo():
    # [Description("同じパッシブスキルのクールタイムグループ")]
    PassiveGroupId: int = 0
    # [Description("パッシブトリガー")]
    PassiveTrigger: _PassiveTrigger = _field(default_factory=lambda: _PassiveTrigger())
    # [Description("スキルクールタイム(MB : 初期スキルクールタイム)")]
    SkillCoolTime: int = 0
    # [Description("スキルMAXクールタイム")]
    SkillMaxCoolTime: int = 0
    # [Description("サブセットスキルId")]
    SubSetSkillId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class PassiveSkillInfo():
    # [Description("加護ID")]
    BlessingItemId: int = 0
    # [Description("キャラクターレベル制限")]
    CharacterLevel: int = 0
    # [Description("スキル説明文キー")]
    DescriptionKey: str = ""
    # [Description("専属武具レアリティ")]
    EquipmentRarityFlags: _Flags[_EquipmentRarityFlags] = _field(default_factory=lambda: _Flags["_EquipmentRarityFlags"]([]))
    # [Description("優先順位")]
    OrderNumber: int = 0
    # [Description("パッシブサブセット情報")]
    # [Nest(True, 2)]
    PassiveSubSetSkillInfos: list[PassiveSubSetSkillInfo] = _field(default_factory=list["PassiveSubSetSkillInfo"])

# [Description("PatternSettingタイプ")]
class PatternSettingType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("マイページバナーの外部Webサイトリンク")]
    MyPageBannerOuterWebSite = 1
    # [Description("ミッションの表示優先度")]
    MissionDisplayOrder = 2
    # [Description("ミッションのガイド表示優先度")]
    MissionGuideDisplayOrder = 3
    # [Description("ゲリラパックの報酬内容")]
    GuerrillaPackRewardItem = 4
    # [Description("ダイナミックリンクによるワールド誘導")]
    InviteWorldByDynamicLink = 5
    # [Description("初課金ボーナスのダイヤ購入ボタンの遷移先")]
    FirstChargeBonusButton = 6
    # [Description("一週間限定パックの購入期限プッシュ通知")]
    OneWeekLimitedPackPushNotification = 7

# [Description("発表タイプ")]
class PopularityPresentationVoteType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("予選中間発表")]
    PreliminaryInterim = 1
    # [Description("予選結果")]
    PreliminaryResult = 2
    # [Description("本選中間発表")]
    FinalInterim = 3
    # [Description("本選結果")]
    FinalResult = 4

# [MessagePackObject(True)]
_PopularityPresentationVoteType = PopularityPresentationVoteType
@_dataclass(slots=True)
class ResultPresentationSetting():
    IsRandomDisplay: bool = False
    PopularityPresentationVoteType: _PopularityPresentationVoteType = _field(default_factory=lambda: _PopularityPresentationVoteType())
    RankingDisplayRange: int = 0
    VoteCountDisplayRange: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class EntryCharacter():
    EntryCharacterId: int = 0
    SubDisplayCharacterIdList: list[int] = _field(default_factory=list["int"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class PopularityVoteReward():
    VoteCount: int = 0
    # [Nest(True, 1)]
    VoteRewardItems: list[UserItem] = _field(default_factory=list["UserItem"])

# [Description("PvPランキング報酬タイプ")]
class PvpRankingRewardType(_Enum):
    # [Description("バトルリーグデイリーランキング報酬")]
    BattleLeagueDailyRankingReward = 0
    # [Description("レジェンドリーグデイリーランキング報酬")]
    LegendLeagueDailyRankingReward = 1
    # [Description("レジェンドリーグシーズンランキング報酬")]
    LegendLeagueSeasonRankingReward = 2
    # [Description("レジェンドリーグアイコンランキング報酬")]
    LegendLeagueIconRankingReward = 3

# [Description("クエスト難易度")]
class QuestDifficultyType(_Enum):
    # [Description("Easy")]
    Easy = 0
    # [Description("Hard")]
    Hard = 1

class SphereType(_Enum):
    EquipmentIcon = 0
    Small = 1
    Medium = 2
    Large = 3

# [Description("アイテムアイコン情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class ItemIconInfo():
    # [Description("アイテムID")]
    # [PropertyOrder(1)]
    ItemId: int = 0
    # [Description("アイテムタイプ")]
    # [PropertyOrder(2)]
    ItemType: _ItemType = _field(default_factory=lambda: _ItemType())

# [Description("累計貢献メダル報酬ボーナス情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class TotalActivityMedalRewardBonus():
    # [Description("累計貢献メダル報酬ID")]
    # [PropertyOrder(1)]
    TotalActivityMedalRewardId: int = 0
    # [Description("ボーナス報酬リスト")]
    # [Nest(True, 1)]
    # [PropertyOrder(2)]
    BonusRewardList: list[MissionReward] = _field(default_factory=list["MissionReward"])

# [Description("Steam価格表情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class SteamProductPriceInfo():
    # [Description("通貨コード")]
    CurrencyCode: str = ""
    # [Description("表示倍率")]
    Multiple: float = 0.0
    # [Description("価格")]
    ProductPrice: int = 0

# [Description("規約ボタン情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class TermsButtonInfo():
    # [Description("ボタンテキストKey")]
    # [PropertyOrder(1)]
    Name: str = ""
    # [Description("Url")]
    # [PropertyOrder(2)]
    Url: str = ""

# [Description("言語")]
# [Serializable]
class LanguageType(_Enum):
    None_ = 0
    # [Description("日本語")]
    jaJP = 1
    # [Description("英語")]
    enUS = 2
    # [Description("韓国語")]
    koKR = 3
    # [Description("中国語(繁体字)")]
    zhTW = 4
    # [Description("フランス語")]
    frFR = 5
    # [Description("中国語(簡体字)")]
    zhCN = 6
    # [Description("スペイン語")]
    esMX = 7
    # [Description("ポルトガル語")]
    ptBR = 8
    # [Description("タイ語")]
    thTH = 9
    # [Description("インドネシア語")]
    idID = 10
    # [Description("ベトナム語")]
    viVN = 11
    # [Description("ロシア語")]
    ruRU = 12
    # [Description("ドイツ語")]
    deDE = 13

class ITextResource(_Protocol):
    StringKey: str
    Text: str

# [Description("時差グループ")]
class TimeServerType(_Enum):
    None_ = 0
    # [Description("日本")]
    JP = 1
    # [Description("韓国")]
    KR = 2
    # [Description("アジア")]
    Asia = 3
    # [Description("アメリカ")]
    US = 4
    # [Description("ヨーロッパ")]
    EU = 5
    # [Description("グローバル")]
    Global = 6

# [Description("遷移先")]
class ViewTransitionType(_Enum):
    # [Description("キャラ育成")]
    CharacterTraining = 0
    # [Description("キャラランクアップ")]
    CharacterRankUp = 1
    # [Description("遷移なしの編成ダイアログ")]
    FormationWithoutTransition = 2
    # [Description("放置バトルMAP")]
    Map = 3
    # [Description("ミッション")]
    Mission = 4
    # [Description("ギルドツリー強化ダイアログ")]
    GuildTowerReinforcement = 5

# [Description("バトルタイプ")]
class BattleType(_Enum):
    # [Description("バトルタイプなし")]
    None_ = 0
    # [Description("放置")]
    Auto = 1
    # [Description("ボス戦")]
    Boss = 2
    # [Description("ギルドバトル")]
    GuildBattle = 3
    # [Description("グランドバトル")]
    GrandBattle = 4
    # [Description("バトルリーグ")]
    BattleLeague = 5
    # [Description("レジェンドリーグ")]
    LegendLeague = 6
    # [Description("幻影の神殿")]
    LocalRaid = 7
    # [Description("無窮の塔")]
    TowerBattle = 8
    # [Description("時空の洞窟")]
    DungeonBattle = 9
    # [Description("ギルドレイド")]
    GuildRaid = 11
    # [Description("ギルドツリー")]
    GuildTower = 12
    # [Description("模擬戦")]
    FriendBattle = 13

# [Description("無窮の塔タイプ")]
class TowerType(_Enum):
    None_ = 0
    # [Description("無窮の塔")]
    Infinite = 1
    # [Description("愁（しゅう）")]
    Blue = 2
    # [Description("業（ごう）")]
    Red = 3
    # [Description("心（しん）")]
    Green = 4
    # [Description("渇（かつ）")]
    Yellow = 5

# [Description("定期自動更新タイプ")]
class TradeShopAutoUpdateType(_Enum):
    # [Description("定期自動更新なし")]
    None_ = 0
    # [Description("1日1回、4時に更新")]
    OneDay = 1
    # [Description("1週間に1回、4時に更新")]
    OneWeek = 2
    # [Description("1カ月に1回、4時に更新")]
    OneMonth = 3
    # [Description("1日に複数回、指定時刻に更新")]
    SetTime = 4

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ConsumeItemInfo():
    # [Description("アイテムのID")]
    ItemId: int = 0
    # [Description("アイテムの種類")]
    ItemType: _ItemType = _field(default_factory=lambda: _ItemType())

# [Description("交換所種類")]
class TradeShopType(_Enum):
    # [Description("一般")]
    Normal = 0
    # [Description("通常武具合成")]
    NormalEquipmentComposite = 1
    # [Description("パターン2")]
    Fix = 2
    # [Description("店舗")]
    Store = 3
    # [Description("スフィア")]
    Sphere = 4
    # [Description("週間トピックス無料商品")]
    WeeklyTopicsFreeProduct = 6
    # [Description("週間トピックス有料商品")]
    WeeklyTopicsPaidProduct = 7
    # [Description("専用武器")]
    ExclusiveEquipment = 8

# [Description("神器タイプ")]
class SacredTreasureType(_Enum):
    # [Description("神器ではない")]
    None_ = 0
    # [Description("魔装")]
    Matchless = 1
    # [Description("聖装")]
    Legend = 2
    # [Description("双ステータス神器")]
    DualStatus = 3

# [Description("宝箱固定アイテム")]
# [MessagePackObject(True)]
_SacredTreasureType = SacredTreasureType
@_dataclass(slots=True)
class TreasureChestFixItem():
    # [Description("アイテム")]
    # [Nest(True, 2)]
    FixItem: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("神器タイプ")]
    SacredTreasureType: _SacredTreasureType = _field(default_factory=lambda: _SacredTreasureType())

# [Description("宝箱選択アイテム")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class TreasureChestSelectItem():
    # [Description("神器タイプ")]
    SacredTreasureType: _SacredTreasureType = _field(default_factory=lambda: _SacredTreasureType())
    # [Description("アイテム")]
    # [Nest(True, 1)]
    SelectItem: UserItem = _field(default_factory=lambda: UserItem())

class TreasureChestItemListType(_Enum):
    None_ = 0
    TreasureChestItemList = 1
    GachaLotteryItemList = 2
    SelectItemList = 3

# [Description("宝箱抽選タイプ")]
class TreasureChestLotteryType(_Enum):
    # [Description("抽選で1つ")]
    Random = 0
    # [Description("固定で1つ")]
    Static = 1
    # [Description("キャラクター1つを選択")]
    SelectCharacter = 2
    # [Description("アイテム1つを選択")]
    SelectItem = 3
    # [Description("選択した中から抽選")]
    SelectRandom = 4
    # [Description("複数の固定アイテム")]
    Fix = 5
    # [Description("抽選アイテムと固定アイテム")]
    RandomFix = 6

# [Description("画像位置フォーマット")]
class ImagePositionFormatType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("時空の洞窟イベント")]
    DungeonBattleEvent = 1
    # [Description("神殿イベント")]
    LocalRaidEvent = 2
    # [Description("ギルドレイドイベント")]
    GuildRaidEvent = 3

# [Description("ページ情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class TutorialDescriptionPageInfo():
    # [Description("本文")]
    # [PropertyOrder(1)]
    MainTextKey: str = ""
    # [Description("画像ID")]
    # [PropertyOrder(2)]
    ImageId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class VipGiftInfo():
    # [Description("獲得アイテムリスト")]
    # [Nest(True, 1)]
    GetItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    # [Description("必要アイテムリスト")]
    # [Nest(True, 1)]
    RequiredItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    # [Description("ギフトID")]
    VipGiftId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class StartEndTime():
    # [DateTimeString]
    # [Description("開始日時")]
    # [PropertyOrder(1)]
    StartTime: str = ""
    # [DateTimeString]
    # [Description("終了日時")]
    # [PropertyOrder(2)]
    EndTime: str = ""

@_dataclass(slots=True)
class ApiRequestBase():
    pass

@_dataclass(slots=True)
class ApiResponseBase():
    pass

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserCharacterInfo():
    CharacterId: int = 0
    Exp: int = 0
    Guid: str = ""
    IsLocked: bool = False
    Level: int = 0
    PlayerId: int = 0
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))
    SubLevel: int = 0

# [Description("フレンド状態種別")]
class FriendStatusType(_Enum):
    # [Description("初期値")]
    None_ = 0
    # [Description("フレンドでない")]
    Stranger = 1
    # [Description("フレンド")]
    Friend = 2
    # [Description("フレンド申請中")]
    Applying = 3
    # [Description("承認待ち")]
    Receive = 4

class IComparable(_Protocol):
    pass

class IFormattable(_Protocol):
    pass

# [IsReadOnly]
# [Serializable]
@_dataclass(slots=True)
class TimeSpan():
    Days: int = 0
    Hours: int = 0
    MaxValue: _timedelta = _field(default_factory=lambda: _timedelta())
    MinValue: _timedelta = _field(default_factory=lambda: _timedelta())
    Minutes: int = 0
    Seconds: int = 0
    Ticks: int = 0
    TotalDays: float = 0.0
    TotalHours: float = 0.0
    TotalMilliseconds: float = 0.0
    TotalMinutes: float = 0.0
    TotalSeconds: float = 0.0
    Zero: _timedelta = _field(default_factory=lambda: _timedelta())

class PlayerGuildPositionType(_Enum):
    None_ = 0
    # [Description("マスター")]
    Leader = 1
    # [Description("ベテラン")]
    Veteran = 2
    # [Description("メンバー")]
    Member = 3
    # [Description("サブマスター")]
    SubLeader = 4
    # [Description("指揮官")]
    Commander = 5

class PlayerRecruitType(_Enum):
    # [Description("希望しない")]
    None_ = 0
    # [Description("希望する")]
    Desire = 1
    # [Description("興味がある")]
    Interested = 2

class PlayerCommunicationPolicyType(_Enum):
    # [Description("指定なし")]
    None_ = 0
    # [Description("無言")]
    Silence = 1
    # [Description("たまに雑談")]
    SmallTalk = 2
    # [Description("おしゃべり")]
    Conversationalist = 3

class PlayerEventPolicyType(_Enum):
    # [Description("指定なし")]
    None_ = 0
    # [Description("マイペース")]
    Freely = 1
    # [Description("毎日参加")]
    Daily = 2
    # [Description("上位を狙う")]
    Seriously = 3

class PlayerGuildBattlePolicyType(_Enum):
    # [Description("指定なし")]
    None_ = 0
    # [Description("リアル優先")]
    Freely = 1
    # [Description("そこそこ貢献")]
    Leisurely = 2
    # [Description("上位を狙う")]
    Seriously = 3

# [MessagePackObject(True)]
_PlayerGuildPositionType = PlayerGuildPositionType
_PlayerRecruitType = PlayerRecruitType
@_dataclass(slots=True)
class PlayerInfo():
    BackgroundCharacterId: int = 0
    BattleLeagueRankingToday: int = 0
    BattlePower: int = 0
    ChatBalloonItemId: int = 0
    Comment: str = ""
    CommunicationPolicyType: PlayerCommunicationPolicyType = _field(default_factory=lambda: PlayerCommunicationPolicyType())
    CumulativeGuildFame: int = 0
    DeckUserCharacterInfoList: list[UserCharacterInfo] = _field(default_factory=list["UserCharacterInfo"])
    EventPolicyType: PlayerEventPolicyType = _field(default_factory=lambda: PlayerEventPolicyType())
    FriendStatus: FriendStatusType = _field(default_factory=lambda: FriendStatusType())
    GuildBattlePolicyType: PlayerGuildBattlePolicyType = _field(default_factory=lambda: PlayerGuildBattlePolicyType())
    GuildId: int = 0
    GuildJoinRequestUtcTimeStamp: int = 0
    GuildJoinTimeStamp: int = 0
    GuildName: str = ""
    GuildPeriodTotalFame: int = 0
    IsAllowedFriendBattle: bool = False
    IsBlock: bool = False
    IsRecruit: bool = False
    LastLoginTime: _timedelta = _field(default_factory=lambda: _timedelta())
    LatestQuestId: int = 0
    LatestTowerBattleQuestId: int = 0
    LegendLeaguePointToday: int = 0
    LegendLeagueRankingToday: int = 0
    LocalRaidBattlePower: int = 0
    MainCharacterIconId: int = 0
    NpcNameKey: str = ""
    PlayerGuildPositionType: _PlayerGuildPositionType = _field(default_factory=lambda: _PlayerGuildPositionType())
    PlayerId: int = 0
    PlayerLevel: int = 0
    PlayerName: str = ""
    PlayerRecruitType: _PlayerRecruitType = _field(default_factory=lambda: _PlayerRecruitType())
    PrevLegendLeagueClass: LegendLeagueClassType = _field(default_factory=lambda: LegendLeagueClassType())
    RecruitGuildMemberTimeStamp: int = 0

class IReadOnlyEquipment(_Protocol):
    # [Description("付与パラメータ(技力)")]
    AdditionalParameterEnergy: int
    # [Description("付与パラメータ(体力)")]
    AdditionalParameterHealth: int
    # [Description("付与パラメータ(知力)")]
    AdditionalParameterIntelligence: int
    # [Description("付与パラメータ(筋力)")]
    AdditionalParameterMuscle: int
    # [Description("武具ID")]
    EquipmentId: int
    # [Description("固有ID")]
    Guid: str
    # [Description("聖装経験値")]
    LegendSacredTreasureExp: int
    # [Description("聖装レベル")]
    LegendSacredTreasureLv: int
    # [Description("魔装経験値")]
    MatchlessSacredTreasureExp: int
    # [Description("魔装レベル")]
    MatchlessSacredTreasureLv: int
    # [Description("強化レベル")]
    ReinforcementLv: int
    # [Description("宝石ID1")]
    SphereId1: int
    # [Description("宝石ID2")]
    SphereId2: int
    # [Description("宝石ID3")]
    SphereId3: int
    # [Description("宝石ID4")]
    SphereId4: int
    # [Description("宝石スロット解放数")]
    SphereUnlockedCount: int

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserEquipmentDtoInfo():
    # [Description("付与パラメータ(敏捷)")]
    AdditionalParameterEnergy: int = 0
    # [Description("付与パラメータ(体力)")]
    AdditionalParameterHealth: int = 0
    # [Description("付与パラメータ(知力)")]
    AdditionalParameterIntelligence: int = 0
    # [Description("付与パラメータ(筋力)")]
    AdditionalParameterMuscle: int = 0
    # [Description("キャラクター固有ID")]
    CharacterGuid: str = ""
    # [Description("作成時刻")]
    CreateAt: int = 0
    # [Description("武具ID")]
    EquipmentId: int = 0
    # [Description("固有ID")]
    Guid: str = ""
    # [Description("聖装経験値")]
    LegendSacredTreasureExp: int = 0
    # [Description("聖装レベル")]
    LegendSacredTreasureLv: int = 0
    # [Description("魔装経験値")]
    MatchlessSacredTreasureExp: int = 0
    # [Description("魔装レベル")]
    MatchlessSacredTreasureLv: int = 0
    # [Description("プレイヤーID")]
    PlayerId: int = 0
    # [Description("強化レベル")]
    ReinforcementLv: int = 0
    # [Description("宝石ID1")]
    SphereId1: int = 0
    # [Description("宝石ID2")]
    SphereId2: int = 0
    # [Description("宝石ID3")]
    SphereId3: int = 0
    # [Description("宝石ID4")]
    SphereId4: int = 0
    # [Description("宝石スロット解放数")]
    SphereUnlockedCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class CharacterDetailInfo():
    BaseParameter: _BaseParameter = _field(default_factory=lambda: _BaseParameter())
    BattleParameter: _BattleParameter = _field(default_factory=lambda: _BattleParameter())
    BattlePower: int = 0
    Level: int = 0
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))
    UserEquipmentDtoInfos: list[UserEquipmentDtoInfo] = _field(default_factory=list["UserEquipmentDtoInfo"])

# [MessagePackObject(True)]
_CharacterDetailInfo = CharacterDetailInfo
_PlayerInfo = PlayerInfo
@_dataclass(slots=True)
class WeeklyTopicsCharacterRankingData():
    CharacterDetailInfo: _CharacterDetailInfo = _field(default_factory=lambda: _CharacterDetailInfo())
    CharacterId: int = 0
    PlayerInfo: _PlayerInfo = _field(default_factory=lambda: _PlayerInfo())
    Rank: int = 0

class BattleFieldCharacterGroupType(_Enum):
    # [Description("攻撃側。バトル画面の左側")]
    Attacker = 0
    # [Description("防衛側。バトル画面の右側")]
    Receiver = 1

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BattleEndInfo():
    EndTurn: int = 0
    IsOutOfTurn: bool = False
    WinGroupType: BattleFieldCharacterGroupType = _field(default_factory=lambda: BattleFieldCharacterGroupType())
    WinPlayerIdSet: set[int] = _field(default_factory=set["int"])

class UnitType(_Enum):
    # [Description("キャラクター")]
    Character = 0
    # [Description("放置バトルの敵")]
    AutoBattleEnemy = 1
    # [Description("時空の洞窟の敵")]
    DungeonBattleEnemy = 2
    # [Description("ギルドレイドボス")]
    GuildRaidBoss = 3
    # [Description("ボスバトルの敵")]
    BossBattleEnemy = 4
    # [Description("無窮の塔の敵")]
    TowerBattleEnemy = 5
    # [Description("幻影の神殿の敵")]
    LocalRaidEnemy = 6
    # [Description("ギルドツリーの敵")]
    GuildTowerEnemy = 7

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BattlePosition():
    DeckIndex: int = 0
    GroupType: BattleFieldCharacterGroupType = _field(default_factory=lambda: BattleFieldCharacterGroupType())
    IsAttacker: bool = False

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BattleActiveSkill():
    ActiveSkillId: int = 0
    SkillCoolTime: int = 0
    SkillMaxCoolTime: int = 0
    SkillOrderNumber: int = 0
    SubSetSkillIds: list[int] = _field(default_factory=list["int"])

class PassiveSkillGrantorType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("自分")]
    Self = 1
    # [Description("加護")]
    Relic = 2
    # [Description("ギルドバトル用効果")]
    GuildBattle = 3
    # [Description("チーム用")]
    Team = 4

# [MessagePackObject(True)]
_PassiveSkillGrantorType = PassiveSkillGrantorType
@_dataclass(slots=True)
class BattlePassiveSkill():
    PassiveSkillGrantorType: _PassiveSkillGrantorType = _field(default_factory=lambda: _PassiveSkillGrantorType())
    PassiveSkillId: int = 0
    PassiveSubSetSkillInfos: list[PassiveSubSetSkillInfo] = _field(default_factory=list["PassiveSubSetSkillInfo"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class DungeonBattleInfo():
    DungeonBattleVictoryCount: int = 0
    IsDungeonBattleHardMode: bool = False
    UseDungeonRecoveryItemCount: int = 0
    UseDungeonRelicCountDict: dict[int, int] = _field(default_factory=dict["int", "int"])

# [MessagePackObject(True)]
_DungeonBattleInfo = DungeonBattleInfo
_UnitType = UnitType
@_dataclass(slots=True)
class BattleFieldCharacter():
    ActiveSkills: list[BattleActiveSkill] = _field(default_factory=list["BattleActiveSkill"])
    BattleParameterWithoutBonus: BattleParameter = _field(default_factory=lambda: BattleParameter())
    CharacterGuid: str = ""
    CharacterLevel: int = 0
    CharacterRarityFlags: _Flags[_CharacterRarityFlags] = _field(default_factory=lambda: _Flags["_CharacterRarityFlags"]([]))
    DefaultBaseParameter: BaseParameter = _field(default_factory=lambda: BaseParameter())
    DefaultBattleParameter: BattleParameter = _field(default_factory=lambda: BattleParameter())
    DefaultPosition: BattlePosition = _field(default_factory=lambda: BattlePosition())
    DungeonBattleInfo: _DungeonBattleInfo = _field(default_factory=lambda: _DungeonBattleInfo())
    ElementType: _ElementType = _field(default_factory=lambda: _ElementType())
    EquipmentDtoInfos: list[UserEquipmentDtoInfo] = _field(default_factory=list["UserEquipmentDtoInfo"])
    EquipmentMaxLevel: int = 0
    ExclusiveEquipmentRarityFlags: _Flags[EquipmentRarityFlags] = _field(default_factory=lambda: _Flags["EquipmentRarityFlags"]([]))
    Guid: int = 0
    JobFlags: _Flags[_JobFlags] = _field(default_factory=lambda: _Flags["_JobFlags"]([]))
    NormalSkill: BattleActiveSkill = _field(default_factory=lambda: BattleActiveSkill())
    OnStartHP: int = 0
    OwnerPlayerId: int = 0
    PassiveSkills: list[BattlePassiveSkill] = _field(default_factory=list["BattlePassiveSkill"])
    PlayerName: str = ""
    PlayerRankHitBonus: int = 0
    UnitId: int = 0
    UnitType: _UnitType = _field(default_factory=lambda: _UnitType())

# [MessagePackObject(True)]
_BattleType = BattleType
@_dataclass(slots=True)
class BattleField():
    AttackTeamPassiveSkillIds: list[int] = _field(default_factory=list["int"])
    AttackTeamTotalKillCount: int = 0
    BattleType: _BattleType = _field(default_factory=lambda: _BattleType())
    Characters: list[BattleFieldCharacter] = _field(default_factory=list["BattleFieldCharacter"])
    # [Obsolete("TODO 2019-12-05 takeda 使わないなら削除、使うならLinq排除")]
    JoinPlayerIds: list[int] = _field(default_factory=list["int"])
    ReceiveTeamPassiveSkillIds: list[int] = _field(default_factory=list["int"])
    ReceiveTeamTotalKillCount: int = 0

# [Description("サブスキルリザルトの種類")]
class SubSkillResultType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("ダメージ")]
    Damage = 1
    # [Description("効果")]
    Effect = 2
    # [Description("パッシブ")]
    Passive = 3
    # [Description("臨時処理")]
    Temp = 4

# [Description("スキル演出タイプ")]
class SkillDisplayType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("回復")]
    Heal = 1
    # [Description("物理攻撃")]
    PhysicalAttack = 2
    # [Description("魔法攻撃")]
    MagicAttack = 3
    # [Description("物理 (直接攻撃)")]
    PhysicalDirectDamage = 4
    # [Description("魔法 (直接攻撃)")]
    MagicDirectDamage = 5
    # [Description("Hp吸収")]
    HpDrain = 6
    # [Description("バフ")]
    Buff = 7
    # [Description("デバフ")]
    DeBuff = 8
    # [Description("物理攻撃カウンタ")]
    PhysicalCounterAttack = 9
    # [Description("魔法攻撃カウンタ")]
    MagicCounterAttack = 10
    # [Description("物理攻撃ダメージ連携")]
    PhysicalResonanceAttack = 11
    # [Description("魔法攻撃ダメージ連携")]
    MagicResonanceAttack = 12
    # [Description("効果削除")]
    RemoveEffect = 13
    # [Description("即時発動")]
    BurstEffect = 14
    # [Description("自傷ダメージ")]
    SelfInjuryDamage = 15
    # [Description("復活")]
    Resurrection = 20

# [Description("スキルカテゴリー")]
class SkillCategory(_Enum):
    # [Description("回復")]
    Heal = 1
    # [Description("バフ")]
    Buff = 2
    # [Description("デバフ")]
    DeBuff = 3
    # [Description("固有バフ")]
    SpecialBuff = 4
    # [Description("固有デバフ")]
    SpecialDeBuff = 5
    # [Description("物理攻撃")]
    PhysicalAttack = 10
    # [Description("魔法攻撃")]
    MagicAttack = 11
    # [Description("物理 (防御無視)")]
    PhysicalNoDefense = 12
    # [Description("魔法 (防御無視)")]
    MagicNoDefense = 13
    # [Description("物理 (直接攻撃)")]
    PhysicalDirectDamage = 14
    # [Description("魔法 (直接攻撃)")]
    MagicDirectDamage = 15
    # [Description("物理 (固定攻撃)")]
    PhysicalFixDamage = 16
    # [Description("魔法 (固定攻撃)")]
    MagicFixDamage = 17
    # [Description("自傷ダメージ")]
    SelfInjuryDamage = 18
    # [Description("復活")]
    Resurrection = 50
    # [Description("ステータス吸収")]
    StatusDrain = 100
    # [Description("印の効果")]
    SkillMark = 200
    # [Description("固有バフ（エフェクトなし）")]
    SpecialBuffNotEffect = 201
    # [Description("固有デバフ（エフェクトなし）")]
    SpecialDeBuffNotEffect = 202
    # [Description("バフ効果削除")]
    RemoveBuffEffect = 500
    # [Description("デバフ効果削除")]
    RemoveDebuffEffect = 501
    # [Description("効果削除(エフェクトなし)")]
    RemoveOtherEffect = 502
    # [Description("バフ移動")]
    BuffTransfer = 600
    # [Description("デバフ移動")]
    DeBuffTransfer = 601
    # [Description("即時発動(バフ用)")]
    BurstBuffEffect = 1000
    # [Description("即時発動(デバフ用)")]
    BurstDeBuffEffect = 1001

# [Description("バフ・デバフ効果グループ種別")]
class EffectGroupType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("スタン")]
    Stun = 1

# [Description("バフ・デバフ効果種別")]
class EffectType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("スピード増加")]
    SpeedUp = 1001
    # [Description("最大HP増加")]
    MaxHpUp = 1002
    # [Description("攻撃力増加")]
    AttackPowerUp = 1003
    # [Description("防御力増加")]
    DefenseUp = 1004
    # [Description("物理ダメージ緩和増加")]
    PhysicalDamageRelaxUp = 1005
    # [Description("魔法ダメージ緩和増加")]
    MagicDamageRelaxUp = 1006
    # [Description("防御貫通力増加")]
    DefensePenetrationUp = 1007
    # [Description("ダメージ強化増加")]
    DamageEnhanceUp = 1008
    # [Description("命中増加")]
    HitUp = 1009
    # [Description("回避増加")]
    AvoidanceUp = 1010
    # [Description("クリティカル増加")]
    CriticalUp = 1011
    # [Description("クリティカル耐性増加")]
    CriticalResistUp = 1012
    # [Description("HP吸収増加")]
    HpDrainUp = 1013
    # [Description("カウンタ増加")]
    DamageReflectUp = 1014
    # [Description("クリダメ強化増加")]
    CriticalDamageEnhanceUp = 1015
    # [Description("物理クリダメ緩和増加")]
    PhysicalCriticalDamageRelaxUp = 1016
    # [Description("魔法クリダメ緩和増加")]
    MagicCriticalDamageRelaxUp = 1017
    # [Description("弱体効果命中増加")]
    DebuffHitUp = 1018
    # [Description("弱体効果耐性増加")]
    DebuffResistUp = 1019
    # [Description("与HP回復量増加")]
    GiveHealRateUp = 1020
    # [Description("被HP回復量増加")]
    ReceiveHealRateUp = 1021
    # [Description("与ダメージ増加")]
    GiveDamageUp = 1022
    # [Description("被ダメージ減少")]
    ReceiveDamageDown = 1023
    # [Description("スキルクールダウン加速")]
    CoolTimeRecoveryUp = 1024
    # [Description("属性ダメージボーナス増加")]
    ElementBonusUp = 1025
    # [Description("与ダメージ基準値増加")]
    GiveDamageStandardUp = 1026
    # [Description("被ダメージ基準値減少")]
    ReceiveDamageStandardDown = 1027
    # [Description("被持続ダメージ減少")]
    ReceiveTransientDamageDown = 1028
    # [Description("命中率増加")]
    HitRateUp = 1500
    # [Description("回避率増加")]
    AvoidanceRateUp = 1501
    # [Description("クリティカル率増加")]
    CriticalRateUp = 1502
    # [Description("クリティカル耐性率増加")]
    CriticalResistRateUp = 1503
    # [Description("弱体効果命中率増加")]
    DebuffHitRateUp = 1504
    # [Description("弱体効果耐性率増加")]
    DebuffResistRateUp = 1505
    # [Description("攻撃力増加(A)")]
    AttackPowerATypeUp = 1610
    # [Description("与ダメージ増加(A)")]
    GiveDamageATypeUp = 1620
    # [Description("被ダメージ減少(A)")]
    ReceiveDamageATypeDown = 1630
    # [Description("ダメージ無効化")]
    DamageGuard = 2001
    # [Description("シールド1")]
    Shield1 = 2002
    # [Description("シールド2")]
    Shield2 = 2003
    # [Description("デバフ無効化")]
    DebuffGuard = 2004
    # [Description("行動阻害無効化")]
    ConfuseActionDebuffGuard = 2005
    # [Description("挑発")]
    Taunt = 2006
    # [Description("潜伏")]
    Stealth = 2007
    # [Description("除外")]
    NonTarget = 2008
    # [Description("デバフ付与")]
    GiveDebuff = 2009
    # [Description("通常攻撃強化")]
    NormalSkillEnhance = 2011
    # [Description("毎ターン回復")]
    HealOverTime = 2012
    # [Description("必ず回避")]
    NonHit = 2013
    # [Description("不死身")]
    Immortal = 2014
    # [Description("印")]
    SkillMark = 2015
    # [Description("攻撃ダメージ遮断")]
    DamageBlock = 2016
    # [Description("持続ダメージ遮断")]
    TransientDamageBlock = 2017
    # [Description("バフカバー")]
    BuffCover = 2018
    # [Description("スキル1強化")]
    ActiveSkill1Enhance = 2100
    # [Description("スキル2強化")]
    ActiveSkill2Enhance = 2101
    # [Description("カウンタ変更11")]
    DamageReflectEnhance11 = 2111
    # [Description("カウンタ変更12")]
    DamageReflectEnhance12 = 2112
    # [Description("カウンタ変更13")]
    DamageReflectEnhance13 = 2113
    # [Description("カウンタ変更14")]
    DamageReflectEnhance14 = 2114
    # [Description("カウンタ変更15")]
    DamageReflectEnhance15 = 2115
    # [Description("カウンタ変更16")]
    DamageReflectEnhance16 = 2116
    # [Description("カウンタ変更17")]
    DamageReflectEnhance17 = 2117
    # [Description("カウンタ変更18")]
    DamageReflectEnhance18 = 2118
    # [Description("カウンタ変更21")]
    DamageReflectEnhance21 = 2121
    # [Description("カウンタ変更22")]
    DamageReflectEnhance22 = 2122
    # [Description("カウンタ変更23")]
    DamageReflectEnhance23 = 2123
    # [Description("カウンタ変更24")]
    DamageReflectEnhance24 = 2124
    # [Description("カウンタ変更25")]
    DamageReflectEnhance25 = 2125
    # [Description("カウンタ変更26")]
    DamageReflectEnhance26 = 2126
    # [Description("カウンタ変更27")]
    DamageReflectEnhance27 = 2127
    # [Description("カウンタ変更28")]
    DamageReflectEnhance28 = 2128
    # [Description("カウンタ変更31")]
    DamageReflectEnhance31 = 2131
    # [Description("カウンタ変更32")]
    DamageReflectEnhance32 = 2132
    # [Description("カウンタ変更33")]
    DamageReflectEnhance33 = 2133
    # [Description("カウンタ変更34")]
    DamageReflectEnhance34 = 2134
    # [Description("カウンタ変更35")]
    DamageReflectEnhance35 = 2135
    # [Description("カウンタ変更36")]
    DamageReflectEnhance36 = 2136
    # [Description("カウンタ変更37")]
    DamageReflectEnhance37 = 2137
    # [Description("カウンタ変更38")]
    DamageReflectEnhance38 = 2138
    # [Description("全てのスキルのクールタイムを回復")]
    AllSkillCoolTimeRecovery = 3001
    # [Description("スキル1のクールタイムを回復")]
    Skill1CoolTimeRecovery = 3002
    # [Description("スキル2のクールタイムを回復")]
    Skill2CoolTimeRecovery = 3003
    # [Description("全てのスキルのクールタイムを増加")]
    AllSkillCoolTimeIncrease = 3004
    # [Description("スキル1のクールタイムを増加")]
    Skill1CoolTimeIncrease = 3005
    # [Description("スキル2のクールタイムを増加")]
    Skill2CoolTimeIncrease = 3006
    # [Description("すべてのバフ効果のターンを増やす")]
    ExtendAllBuffTurn = 3041
    # [Description("すべてのデバフ効果のターンを増やす")]
    ExtendAllDeBuffTurn = 3042
    # [Description("すべてのスタン効果のターンを増やす")]
    ExtendStunTurn = 3043
    # [Description("すべてのバフ効果のターンを減らす")]
    ReduceAllBuffTurn = 3044
    # [Description("すべてのデバフ効果のターンを減らす")]
    ReduceAllDeBuffTurn = 3045
    # [Description("指定した効果グループのターン数を増やす")]
    ExtendEffectGroup = 3046
    # [Description("指定した効果グループのターン数を減らす")]
    ReduceEffectGroup = 3047
    # [Description("指定したEffectのスタック数を増やす")]
    IncreaseEffectStack = 3048
    # [Description("指定したEffectのスタック数を減らす")]
    DecreaseEffectStack = 3049
    # [Description("全てのバフを解除")]
    RemoveAllBuff = 3050
    # [Description("全てのデバフを解除")]
    RemoveAllDeBuff = 3060
    # [Description("全ての行動阻害デバフを解除")]
    RemoveAllConfuseActionGroupDebuff = 3061
    # [Description("同じグループ効果を解除")]
    RemoveEffectGroup = 3101
    # [Description("同じタイプの効果をすべて解除")]
    RemoveEffectType = 3102
    # [Description("バフを解除")]
    RemoveBuff = 3103
    # [Description("デバフを解除")]
    RemoveDeBuff = 3104
    # [Description("同じタイプの固有効果をすべて解除")]
    RemoveSpecialEffectType = 3105
    # [Description("アーカイブバフをコピー")]
    CopyArchiveBuff = 3200
    # [Description("アーカイブデバフをコピー")]
    CopyArchiveDeBuff = 3201
    # [Description("ターゲットの全てのバフをコピー")]
    CopyAllBuffTargetToSelf = 3202
    # [Description("自分のすべてのデバフをターゲットにコピー")]
    CopyAllDeBuffSelfToTarget = 3203
    # [Description("敵のバフを奪う")]
    MoveBuffToMeFromEnemy = 3204
    # [Description("自分のデバフを敵に移す")]
    MoveDebuffToEnemyFromMe = 3205
    # [Description("スピード減少")]
    SpeedDown = 5001
    # [Description("最大HP減少")]
    MaxHpDown = 5002
    # [Description("攻撃力減少")]
    AttackPowerDown = 5003
    # [Description("防御力減少")]
    DefenseDown = 5004
    # [Description("物理ダメージ緩和減少")]
    PhysicalDamageRelaxDown = 5005
    # [Description("魔法ダメージ緩和減少")]
    MagicDamageRelaxDown = 5006
    # [Description("防御貫通力減少")]
    DefensePenetrationDown = 5007
    # [Description("ダメージ強化減少")]
    DamageEnhanceDown = 5008
    # [Description("命中減少")]
    HitDown = 5009
    # [Description("回避減少")]
    AvoidanceDown = 5010
    # [Description("クリティカル減少")]
    CriticalDown = 5011
    # [Description("クリティカル耐性減少")]
    CriticalResistDown = 5012
    # [Description("HP吸収減少")]
    HpDrainDown = 5013
    # [Description("カウンタ減少")]
    DamageReflectDown = 5014
    # [Description("クリダメ強化減少")]
    CriticalDamageEnhanceDown = 5015
    # [Description("物理クリダメ緩和減少")]
    PhysicalCriticalDamageRelaxDown = 5016
    # [Description("魔法クリダメ緩和減少")]
    MagicCriticalDamageRelaxDown = 5017
    # [Description("弱体効果命中減少")]
    DebuffHitDown = 5018
    # [Description("弱体効果耐性減少")]
    DebuffResistDown = 5019
    # [Description("与HP回復量減少")]
    GiveHealRateDown = 5020
    # [Description("被HP回復量減少")]
    ReceiveHealRateDown = 5021
    # [Description("与ダメージ減少")]
    GiveDamageDown = 5022
    # [Description("被ダメージ増加")]
    ReceiveDamageUp = 5023
    # [Description("スキルクールダウン減少")]
    CoolTimeRecoveryDown = 5024
    # [Description("与ダメージ基準値減少")]
    GiveDamageStandardDown = 5025
    # [Description("被ダメージ基準値増加")]
    ReceiveDamageStandardUp = 5026
    # [Description("被持続ダメージ増加")]
    ReceiveTransientDamageUp = 5028
    # [Description("命中率減少")]
    HitRateDown = 5500
    # [Description("回避率減少")]
    AvoidanceRateDown = 5501
    # [Description("クリティカル率減少")]
    CriticalRateDown = 5502
    # [Description("クリティカル耐性率減少")]
    CriticalResistRateDown = 5503
    # [Description("弱体効果命中率減少")]
    DebuffHitRateDown = 5504
    # [Description("弱体効果耐性率減少")]
    DebuffResistRateDown = 5505
    # [Description("攻撃力減少(A)")]
    AttackPowerATypeDown = 5610
    # [Description("与ダメージ減少(A)")]
    GiveDamageATypeDown = 5620
    # [Description("被ダメージ増加(A)")]
    ReceiveDamageATypeUp = 5630
    # [Description("スタン")]
    Stun = 6001
    # [Description("混乱")]
    Confuse = 6002
    # [Description("封印")]
    Silence = 6003
    # [Description("固執")]
    Stubborn = 6004
    # [Description("HP回復不可")]
    HpRecoveryForbidden = 7002
    # [Description("バフ獲得不可")]
    BuffForbidden = 7003
    # [Description("回避不可")]
    AvoidanceForbidden = 7004
    # [Description("ロックオン11")]
    LockOnSelf = 7111
    # [Description("ロックオン21")]
    LockOnAllAlly = 7121
    # [Description("ロックオン31")]
    LockOnBlueAlly = 7131
    # [Description("ロックオン32")]
    LockOnRedAlly = 7132
    # [Description("ロックオン33")]
    LockOnGreenAlly = 7133
    # [Description("ロックオン34")]
    LockOnYellowAlly = 7134
    # [Description("ロックオン35")]
    LockOnLightAlly = 7135
    # [Description("ロックオン36")]
    LockOnDarkAlly = 7136
    # [Description("ロックオン41")]
    LockOnWarriorAlly = 7141
    # [Description("ロックオン42")]
    LockOnSniperAlly = 7142
    # [Description("ロックオン43")]
    LockOnSorcererAlly = 7143
    # [Description("ロックオン51")]
    LockOnAttack1Ally = 7151
    # [Description("ロックオン52")]
    LockOnAttack2Ally = 7152
    # [Description("ロックオン53")]
    LockOnAttack3Ally = 7153
    # [Description("毒")]
    Poison = 8001
    # [Description("出血")]
    Bleeding = 8002
    # [Description("浸食")]
    Combustion = 8003
    # [Description("火傷")]
    Burn = 8004
    # [Description("毒（自傷）")]
    SelfInjuryPoison = 8101
    # [Description("出血（自傷）")]
    SelfInjuryBleeding = 8102
    # [Description("浸食（自傷）")]
    SelfInjuryCombustion = 8103
    # [Description("ダメージ連携11")]
    DamageResonanceFromSelfAndDamageReduction = 8111
    # [Description("ダメージ連携21")]
    DamageResonanceFromHighHpEnemy = 8121
    # [Description("ダメージ連携22")]
    DamageResonanceFromLowHpEnemy = 8122
    # [Description("ダメージ連携23")]
    DamageResonanceFromHighDefenseEnemy = 8123
    # [Description("ダメージ連携24")]
    DamageResonanceFromLowDefenseEnemy = 8124
    # [Description("ダメージ連携25")]
    DamageResonanceFromRandomEnemy = 8125
    # [Description("ダメージ連携26")]
    DamageResonanceFromHighBaseMaxHpEnemy = 8126
    # [Description("ダメージ連携27")]
    DamageResonanceFromLowBaseMaxHpEnemy = 8127
    # [Description("ダメージ連携28")]
    DamageResonanceFromHighBaseDefenseEnemy = 8128
    # [Description("ダメージ連携29")]
    DamageResonanceFromLowBaseDefenseEnemy = 8129
    # [Description("ダメージ連携31")]
    DamageResonanceFromAllEnemy = 8131
    # [Description("ダメージ連携41")]
    DamageResonanceFromAllAllyAndDamageReduction = 8141
    # [Description("スピード吸収")]
    SpeedDrain = 9001
    # [Description("攻撃力吸収")]
    AttackPowerDrain = 9003
    # [Description("防御力吸収")]
    DefenseDrain = 9004

# [MessagePackObject(True)]
_EffectType = EffectType
@_dataclass(slots=True)
class Effect():
    EffectCount: int = 0
    EffectMaxCount: int = 0
    EffectSubValue: int = 0
    EffectType: _EffectType = _field(default_factory=lambda: _EffectType())
    EffectValue: int = 0

# [Description("効果削除種別")]
class RemoveEffectType(_Enum):
    # [Description("ターンの終わり")]
    TurnCountEnd = 0
    # [Description("ターンの終わりとダメージを受けたとき")]
    TurnCountEndAndReceiveDamage = 1

# [MessagePackObject(True)]
_EffectGroupType = EffectGroupType
_RemoveEffectType = RemoveEffectType
_SkillCategory = SkillCategory
@_dataclass(slots=True)
class EffectGroup():
    EffectGroupId: int = 0
    EffectGroupType: _EffectGroupType = _field(default_factory=lambda: _EffectGroupType())
    EffectTurn: int = 0
    Effects: list[Effect] = _field(default_factory=list["Effect"])
    GranterGuid: int = 0
    IsExtendEffectTurn: bool = False
    LinkTargetGuid: int = 0
    RemoveEffectType: _RemoveEffectType = _field(default_factory=lambda: _RemoveEffectType())
    SkillCategory: _SkillCategory = _field(default_factory=lambda: _SkillCategory())

# [Description("命中種別")]
class HitType(_Enum):
    # [Description("無視")]
    Ignore = 0
    # [Description("命中")]
    Hit = 1
    # [Description("ミス")]
    Miss = 2
    # [Description("クリティカル")]
    Critical = 3
    # [Description("シールド1基本")]
    Shield1 = 4
    # [Description("シールド1クリティカル")]
    Shield1Critical = 5
    # [Description("シールド2基本")]
    Shield2 = 6
    # [Description("シールド2クリティカル")]
    Shield2Critical = 7
    # [Description("シールド破壊")]
    ShieldBreak = 8
    # [Description("シールド破壊クリティカル")]
    ShieldBreakCritical = 9

# [MessagePackObject(True)]
_HitType = HitType
_SkillDisplayType = SkillDisplayType
_SubSkillResultType = SubSkillResultType
@_dataclass(slots=True)
class SubSkillResult():
    AddEffectGroups: list[EffectGroup] = _field(default_factory=list["EffectGroup"])
    AttackUnitGuid: int = 0
    ChangeHp: int = 0
    HitType: _HitType = _field(default_factory=lambda: _HitType())
    RemoveEffectGroups: list[EffectGroup] = _field(default_factory=list["EffectGroup"])
    SkillDisplayType: _SkillDisplayType = _field(default_factory=lambda: _SkillDisplayType())
    SubSkillIndex: int = 0
    SubSkillResultType: _SubSkillResultType = _field(default_factory=lambda: _SubSkillResultType())
    TargetRemainHp: int = 0
    TargetUnitGuid: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class TransientEffect():
    # [Description("付加されたバフ・デバフの効果")]
    AddEffectGroups: list[EffectGroup] = _field(default_factory=list["EffectGroup"])
    # [Description("効果種別")]
    EffectType: _EffectType = _field(default_factory=lambda: _EffectType())
    # [Description("効果値")]
    EffectValue: int = 0
    # [Description("ヒット種別")]
    HitType: _HitType = _field(default_factory=lambda: _HitType())
    # [Description("削除されたバフ・デバフの効果")]
    RemoveEffectGroups: list[EffectGroup] = _field(default_factory=list["EffectGroup"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class TransientEffectResult():
    RemainHp: int = 0
    TransientEffectSubSkillResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])
    TransientEffects: list[TransientEffect] = _field(default_factory=list["TransientEffect"])

# [Description("サブセットタイプ")]
class SubSetType(_Enum):
    # [Description("Live2D前の演出")]
    Live2DBefore = 0
    # [Description("Live2D基本演出")]
    DefaultLive2D = 1
    # [Description("Live2D後の基本演出")]
    DefaultLive2DAfter = 2
    # [Description("Live2Dのセット内連撃（5回未満）の演出")]
    UnderFiveLive2DInSubSet = 3
    # [Description("Live2D後のセット内連撃（5回未満）の演出")]
    UnderFiveLive2DAfterInSubSet = 4
    # [Description("Live2Dのセット内連撃（5回以上）の演出")]
    AboveFourLive2DInSubSet = 5
    # [Description("Live2D後のセット内連撃（5回以上）の演出")]
    AboveFourLive2DAfterInSubSet = 6
    # [Description("Live2Dのセット外連撃（5回未満）の演出")]
    UnderFiveLive2DOutOfSubSet = 7
    # [Description("Live2D後のセット外連撃（5回未満）の演出")]
    UnderFiveLive2DAfterOutOfSubSet = 8
    # [Description("Live2Dのセット外連撃（5回以上）の演出")]
    AboveFourLive2DOutOfSubSet = 9
    # [Description("Live2D後のセット外連撃（5回以上）の演出")]
    AboveFourLive2DAfterOutOfSubSet = 10

# [MessagePackObject(True)]
_SubSetType = SubSetType
@_dataclass(slots=True)
class SubSetSkillResult():
    DamageSubSkillResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])
    EffectSubSkillResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])
    PassiveSubSkillResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])
    SubSetType: _SubSetType = _field(default_factory=lambda: _SubSetType())
    SubSkillResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])
    TempSubSkillResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])

# [MessagePackObject(True)]
_TransientEffectResult = TransientEffectResult
@_dataclass(slots=True)
class ActiveSkillData():
    ActionEndSubSkillResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])
    ActionStartSubSkillResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])
    ActiveSkillId: int = 0
    FromGuid: int = 0
    IsNonActionStance: bool = False
    SubSetSkillResults: list[SubSetSkillResult] = _field(default_factory=list["SubSetSkillResult"])
    TransientEffectResult: _TransientEffectResult = _field(default_factory=lambda: _TransientEffectResult())
    TurnEndSubSkillResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BattleSubLog():
    ActiveSkillDatas: list[ActiveSkillData] = _field(default_factory=list["ActiveSkillData"])
    Turn: int = 0
    TurnEndPassiveResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])
    TurnStartPassiveResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BattleLog():
    BattleEndPassiveResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])
    BattleStartPassiveResults: list[SubSkillResult] = _field(default_factory=list["SubSkillResult"])
    BattleSubLogs: list[BattleSubLog] = _field(default_factory=list["BattleSubLog"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BattleCharacterReport():
    BattleCharacterGuid: int = 0
    CharacterGuid: str = ""
    CharacterLevel: int = 0
    CharacterRarityFlags: _Flags[_CharacterRarityFlags] = _field(default_factory=lambda: _Flags["_CharacterRarityFlags"]([]))
    DeckIndex: int = 0
    ElementType: _ElementType = _field(default_factory=lambda: _ElementType())
    GroupType: BattleFieldCharacterGroupType = _field(default_factory=lambda: BattleFieldCharacterGroupType())
    Hp: int = 0
    MaxHp: int = 0
    OwnerPlayerId: int = 0
    PlayerName: str = ""
    TotalGiveDamage: int = 0
    TotalHpRecovery: int = 0
    TotalReceiveDamage: int = 0
    UnitId: int = 0
    UnitType: _UnitType = _field(default_factory=lambda: _UnitType())

# [MessagePackObject(True)]
_BattleEndInfo = BattleEndInfo
_BattleField = BattleField
_BattleLog = BattleLog
@_dataclass(slots=True)
class BattleSimulationResult():
    BattleCharacterReports: list[BattleCharacterReport] = _field(default_factory=list["BattleCharacterReport"])
    BattleEndInfo: _BattleEndInfo = _field(default_factory=lambda: _BattleEndInfo())
    BattleField: _BattleField = _field(default_factory=lambda: _BattleField())
    BattleLog: _BattleLog = _field(default_factory=lambda: _BattleLog())
    BattleToken: str = ""

# [MessagePackObject(True)]
@_dataclass(slots=True)
class WeeklyTopicsTopCharacterData():
    BattlePower: int = 0
    CharacterId: int = 0
    ElementType: _ElementType = _field(default_factory=lambda: _ElementType())
    PlayerName: str = ""
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [MessagePackObject(True)]
@_dataclass(slots=True)
class WeeklyTopicsPvpWinContinueCountRankingData():
    PlayerId: int = 0
    PlayerName: str = ""
    Rank: int = 0
    WinContinueCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class WeeklyTopicsCharacterUsageRankingData():
    CharacterId: int = 0
    Rank: int = 0
    UsageRate: float = 0.0

# [Description("週間トピックスの注目バトルのラベル種別")]
class WeeklyTopicsHighlightBattleLabelType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("Pvpで発生した上位同士のバトル")]
    PvpTopRankerBattle = 1
    # [Description("Pvpで発生した長期戦になったバトル")]
    PvpLongBattle = 2
    # [Description("Pvpで発生した格上相手に勝利したバトル")]
    PvpGiantKillingBattle = 3
    # [Description("ワールド内で最初に章をクリア")]
    BossFirstChapterClearInWorld = 4
    # [Description("章をクリア")]
    BossChapterClear = 5
    # [Description("中ボスをクリア")]
    BossHardQuestClear = 6

# [MessagePackObject(True)]
@_dataclass(slots=True)
class PvpRankingPlayerInfo():
    BattlePower: int = 0
    CurrentRank: int = 0
    DefenseBattlePower: int = 0
    PlayerInfo: _PlayerInfo = _field(default_factory=lambda: _PlayerInfo())
    UserCharacterInfoList: list[UserCharacterInfo] = _field(default_factory=list["UserCharacterInfo"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class WeeklyTopicsHighlightPvpBattleData():
    AttackerInfo: PvpRankingPlayerInfo = _field(default_factory=lambda: PvpRankingPlayerInfo())
    AttackerPlayerId: int = 0
    BattleToken: str = ""
    DefenderInfo: PvpRankingPlayerInfo = _field(default_factory=lambda: PvpRankingPlayerInfo())
    DefenderPlayerId: int = 0
    EndTurnCount: int = 0
    LabelType: WeeklyTopicsHighlightBattleLabelType = _field(default_factory=lambda: WeeklyTopicsHighlightBattleLabelType())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class WeeklyTopicsPvpData():
    HighlightPvpBattleDataList: list[WeeklyTopicsHighlightPvpBattleData] = _field(default_factory=list["WeeklyTopicsHighlightPvpBattleData"])
    RankerCharacterUsageRankingList: list[WeeklyTopicsCharacterUsageRankingData] = _field(default_factory=list["WeeklyTopicsCharacterUsageRankingData"])
    TotalCharacterUsageRankingList: list[WeeklyTopicsCharacterUsageRankingData] = _field(default_factory=list["WeeklyTopicsCharacterUsageRankingData"])
    WinContinueCountRankingList: list[WeeklyTopicsPvpWinContinueCountRankingData] = _field(default_factory=list["WeeklyTopicsPvpWinContinueCountRankingData"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BossBattlePlayerInfo():
    BattlePower: int = 0
    PlayerInfo: _PlayerInfo = _field(default_factory=lambda: _PlayerInfo())
    UserCharacterInfoList: list[UserCharacterInfo] = _field(default_factory=list["UserCharacterInfo"])

# [Description("ボス表示情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class BossDisplayInfo():
    # [Description("ボスId(BattleEnemyMB)")]
    BossEnemyId: int = 0
    # [Description("ボス名称")]
    NameKey: str = ""

# [MessagePackObject(True)]
@_dataclass(slots=True)
class WeeklyTopicsHighlightBossBattleData():
    AttackerInfo: BossBattlePlayerInfo = _field(default_factory=lambda: BossBattlePlayerInfo())
    AttackerPlayerId: int = 0
    BattleToken: str = ""
    BossDisplayInfoList: list[BossDisplayInfo] = _field(default_factory=list["BossDisplayInfo"])
    LabelType: WeeklyTopicsHighlightBattleLabelType = _field(default_factory=lambda: WeeklyTopicsHighlightBattleLabelType())
    QuestId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class WeeklyTopicsBossBattleData():
    FrontLineCharacterUsageRankingList: list[WeeklyTopicsCharacterUsageRankingData] = _field(default_factory=list["WeeklyTopicsCharacterUsageRankingData"])
    HighlightBossBattleDataList: list[WeeklyTopicsHighlightBossBattleData] = _field(default_factory=list["WeeklyTopicsHighlightBossBattleData"])
    MinFrontLineChapterId: int = 0
    ReachChapterCount: dict[int, int] = _field(default_factory=dict["int", "int"])
    TotalCharacterUsageRankingList: list[WeeklyTopicsCharacterUsageRankingData] = _field(default_factory=list["WeeklyTopicsCharacterUsageRankingData"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class TradeShopItem():
    # [Description("消費アイテム1")]
    ConsumeItem1: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("消費アイテム2")]
    ConsumeItem2: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("TradeShopDedicatedItemMBのID")]
    DedicatedItemId: int = 0
    # [Description("購入不可フラグ")]
    Disabled: bool = False
    # [Description("終了日時")]
    ExpirationTimeStamp: int = 0
    # [Description("獲得アイテム")]
    GiveItem: UserItem = _field(default_factory=lambda: UserItem())
    # [IgnoreMember]
    IsDedicated: bool = False
    # [Description("交換制限回数(0:無制限s)")]
    LimitTradeCount: int = 0
    # [Description("条件キャラID")]
    RequiredCharacterId: int = 0
    # [Description("神器タイプ")]
    SacredTreasureType: _SacredTreasureType = _field(default_factory=lambda: _SacredTreasureType())
    # [Description("割引率")]
    SalePercent: int = 0
    # [Description("並び順")]
    SortOrder: int = 0
    # [Description("交換回数")]
    TradeCount: int = 0
    # [Description("TradeShopItemMBのId")]
    TradeShopItemId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class WeeklyTopicsShopData():
    ExpirationTimeStamp: int = 0
    TradeShopItemList: list[TradeShopItem] = _field(default_factory=list["TradeShopItem"])

# [Description("アイテム所持上限確認済みクエスト")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class ConfirmedItemQuest():
    # [Description("アイテムタイプ")]
    # [PropertyOrder(1)]
    ItemType: _ItemType = _field(default_factory=lambda: _ItemType())
    # [Description("アイテムId")]
    # [PropertyOrder(2)]
    ItemId: int = 0
    # [Description("クエストID")]
    # [PropertyOrder(3)]
    QuestId: int = 0

class SnsType(_Enum):
    None_ = 0
    OrtegaId = 1
    AppleId = 2
    Twitter = 3
    Facebook = 4
    GameCenter = 5
    GooglePlay = 6

class LockEquipmentDeckType(_Enum):
    None_ = 0
    League = 1
    GuildTowerLatestBattle = 2
    GuildTowerLatestRegistration = 3
    GuildBattle = 4

# [Description("装備固定誘導ダイアログタイプ")]
class LeadLockEquipmentDialogType(_Enum):
    # [Description("ダイアログ表示無し")]
    None_ = 0
    # [Description("新キャラ入手")]
    NewCharacter = 1
    # [Description("最後の更新またはキャンセルから一定期間経過")]
    PassedDays = 2

# [MessagePackObject(True)]
@_dataclass(slots=True)
class LeadLockEquipmentDialogInfo():
    DialogType: LeadLockEquipmentDialogType = _field(default_factory=lambda: LeadLockEquipmentDialogType())
    PassedDays: int = 0

# [Description("プライバシー設定タイプ")]
class PrivacySettingsType(_Enum):
    # [Description("未設定")]
    None_ = 0
    # [Description("オプトイン")]
    OptIn = 1
    # [Description("オプトアウト")]
    OptOut = 2

# [Description("ゲリラパックランク種別")]
class ShopGuerrillaPackRankType(_Enum):
    # [Description("120")]
    Rank1 = 1
    # [Description("610")]
    Rank2 = 2
    # [Description("980")]
    Rank3 = 3
    # [Description("1480")]
    Rank4 = 4
    # [Description("3060")]
    Rank5 = 5
    # [Description("6100")]
    Rank6 = 6
    # [Description("12000")]
    Rank7 = 7

# [Description("ゲリラパック解放タイプ")]
class ShopGuerrillaPackOpenType(_Enum):
    # [Description("メインステージ")]
    AutoBattle = 1
    # [Description("プレイヤーランク")]
    PlayerRank = 2
    # [Description("無窮の塔")]
    TowerBattle = 3
    # [Description("藍の塔")]
    TowerBattleBlue = 4
    # [Description("紅の塔")]
    TowerBattleRed = 5
    # [Description("翠の塔")]
    TowerBattleGreen = 6
    # [Description("黄の塔")]
    TowerBattleYellow = 7
    # [Description("属性の塔の最低クリア階層")]
    TowerBattleMinClearElementTower = 8

# [MessagePackObject(True)]
_ShopGuerrillaPackOpenType = ShopGuerrillaPackOpenType
_ShopGuerrillaPackRankType = ShopGuerrillaPackRankType
@_dataclass(slots=True)
class ShopProductGuerrillaPack():
    # [Description("ダイアログベース画像ID")]
    DialogImageId: int = 0
    # [Description("割引率")]
    DiscountRate: int = 0
    # [Description("終了日時")]
    EndTime: int = 0
    # [Description("商品名キー")]
    NameKey: str = ""
    # [Description("ProductIdのDictonary")]
    ProductIdDict: dict[DeviceType, str] = _field(default_factory=dict["DeviceType", "str"])
    # [Description("ゲリラパックID")]
    ShopGuerrillaPackId: int = 0
    # [Description("ゲリラパック解放タイプ")]
    ShopGuerrillaPackOpenType: _ShopGuerrillaPackOpenType = _field(default_factory=lambda: _ShopGuerrillaPackOpenType())
    # [Description("ゲリラパック解放値")]
    ShopGuerrillaPackOpenValue: int = 0
    # [Description("ランク種別")]
    ShopGuerrillaPackRankType: _ShopGuerrillaPackRankType = _field(default_factory=lambda: _ShopGuerrillaPackRankType())
    # [Description("商品値段")]
    ShopProductPrice: int = 0
    # [Description("訴求文言キー")]
    TextKey: str = ""
    # [Description("報酬リスト")]
    UserItemList: list[UserItem] = _field(default_factory=list["UserItem"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserBattleBossDtoInfo():
    BossClearMaxQuestId: int = 0
    BossLastChallengeTime: int = 0
    BossTodayUseCurrencyCount: int = 0
    BossTodayUseTicketCount: int = 0
    BossTodayWinCount: int = 0
    IsOpenedNewQuest: bool = False

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserBattleLegendLeagueDtoInfo():
    AttackSucceededNum: int = 0
    DefenseSucceededNum: int = 0
    LegendLeagueLastChallengeTime: int = 0
    LegendLeagueTodayCount: int = 0
    LegendLeagueTodayUseCurrencyCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserBattlePvpDtoInfo():
    AttackSucceededNum: int = 0
    DefenseSucceededNum: int = 0
    GetTodayDefenseSucceededRewardCount: int = 0
    MaxRanking: int = 0
    PvpLastChallengeTime: int = 0
    PvpTodayCount: int = 0
    PvpTodayUseCurrencyCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserBoxSizeDtoInfo():
    # [Description("CharacterBoxSizeMBを参照")]
    CharacterBoxSizeId: int = 0
    # [Description("プレイヤーID")]
    PlayerId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserCharacterBookDtoInfo():
    CharacterId: int = 0
    MaxCharacterLevel: int = 0
    MaxCharacterRarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))
    MaxEpisodeId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserCharacterCollectionDtoInfo():
    CharacterCollectionId: int = 0
    CollectionLevel: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserCharacterDtoInfo():
    CharacterId: int = 0
    Exp: int = 0
    Guid: str = ""
    IsLocked: bool = False
    Level: int = 0
    PlayerId: int = 0
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserCharacterRankReleaseDtoInfo():
    # [Description("CharacterMBのID")]
    CharacterId: int = 0
    # [Description("プレイヤーID")]
    PlayerId: int = 0

# [Description("デッキを使用したコンテンツ")]
class DeckUseContentType(_Enum):
    None_ = 0
    # [Description("放置")]
    Auto = 1
    # [Description("ボスバトル")]
    Boss = 2
    # [Description("無窮の塔")]
    Infinite = 3
    # [Description("時空の洞窟")]
    DungeonBattle = 4
    # [Description("幻影の神殿")]
    LocalRaid = 5
    # [Description("バトルリーグ（攻撃）")]
    BattleLeagueOffense = 6
    # [Description("バトルリーグ（防御）")]
    BattleLeagueDefense = 7
    # [Description("レジェンドリーグ（攻撃）")]
    LegendLeagueOffense = 8
    # [Description("レジェンドリーグ（防御）")]
    LegendLeagueDefense = 9
    # [Description("ギルドハント")]
    GuildHunt = 10
    # [Description("愁（しゅう）の塔")]
    BlueTower = 11
    # [Description("業（ごう）の塔")]
    RedTower = 12
    # [Description("心（しん）の塔")]
    GreenTower = 13
    # [Description("渇（かつ）の塔")]
    YellowTower = 14
    # [Description("模擬戦（攻撃）")]
    FriendBattleOffense = 15
    # [Description("模擬戦（防御）")]
    FriendBattleDefense = 16
    # [Description("ギルドバトル")]
    GuildBattle = 1000
    # [Description("グランドバトル")]
    GrandBattle = 2000

# [MessagePackObject(True)]
_DeckUseContentType = DeckUseContentType
@_dataclass(slots=True)
class UserDeckDtoInfo():
    CharacterId1: int = 0
    CharacterId2: int = 0
    CharacterId3: int = 0
    CharacterId4: int = 0
    CharacterId5: int = 0
    DeckBattlePower: int = 0
    DeckNo: int = 0
    DeckUseContentType: _DeckUseContentType = _field(default_factory=lambda: _DeckUseContentType())
    UserCharacterGuid1: str = ""
    UserCharacterGuid2: str = ""
    UserCharacterGuid3: str = ""
    UserCharacterGuid4: str = ""
    UserCharacterGuid5: str = ""

# [Description("ミッション状態種別")]
class MissionStatusType(_Enum):
    # [Description("未解放")]
    Locked = 0
    # [Description("進行中")]
    Progress = 1
    # [Description("未受取")]
    NotReceived = 2
    # [Description("獲得済")]
    Received = 3

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserFriendMissionDtoInfo():
    AchievementType: MissionAchievementType = _field(default_factory=lambda: MissionAchievementType())
    FriendCampaignId: int = 0
    MissionStatusHistory: dict[MissionStatusType, list[int]] = _field(default_factory=dict["MissionStatusType", "list[int]"])
    ProgressCount: int = 0

# [Description("誘導タイプ")]
class GuidanceType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("勧誘設定")]
    RecruitSetting = 1
    # [Description("ギルド加入")]
    GuildJoining = 2
    # [Description("勧誘設定")]
    RecruitSetting2 = 3
    # [Description("ワールド誘導")]
    WorldGuidance = 4

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserItemDtoInfo():
    ItemCount: int = 0
    ItemId: int = 0
    ItemType: _ItemType = _field(default_factory=lambda: _ItemType())
    PlayerId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserLevelLinkDtoInfo():
    BuyFrameCount: int = 0
    IsPartyMode: bool = False
    MemberMaxCount: int = 0
    PartyLevel: int = 0
    PartyMaxLevel: int = 0
    PartySubLevel: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserLevelLinkMemberDtoInfo():
    CellNo: int = 0
    CharacterId: int = 0
    UnavailableTime: int = 0
    UserCharacterGuid: str = ""

# [Description("ミッションクリア個数/累計貢献メダル報酬状態種別")]
class MissionActivityRewardStatusType(_Enum):
    # [Description("未解放")]
    Locked = 0
    # [Description("獲得可能")]
    NotReceived = 1
    # [Description("獲得済")]
    Received = 2

# [MessagePackObject(True)]
_MissionGroupType = MissionGroupType
@_dataclass(slots=True)
class UserMissionActivityDtoInfo():
    MissionGroupType: _MissionGroupType = _field(default_factory=lambda: _MissionGroupType())
    PlayerId: int = 0
    ProgressCount: int = 0
    RewardStatusDict: dict[int, MissionActivityRewardStatusType] = _field(default_factory=dict["int", "MissionActivityRewardStatusType"])

# [MessagePackObject(True)]
_MissionType = MissionType
@_dataclass(slots=True)
class UserMissionDtoInfo():
    AchievementType: MissionAchievementType = _field(default_factory=lambda: MissionAchievementType())
    MissionStatusHistory: dict[MissionStatusType, list[int]] = _field(default_factory=dict["MissionStatusType", "list[int]"])
    MissionType: _MissionType = _field(default_factory=lambda: _MissionType())
    PlayerId: int = 0
    ProgressCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserMissionOccurrenceHistoryDtoInfo():
    BeginnerStartTime: int = 0
    ComebackStartTime: int = 0
    DailyStartTime: int = 0
    LimitedMissionMBId: int = 0
    LimitedStartTime: int = 0
    NewCharacterMissionMBId: int = 0
    WeeklyStartTime: int = 0

# [Description("通知タイプ")]
class NotificationType(_Enum):
    None_ = 0
    # [Description("新しいガチャ権を入手")]
    NewGachaTicket = 1
    # [Description("セレクトリストに登録しているキャラのレアリティが最大")]
    MaxRarityInSelectList = 2
    # [Description("セレクトリストに登録できるキャラが追加")]
    NewCharacterInSelectList = 3
    # [Description("無料ガチャ回数が残っている")]
    GachaFreeCount = 4
    # [Description("ギルドレイドコンテンツ挑戦/解放可能")]
    GuildRaidAvailable = 5
    # [Description("新しいギルド加入申請")]
    NewGuildJoinRequest = 6
    # [Description("ギルドレベルアップ")]
    GuildLevelUp = 7
    # [Description("Local GVG 受け取り可能なギルドバトル報酬がある場合")]
    LocalGvgReward = 8
    # [Description("Global GVG 受け取り可能なギルドバトル報酬がある場合")]
    GlobalGvgReward = 9
    # [Description("新しく登録された回収アイテムがある場合")]
    NewRetrieveItem = 10
    # [Description("ギルドミッションの受け取り可能な報酬がある場合")]
    ReceivableGuildMission = 11
    # [Description("新しいギルドメンバー勧誘がある場合")]
    NewRecruitGuildMember = 12
    # [Description("ギルドツリーミッションの受取可能な報酬がある場合")]
    ReceivableGuildTowerMission = 13
    # [Description("人気投票のミッションで報酬を受け取れるものがあるとき")]
    ReceivablePopularityVoteMission = 14
    # [Description("投票報酬で報酬を受け取れるものがあるとき")]
    ReceivablePopularityVoteReward = 15
    # [Description("投票チケットを1枚以上もっているかつ、現在予選期間内で、その予選中に一度も投票したことが無い時")]
    NotPopularityVoteInPreliminary = 16
    # [Description("投票チケットを1枚以上もっているかつ、現在本選期間内で、その本選中に一度も投票したことが無い時")]
    NotPopularityVoteInFinal = 17
    # [Description("投票チケットを1枚以上もっているかつ、予選本選いずれかの期間内で、その日一度も投票してない時")]
    NotPopularityVoteOnDay = 18
    # [Description("予選中間発表の結果が出た時（現在時間が予選中間発表日時を過ぎると表示）")]
    PreliminaryInterimResult = 19
    # [Description("予選結果が出た時（現在時間が本選開始日時を過ぎると表示）")]
    PreliminaryResult = 20
    # [Description("本選中間発表の結果が出た時（現在時間が本選中間発表日時を過ぎると表示）")]
    FinalInterimResult = 21
    # [Description("本選結果が出た時（現在時間が結果発表開始日時を過ぎると表示）")]
    FinalResult = 22
    # [Description("進化解放可能")]
    RankRelease = 23
    # [Description("新規獲得したチャットふきだしがあるとき")]
    ChatBalloon = 24

# [MessagePackObject(True)]
_NotificationType = NotificationType
@_dataclass(slots=True)
class UserNotificationDtoInfo():
    NotificationType: _NotificationType = _field(default_factory=lambda: _NotificationType())
    Value: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserOpenContentDtoInfo():
    OpenContentId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserFriendBattleOptionDtoInfo():
    IsAllowedBattle: bool = False
    IsUsedBattleLeagueDeckInDefenseParty: bool = False
    IsUsedLockEquipmentInDefenseParty: bool = False
    IsUsedLockEquipmentInOffenseParty: bool = False
    PlayerId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserRankUpPrioritySettingDtoInfo():
    Enabled: bool = False
    PlayerId: int = 0
    SettingDict: dict[ElementType, list[int]] = _field(default_factory=dict["ElementType", "list[int]"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserRecruitGuildMemberSettingDtoInfo():
    CommunicationPolicyType: PlayerCommunicationPolicyType = _field(default_factory=lambda: PlayerCommunicationPolicyType())
    EventPolicyType: PlayerEventPolicyType = _field(default_factory=lambda: PlayerEventPolicyType())
    GuildBattlePolicyType: PlayerGuildBattlePolicyType = _field(default_factory=lambda: PlayerGuildBattlePolicyType())
    GuildLvLowerLimit: int = 0
    GuildPowerLowerLimit: int = 0
    PlayerRecruitType: _PlayerRecruitType = _field(default_factory=lambda: _PlayerRecruitType())
    UpdateLocalTime: int = 0

# [Description("ユーザー設定データ")]
class PlayerSettingsType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("レアリティNのキャラ自動販売")]
    AutoSellRarityNCharacter = 1
    # [Description("週間トピックスのバトルリーグ掲載許可")]
    WeeklyTopicsBattleLeaguePostingPermission = 2
    # [Description("週間トピックスのレジェンドリーグ掲載許可")]
    WeeklyTopicsLegendLeaguePostingPermission = 3

# [MessagePackObject(True)]
_PlayerSettingsType = PlayerSettingsType
@_dataclass(slots=True)
class UserSettingsDtoInfo():
    PlayerId: int = 0
    PlayerSettingsType: _PlayerSettingsType = _field(default_factory=lambda: _PlayerSettingsType())
    Value: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserShopAchievementPackDtoInfo():
    ChapterId: int = 0
    ShopAchievementPackId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserShopFirstChargeBonusDtoInfo():
    IsReceivedDay1: bool = False
    IsReceivedDay2: bool = False
    IsReceivedDay3: bool = False
    OpenTimeStamp: int = 0

# [CLSCompliant(False)]
class IConvertible(_Protocol):
    pass

class ISerializable(_Protocol):
    pass

class DayOfWeek(_Enum):
    Sunday = 0
    Monday = 1
    Tuesday = 2
    Wednesday = 3
    Thursday = 4
    Friday = 5
    Saturday = 6

class DateTimeKind(_Enum):
    Unspecified = 0
    Utc = 1
    Local = 2

# [IsReadOnly]
# [Serializable]
_DayOfWeek = DayOfWeek
@_dataclass(slots=True)
class DateTime():
    Date: _datetime = _datetime.min
    Day: int = 0
    DayOfWeek: _DayOfWeek = _field(default_factory=lambda: _DayOfWeek())
    Hour: int = 0
    Kind: DateTimeKind = _field(default_factory=lambda: DateTimeKind())
    MaxValue: _datetime = _datetime.min
    Millisecond: int = 0
    MinValue: _datetime = _datetime.min
    Minute: int = 0
    Month: int = 0
    Now: _datetime = _datetime.min
    Second: int = 0
    Ticks: int = 0
    TimeOfDay: _timedelta = _field(default_factory=lambda: _timedelta())
    UnixEpoch: _datetime = _datetime.min
    UtcNow: _datetime = _datetime.min
    Year: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserShopFreeGrowthPackDtoInfo():
    IsBuff: bool = False
    PlayerId: int = 0
    ReceiveDateTime: _datetime = _datetime.min
    ShopGrowthPackId: int = 0
    ShopProductGrowthPackId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserShopMonthlyBoostDtoInfo():
    ExpirationTimeStamp: int = 0
    IsPrePurchased: bool = False
    LatestReceivedDate: int = 0
    PlayerId: int = 0
    PrevReceivedDate: int = 0
    ShopMonthlyBoostId: int = 0

# [MessagePackObject(True)]
_DeviceType = DeviceType
@_dataclass(slots=True)
class UserShopSubscriptionDtoInfo():
    DeviceType: _DeviceType = _field(default_factory=lambda: _DeviceType())
    ExpirationTimeStamp: int = 0
    ProductId: str = ""
    TransactionId: str = ""

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserStatusDtoInfo():
    BackgroundCharacterId: int = 0
    Birthday: int = 0
    BoardRank: int = 0
    Comment: str = ""
    CreateAt: int = 0
    Exp: int = 0
    FavoriteCharacterId1: int = 0
    FavoriteCharacterId2: int = 0
    FavoriteCharacterId3: int = 0
    FavoriteCharacterId4: int = 0
    FavoriteCharacterId5: int = 0
    IsAlreadyChangedName: bool = False
    IsFirstVisitGuildAtDay: bool = False
    IsReachBattleLeagueTop50: bool = False
    LastLeaveGuildTime: int = 0
    LastLoginTime: int = 0
    LastLvUpTime: int = 0
    MainCharacterIconId: int = 0
    Name: str = ""
    PlayerId: int = 0
    PreviousLoginTime: int = 0
    Rank: int = 0
    Vip: int = 0
    VipExp: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserSyncGvgDeckDtoInfo():
    EndIntervalTimestamp: int = 0
    PlayerId: int = 0
    SelectedDeckType: DeckUseContentType = _field(default_factory=lambda: DeckUseContentType())

# [MessagePackObject(True)]
_TowerType = TowerType
@_dataclass(slots=True)
class UserTowerBattleDtoInfo():
    BoughtCount: int = 0
    LastUpdateTime: int = 0
    MaxTowerBattleId: int = 0
    PlayerId: int = 0
    TodayBattleCount: int = 0
    TodayBoughtCountByCurrency: int = 0
    TodayClearNewFloorCount: int = 0
    TowerType: _TowerType = _field(default_factory=lambda: _TowerType())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserVipGiftDtoInfo():
    PlayerId: int = 0
    VipGiftId: int = 0
    VipLv: int = 0

class ChatType(_Enum):
    SvS = 0
    World = 1
    Guild = 2
    Private = 3
    Friend = 4
    Block = 5

# [Description("チャット背景タイプ")]
class ChatBackgroundType(_Enum):
    # [Description("デフォルト")]
    Default = 0
    # [Description("ベースの色変更(暖色)＋とけねこワンポイント")]
    Warm = 1
    # [Description("ベースの色変更(寒色)＋タイトルロゴ")]
    Cool = 2
    # [Description("とけねこスタンプちりばめ")]
    Studded = 3
    # [Description("メメモリ調の筆跡やインクのにじみのようなデザイン")]
    Smear = 4

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ChatSettingData():
    BackgroundTypeDictionary: dict[ChatType, ChatBackgroundType] = _field(default_factory=dict["ChatType", "ChatBackgroundType"])
    BalloonItemId: int = 0
    FontSize: int = 0

# [MessagePackObject(True)]
_ChatSettingData = ChatSettingData
_LegendLeagueClassType = LegendLeagueClassType
_PrivacySettingsType = PrivacySettingsType
_UserBattleBossDtoInfo = UserBattleBossDtoInfo
_UserBattleLegendLeagueDtoInfo = UserBattleLegendLeagueDtoInfo
_UserBattlePvpDtoInfo = UserBattlePvpDtoInfo
_UserBoxSizeDtoInfo = UserBoxSizeDtoInfo
_UserFriendBattleOptionDtoInfo = UserFriendBattleOptionDtoInfo
_UserItemDtoInfo = UserItemDtoInfo
_UserLevelLinkDtoInfo = UserLevelLinkDtoInfo
_UserMissionOccurrenceHistoryDtoInfo = UserMissionOccurrenceHistoryDtoInfo
_UserRankUpPrioritySettingDtoInfo = UserRankUpPrioritySettingDtoInfo
_UserRecruitGuildMemberSettingDtoInfo = UserRecruitGuildMemberSettingDtoInfo
_UserShopFirstChargeBonusDtoInfo = UserShopFirstChargeBonusDtoInfo
_UserStatusDtoInfo = UserStatusDtoInfo
_UserSyncGvgDeckDtoInfo = UserSyncGvgDeckDtoInfo
@_dataclass(slots=True)
class UserSyncData():
    BlockPlayerIdList: list[int] = _field(default_factory=list["int"])
    CanJoinTodayLegendLeague: bool | None = None
    ChatSettingData: _ChatSettingData = _field(default_factory=lambda: _ChatSettingData())
    ClearedTutorialIdList: list[int] = _field(default_factory=list["int"])
    ConfirmedItemQuestList: list[ConfirmedItemQuest] = _field(default_factory=list["ConfirmedItemQuest"])
    CreateUserIdTimestamp: int | None = None
    CreateWorldLocalTimeStamp: int | None = None
    DataLinkageMap: dict[SnsType, bool] = _field(default_factory=dict["SnsType", "bool"])
    DeletedCharacterGuidList: list[str] = _field(default_factory=list["str"])
    DeletedEquipmentGuidList: list[str] = _field(default_factory=list["str"])
    ExistPurchasableOneWeekLimitedPack: bool | None = None
    ExistUnconfirmedRetrieveItemHistory: bool | None = None
    ExistVipDailyGift: bool | None = None
    FriendBattleFavoritePlayerIdList: list[int] = _field(default_factory=list["int"])
    GivenItemCountInfoList: list[UserItem] = _field(default_factory=list["UserItem"])
    GuildJoinLimitCount: int | None = None
    HasTransitionedPanelPictureBook: bool | None = None
    IsDataLinkage: bool | None = None
    IsJoinedGlobalGvg: bool | None = None
    IsJoinedLocalGvg: bool | None = None
    IsReceivedSnsShareReward: bool | None = None
    IsRetrievedItem: bool | None = None
    IsValidContractPrivilege: bool | None = None
    LatestAnnounceChatRegistrationLocalTimestamp: int | None = None
    LatestGuildSurveyCreationLocalTimestamp: int | None = None
    LeadLockEquipmentDialogInfoMap: dict[LockEquipmentDeckType, LeadLockEquipmentDialogInfo] = _field(default_factory=dict["LockEquipmentDeckType", "LeadLockEquipmentDialogInfo"])
    LegendLeagueClassType: _LegendLeagueClassType | None = None
    LocalRaidChallengeCount: int | None = None
    LockedEquipmentCharacterGuidListMap: dict[LockEquipmentDeckType, list[str]] = _field(default_factory=dict["LockEquipmentDeckType", "list[str]"])
    LockedUserEquipmentDtoInfoListMap: dict[LockEquipmentDeckType, list[UserEquipmentDtoInfo]] = _field(default_factory=dict["LockEquipmentDeckType", "list[UserEquipmentDtoInfo]"])
    PresentCount: int | None = None
    PrivacySettingsType: _PrivacySettingsType | None = None
    ReceivableAchieveRankingRewardIdMap: dict[RankingDataType, int] = _field(default_factory=dict["RankingDataType", "int"])
    ReceivedAchieveRankingRewardIdList: list[int] = _field(default_factory=list["int"])
    ReceivedAutoBattleRewardLastTime: int | None = None
    ReceivedGuildTowerFloorRewardIdList: list[int] = _field(default_factory=list["int"])
    ReleaseLockEquipmentCooldownTimeStampMap: dict[LockEquipmentDeckType, int] = _field(default_factory=dict["LockEquipmentDeckType", "int"])
    ShopCurrencyMissionProgressMap: dict[str, int] = _field(default_factory=dict["str", "int"])
    ShopProductGuerrillaPackList: list[ShopProductGuerrillaPack] = _field(default_factory=list["ShopProductGuerrillaPack"])
    StripePoint: int = 0
    TimeServerId: int | None = None
    TodayChallengeFriendBattleCount: int | None = None
    TreasureChestCeilingCountMap: dict[int, int] = _field(default_factory=dict["int", "int"])
    UserBattleBossDtoInfo: _UserBattleBossDtoInfo = _field(default_factory=lambda: _UserBattleBossDtoInfo())
    UserBattleLegendLeagueDtoInfo: _UserBattleLegendLeagueDtoInfo = _field(default_factory=lambda: _UserBattleLegendLeagueDtoInfo())
    UserBattlePvpDtoInfo: _UserBattlePvpDtoInfo = _field(default_factory=lambda: _UserBattlePvpDtoInfo())
    UserBoxSizeDtoInfo: _UserBoxSizeDtoInfo = _field(default_factory=lambda: _UserBoxSizeDtoInfo())
    UserCharacterBookDtoInfos: list[UserCharacterBookDtoInfo] = _field(default_factory=list["UserCharacterBookDtoInfo"])
    UserCharacterCollectionDtoInfos: list[UserCharacterCollectionDtoInfo] = _field(default_factory=list["UserCharacterCollectionDtoInfo"])
    UserCharacterDtoInfos: list[UserCharacterDtoInfo] = _field(default_factory=list["UserCharacterDtoInfo"])
    UserCharacterRankReleaseDtoInfos: list[UserCharacterRankReleaseDtoInfo] = _field(default_factory=list["UserCharacterRankReleaseDtoInfo"])
    UserDeckDtoInfos: list[UserDeckDtoInfo] = _field(default_factory=list["UserDeckDtoInfo"])
    UserEquipmentDtoInfos: list[UserEquipmentDtoInfo] = _field(default_factory=list["UserEquipmentDtoInfo"])
    UserFriendBattleOptionDtoInfo: _UserFriendBattleOptionDtoInfo = _field(default_factory=lambda: _UserFriendBattleOptionDtoInfo())
    UserFriendMissionDtoInfoList: list[UserFriendMissionDtoInfo] = _field(default_factory=list["UserFriendMissionDtoInfo"])
    UserGuidanceTimeMap: dict[GuidanceType, int] = _field(default_factory=dict["GuidanceType", "int"])
    UserItemDtoInfo: list[_UserItemDtoInfo] = _field(default_factory=list["_UserItemDtoInfo"])
    UserLevelLinkDtoInfo: _UserLevelLinkDtoInfo = _field(default_factory=lambda: _UserLevelLinkDtoInfo())
    UserLevelLinkMemberDtoInfos: list[UserLevelLinkMemberDtoInfo] = _field(default_factory=list["UserLevelLinkMemberDtoInfo"])
    UserMissionActivityDtoInfos: list[UserMissionActivityDtoInfo] = _field(default_factory=list["UserMissionActivityDtoInfo"])
    UserMissionDtoInfos: list[UserMissionDtoInfo] = _field(default_factory=list["UserMissionDtoInfo"])
    UserMissionOccurrenceHistoryDtoInfo: _UserMissionOccurrenceHistoryDtoInfo = _field(default_factory=lambda: _UserMissionOccurrenceHistoryDtoInfo())
    UserNotificationDtoInfoInfos: list[UserNotificationDtoInfo] = _field(default_factory=list["UserNotificationDtoInfo"])
    UserOpenContentDtoInfos: list[UserOpenContentDtoInfo] = _field(default_factory=list["UserOpenContentDtoInfo"])
    UserRankUpPrioritySettingDtoInfo: _UserRankUpPrioritySettingDtoInfo = _field(default_factory=lambda: _UserRankUpPrioritySettingDtoInfo())
    UserRecruitGuildMemberSettingDtoInfo: _UserRecruitGuildMemberSettingDtoInfo = _field(default_factory=lambda: _UserRecruitGuildMemberSettingDtoInfo())
    UserSettingsDtoInfoList: list[UserSettingsDtoInfo] = _field(default_factory=list["UserSettingsDtoInfo"])
    UserShopAchievementPackDtoInfos: list[UserShopAchievementPackDtoInfo] = _field(default_factory=list["UserShopAchievementPackDtoInfo"])
    UserShopFirstChargeBonusDtoInfo: _UserShopFirstChargeBonusDtoInfo = _field(default_factory=lambda: _UserShopFirstChargeBonusDtoInfo())
    UserShopFreeGrowthPackDtoInfos: list[UserShopFreeGrowthPackDtoInfo] = _field(default_factory=list["UserShopFreeGrowthPackDtoInfo"])
    UserShopMonthlyBoostDtoInfos: list[UserShopMonthlyBoostDtoInfo] = _field(default_factory=list["UserShopMonthlyBoostDtoInfo"])
    UserShopSubscriptionDtoInfos: list[UserShopSubscriptionDtoInfo] = _field(default_factory=list["UserShopSubscriptionDtoInfo"])
    UserStatusDtoInfo: _UserStatusDtoInfo = _field(default_factory=lambda: _UserStatusDtoInfo())
    UserSyncGvgDeckDtoInfo: _UserSyncGvgDeckDtoInfo = _field(default_factory=lambda: _UserSyncGvgDeckDtoInfo())
    UserTowerBattleDtoInfos: list[UserTowerBattleDtoInfo] = _field(default_factory=list["UserTowerBattleDtoInfo"])
    UserVipGiftDtoInfos: list[UserVipGiftDtoInfo] = _field(default_factory=list["UserVipGiftDtoInfo"])

_UserSyncData = UserSyncData
class IUserSyncApiResponse(_Protocol):
    UserSyncData: _UserSyncData

class IHasSteamTicketApiRequest(_Protocol):
    SteamTicket: str

# [Description("アカウント停止タイプ")]
class AccountSuspensionType(_Enum):
    # [Description("解除")]
    Lift = 0
    # [Description("永久停止")]
    Permanent = 1
    # [Description("時限停止")]
    Period = 2

class BanChatType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("全てのチャット")]
    All = 1
    # [Description("ワールド、ワールドグループチャット")]
    WorldAndWorldGroup = 2

# [MessagePackObject(True)]
_AccountSuspensionType = AccountSuspensionType
_BanChatType = BanChatType
@_dataclass(slots=True)
class BanChatInfo():
    AccountSuspensionType: _AccountSuspensionType = _field(default_factory=lambda: _AccountSuspensionType())
    BanChatType: _BanChatType = _field(default_factory=lambda: _BanChatType())
    LiftDateTime: str = ""

class GlobalGvgGroupType(_Enum):
    All = 0
    Bronze = 1
    Silver = 2
    Golden = 3

class GuildCommunicationPolicyType(_Enum):
    # [Description("指定なし")]
    None_ = 0
    # [Description("無言")]
    Silence = 1
    # [Description("たまに雑談")]
    SmallTalk = 2
    # [Description("おしゃべり")]
    Conversationalist = 3

class GuildEventPolicyType(_Enum):
    # [Description("指定なし")]
    None_ = 0
    # [Description("自由参加")]
    Freely = 1
    # [Description("気軽に参加")]
    Leisurely = 2
    # [Description("上位を狙う")]
    Seriously = 3

class GuildBattlePolicyType(_Enum):
    # [Description("指定なし")]
    None_ = 0
    # [Description("自由参加")]
    Freely = 1
    # [Description("気軽に参加")]
    Leisurely = 2
    # [Description("上位を狙う")]
    Seriously = 3

# [MessagePackObject(True)]
_GuildBattlePolicyType = GuildBattlePolicyType
@_dataclass(slots=True)
class GuildOverView():
    CommunicationPolicyType: GuildCommunicationPolicyType = _field(default_factory=lambda: GuildCommunicationPolicyType())
    EventPolicyType: GuildEventPolicyType = _field(default_factory=lambda: GuildEventPolicyType())
    GuildBattlePolicyType: _GuildBattlePolicyType = _field(default_factory=lambda: _GuildBattlePolicyType())
    GuildDescription: str = ""
    GuildName: str = ""
    IsFreeJoin: bool = False
    RequireBattlePower: int = 0

# [MessagePackObject(True)]
_GuildOverView = GuildOverView
@_dataclass(slots=True)
class GuildInfo():
    GuildExp: int = 0
    GuildFame: int = 0
    GuildId: int = 0
    GuildLevel: int = 0
    GuildMemberCount: int = 0
    GuildOverView: _GuildOverView = _field(default_factory=lambda: _GuildOverView())
    LeaderPlayerInfo: PlayerInfo = _field(default_factory=lambda: PlayerInfo())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildTowerBadgeInfo():
    CurrentFloorId: int = 0
    TodayTotalGuildWinCount: int = 0
    TodayWinCount: int = 0

# [MessagePackObject(True)]
_GlobalGvgGroupType = GlobalGvgGroupType
_GuildInfo = GuildInfo
_GuildTowerBadgeInfo = GuildTowerBadgeInfo
@_dataclass(slots=True)
class GuildSyncData():
    ApplyPlayerInfoList: list[PlayerInfo] = _field(default_factory=list["PlayerInfo"])
    CreateGuildLocalTime: int = 0
    GlobalGvgGroupType: _GlobalGvgGroupType = _field(default_factory=lambda: _GlobalGvgGroupType())
    GuildAnnouncement: str = ""
    GuildAnnouncementUpdateTime: int = 0
    GuildBattlePower: int = 0
    GuildInfo: _GuildInfo = _field(default_factory=lambda: _GuildInfo())
    GuildPlayerInfoList: list[PlayerInfo] = _field(default_factory=list["PlayerInfo"])
    GuildTowerBadgeInfo: _GuildTowerBadgeInfo = _field(default_factory=lambda: _GuildTowerBadgeInfo())
    JoinGuildTime: int = 0
    MatchingNumber: int = 0
    PlayerGuildPositionType: _PlayerGuildPositionType = _field(default_factory=lambda: _PlayerGuildPositionType())

_GuildSyncData = GuildSyncData
class IGuildSyncApiResponse(_Protocol):
    GuildSyncData: _GuildSyncData

# [MessagePackObject(True)]
@_dataclass(slots=True)
class MissionGuideInfo():
    GuideId: int = 0
    MissionGroupType: _MissionGroupType = _field(default_factory=lambda: _MissionGroupType())
    MissionStatus: MissionStatusType = _field(default_factory=lambda: MissionStatusType())

# [MessagePackObject(True)]
_TransferDetailInfo = TransferDetailInfo
@_dataclass(slots=True)
class MypageBannerInfo():
    DisplayPriority: int = 0
    ImageId: int = 0
    MBId: int = 0
    SortOrder: int = 0
    TransferDetailInfo: _TransferDetailInfo = _field(default_factory=lambda: _TransferDetailInfo())

# [Description("バッジタイプ")]
class BadgeType(_Enum):
    # [Description("通常バッジ")]
    Normal = 0
    # [Description("豪華バッジ")]
    Special = 1

# [MessagePackObject(True)]
_BadgeType = BadgeType
@_dataclass(slots=True)
class MypageIconInfo():
    BadgeType: _BadgeType = _field(default_factory=lambda: _BadgeType())
    DisplayPriority: int = 0
    HidePriority: int = 0
    IconNameKey: str = ""
    Id: int = 0
    ImageId: int = 0
    IsBlackout: bool = False
    IsDisplayBadge: bool = False
    NotOpenEventStoreIconId: int = 0
    OpenContentLocalTimestamp: int = 0
    SortOrder: int = 0
    StoreIconId: int = 0
    StoredIconInfoList: list[MypageIconInfo] = _field(default_factory=list["MypageIconInfo"])
    TransferDetailInfo: _TransferDetailInfo = _field(default_factory=lambda: _TransferDetailInfo())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class DisplayMypageInfo():
    MypageBannerInfos: list[MypageBannerInfo] = _field(default_factory=list["MypageBannerInfo"])
    MypageIconInfos: list[MypageIconInfo] = _field(default_factory=list["MypageIconInfo"])

# [MessagePackObject(True)]
_FriendStatusType = FriendStatusType
@_dataclass(slots=True)
class UserFriendDtoInfo():
    FriendPointSendDate: int = 0
    FriendStatusType: _FriendStatusType = _field(default_factory=lambda: _FriendStatusType())
    IsChecked: bool = False
    IsReceived: bool = False
    OtherPlayerId: int = 0
    RegistrationDate: int = 0

# [Description("誘導タイプ")]
class WorldGuidanceType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("汎用新ワールド")]
    GenericNewWorld = 1
    # [Description("VIPワールド")]
    VIPWorld = 2

# [Description("ワールド誘導情報")]
# [MessagePackObject(True)]
_WorldGuidanceType = WorldGuidanceType
@_dataclass(slots=True)
class WorldGuidanceInfo():
    # [Description("ワールド誘導ダイアログタイプ")]
    # [PropertyOrder(1)]
    WorldGuidanceType: _WorldGuidanceType = _field(default_factory=lambda: _WorldGuidanceType())
    # [Description("誘導先ワールドID")]
    # [PropertyOrder(2)]
    WorldGuidanceId: int = 0

class ErrorLogType(_Enum):
    None_ = 0
    ErrorCode = 1
    ClientErrorCode = 2

# [MessagePackObject(True)]
_ErrorLogType = ErrorLogType
@_dataclass(slots=True)
class ErrorLogInfo():
    ApiName: str = ""
    ErrorCode: int = 0
    ErrorLogType: _ErrorLogType = _field(default_factory=lambda: _ErrorLogType())
    LocalTimeStamp: int = 0
    Message: str = ""

# [Description("楽曲再生時の操作イベント種別")]
class MusicPlayerPlayEventType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("シーク操作_操作前の位置")]
    SeekFrom = 1
    # [Description("シーク操作_操作後の位置")]
    SeekTo = 2
    # [Description("一時停止の位置")]
    Pause = 3
    # [Description("再開の位置")]
    Resume = 4
    # [Description("次の楽曲にスキップした位置")]
    Skip = 5

# [MessagePackObject(True)]
@_dataclass(slots=True)
class MusicPlayerPlayEventData():
    EventType: MusicPlayerPlayEventType = _field(default_factory=lambda: MusicPlayerPlayEventType())
    Position: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class MusicPlayerPlayLogInfo():
    EventDataList: list[MusicPlayerPlayEventData] = _field(default_factory=list["MusicPlayerPlayEventData"])
    IsComplete: bool = False
    IsMySelect: bool = False
    IsShuffle: bool = False
    MusicMBId: int = 0
    PlayListGuid: str = ""
    TotalPlaySeconds: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GvgDeckInfo():
    DeckNo: int = 0
    UserCharacterGuidList: list[str] = _field(default_factory=list["str"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BattleTime():
    EndBattle: int = 0
    StartBattle: int = 0
    TotalCommand: int = 0
    TotalCommandOrMinBattleTime: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BattleReward():
    CharacterExp: int = 0
    DropItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    FixedItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    PlayerExp: int = 0
    PopulationGold: int = 0
    PopulationPotentialJewel: int = 0

# [MessagePackObject(True)]
_BattleTime = BattleTime
@_dataclass(slots=True)
class BattleResult():
    BattleTime: _BattleTime = _field(default_factory=lambda: _BattleTime())
    QuestId: int = 0
    Reward: BattleReward = _field(default_factory=lambda: BattleReward())
    SimulationResult: BattleSimulationResult = _field(default_factory=lambda: BattleSimulationResult())

# [MessagePackObject(True)]
_BattleResult = BattleResult
@_dataclass(slots=True)
class UserBattleAutoDtoInfo():
    AverageBattleTime: int = 0
    BattleEfficiency: int = 0
    BattleResult: _BattleResult = _field(default_factory=lambda: _BattleResult())
    ConsecutiveWinCount: int = 0
    CurrentMaxQuestId: int = 0
    CurrentQuestId: int = 0
    ExpectedCharacterExp: int = 0
    ExpectedPlayerExp: int = 0
    QuickLastExecuteTime: int = 0
    QuickTodayUseCurrencyCount: int = 0
    QuickTodayUsePrivilegeCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class TradeShopItemInfo():
    # [Description("TradeShopDedicatedItemMBのID")]
    DedicatedItemId: int = 0
    # [Description("交換回数")]
    TradeCount: int = 0
    # [Description("TradeShopItemMBのId")]
    TradeShopItemId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class TradeShopTabInfo():
    # [Description("自動更新時間")]
    ExpirationTimeStamp: int = 0
    # [Description("最後に無料更新を行った時間")]
    LastFreeManualUpdateTime: int = 0
    # [Description("アイテムの種類")]
    TradeShopItems: list[TradeShopItem] = _field(default_factory=list["TradeShopItem"])
    # [Description("交換所タブMBのID")]
    TradeShopTabId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class TowerBattleLotteryRewardInfo():
    Floor: int = 0
    LotteryRewardItemList: list[UserItem] = _field(default_factory=list["UserItem"])

# [Description("エラーに対する挙動")]
class ErrorHandlingType(_Enum):
    # [Description("何もしない")]
    None_ = 0
    # [Description("トーストを表示する")]
    Toast = 1
    # [Description("ダイアログを表示する")]
    OpenErrorDialog = 2
    # [Description("タイトルに戻るダイアログを表示する")]
    BackToTitle = 3
    # [Description("MagicOnionの再接続を行う")]
    MagicOnionReconnect = 4
    # [Description("MyPageに戻るダイアログを表示する")]
    BackToMyPage = 5

_ErrorHandlingType = ErrorHandlingType
class IErrorResponse(_Protocol):
    ErrorHandlingType: _ErrorHandlingType
    ErrorMessageId: int
    MessageParams: list[str]

# [Description("エラーコード")]
class ErrorCode(_Enum):
    # [Description("エラー無し")]
    None_ = 0
    # [Description("サーバー側でハンドリングされていない例外が発生した")]
    UncaughtException = 1
    # [Description("Headerが不正です")]
    InvalidRequestHeader = 2
    # [Description("アプリバージョンデータに異常が検出されました。")]
    InvalidDataAppVersionMB = 3
    # [Description("メンテナンス")]
    CommonMaintenance = 100
    # [Description("部分メンテナンス")]
    CommonSectionMaintenance = 101
    # [Description("ハードメンテナンス")]
    CommonHardMaintenance = 102
    # [Description("強制アップデート")]
    CommonRequireClientUpdate = 103
    # [Description("セッションがありません")]
    CommonNoSession = 111
    # [Description("別の端末でログインされました")]
    CommonLoggedInAnotherDevice = 112
    # [Description("NGワードが含まれます")]
    CommonContainsNgWord = 201
    # [Description("不正なAPI Requestです")]
    CommonApiInvalidRequest = 301
    # [Description("マスターデータが見つかりません。")]
    CommonNotFoundMasterData = 401
    # [Description("アプリアセットバージョンマスターデータが見つかりません。")]
    CommonNotFoundAppAssetVersionMasterData = 402
    # [Description("新規ユーザー生成禁止")]
    CommonUnableToCreateUser = 998
    # [Description("新規プレイヤー生成禁止")]
    CommonUnableToCreatePlayer = 999
    # [Description("付与可能なワールドに接続が必要です。")]
    CommonBuyProductDifferentGameServer = 1000
    # [Description("存在しないプレイヤーです。")]
    CommonDeletedPlayer = 1001
    # [Description("Dtoデータが存在しません。")]
    CommonNotFoundDto = 1002
    # [Description("Dtoタイプが存在しません。")]
    CommonNotFoundDtoType = 1003
    # [Description("Maxクリアクエスト情報がありません。")]
    CommonNotFoundCurrentMaxClearQuestId = 1004
    # [Description("プレイヤー生成日の情報がありません。")]
    CommonNotFoundCreatePlayerTimestamp = 1005
    # [Description("ユーザーデータがありません")]
    AuthNotFoundUserAccountDto = 10001
    # [Description("ユーザーのプレイヤーデータが存在しません")]
    AuthNotFoundUserPlayerDto = 10002
    # [Description("プレイヤーデータの取得に失敗しました")]
    AuthNotFoundPlayerDto = 10003
    # [Description("リクエストが不正です")]
    AuthAddSnsAccountInvalidRequest = 10101
    # [Description("パスワードは数字、大文字、小文字を組み合わせた8文字以上16文字以内です")]
    AuthAddSnsAccountInvalidPasswordFormat = 10102
    # [Description("既に連携済みのアカウントです。")]
    AuthAddSnsAccountAlreadyLinkedUserData = 10103
    # [Description("ユーザー作成に失敗しました")]
    AuthCreateUserFailed = 10201
    # [Description("リクエストが不正です。")]
    AuthInvalidCountryCode = 10301
    # [Description("国情報の識別に失敗しました。")]
    AuthTimeServerDecisionFailed = 10302
    # [Description("野良APK版で利用できない国コードが含まれています。")]
    AuthInvalidCountryCodeOnApk = 10310
    # [Description("リクエストが不正です")]
    AuthLoginInvalidRequest = 10401
    # [Description("ログインしようとしているアカウントは既に削除されました。")]
    AuthLoginAlreadyDeletedUser = 10402
    # [Description("サーバーが満員です")]
    AuthJoinNewWorldMaxPlayerInWorld = 10501
    # [Description("リクエストが不正です")]
    AuthJoinNewWorldInvalidRequest = 10502
    # [Description("エラーが発生しました")]
    AuthJoinNewWorldAlreadyPlayer = 10503
    # [Description("国情報が不正です")]
    AuthJoinNewWorldInvalidTimeServer = 10504
    # [Description("ユーザーデータが存在しません")]
    AuthComebackUserNotFoundUserAccountDto = 10601
    # [Description("リクエストが不正です")]
    AuthComebackUserPasswordIsNull = 10602
    # [Description("パスワードは数字、大文字、小文字を組み合わせた8文字以上16文字以内です")]
    AuthComebackUserInvalidPasswordFormat = 10603
    # [Description("パスワードが正しくありません")]
    AuthComebackUserInvalidPassword = 10604
    # [Description("ユーザー情報の取得に失敗しました")]
    AuthComebackUserFailedToGetPlayerDataInfo = 10605
    # [Description("ユーザーの復帰情報の取得に失敗しました")]
    AuthComebackUserFailedToGetComebackUserInfo = 10606
    # [Description("IDまたはパスワードに誤りがあります")]
    AuthComebackUserAlreadyDeletedUser = 10607
    # [Description("国情報が不正です")]
    AuthGetServerHostInvalidTimeServer = 10701
    # [Description("設定タイプが範囲外です")]
    AuthSetUserSettingsUserSettingsTypeOutOfRange = 10801
    # [Description("別のユーザーのプレイヤーIDです")]
    AuthGiveSnsShareRewardNotSameUserId = 10901
    # [Description("既にSNSシェア報酬を受け取り済みです")]
    AuthGiveSnsShareRewardAlreadyReceived = 10902
    # [Description("報酬の付与に失敗しました")]
    AuthGiveSnsShareRewardFailedToGiveReward = 10903
    # [Description("アカウント削除が既に予約されています。")]
    AuthReserveAccountDeletionAsyncAlreadyReservedAccountDeletion = 11001
    # [Description("アカウント削除が予約されていません。")]
    AuthCancelReservedAccountDeletionNotReservedAccountDeletion = 11101
    # [Description("Twitterとの連携時にエラーが発生しました。")]
    AuthFailedToGetTwitterUserId = 12001
    # [Description("Twitterとの連携データが存在しません。")]
    AuthUserTwitterLinkageDtoNotFound = 12002
    # [Description("Appleとの連携に失敗しました。")]
    AuthFailedToVerifyAppleIdToken = 12101
    # [Description("Appleとの連携データが存在しません。")]
    AuthUserAppleLinkageDtoNotFound = 12102
    # [Description("GooglePlayとの連携時にエラーが発生しました。")]
    AuthFailedToGetGoogleUserId = 12201
    # [Description("GooglePlayとの連携データが存在しません。")]
    AuthUserGoogleLinkageDtoNotFound = 12202
    # [Description("キャラクターのデータがありません")]
    ItemEditorNotFoundCharacter = 80000
    # [Description("アイテムが不足しています")]
    ItemEditorNotEnoughItem = 80001
    # [Description("ダイヤが足りません。")]
    ItemEditorNotEnoughCurrency = 80002
    # [Description("有償ダイヤが足りません。")]
    ItemEditorNotEnoughPaidCurrency = 80003
    # [Description("消費できないアイテムです。")]
    ItemEditorNotConsumableItem = 80004
    # [Description("付与できないアイテムです。")]
    ItemEditorCanNotGiveItem = 80005
    # [Description("ユーザのボックスデータが存在しません。")]
    ItemEditorUserBoxSizeDtoNotFound = 82000
    # [Description("ユーザーのステータスデータが存在しません。")]
    ItemEditorUserStatusDtoNotFound = 82001
    # [Description("ユーザーのステータスデータがありません")]
    UserUserStatusDtoNotFound = 91000
    # [Description("ユーザーのアカウントデータがありません。")]
    UserUserAccountDtoNotFound = 91003
    # [Description("ユーザーの編成データがありません")]
    UserUserDeckDtoNotFound = 91004
    # [Description("ユーザのクリアパーティーが見つかりません")]
    UserClearPartyNotFound = 91007
    # [Description("ユーザのチュートリアルデータが見つかりません")]
    UserTutorialDtoNotFound = 91008
    # [Description("ユーザのGvgパーティ同期データが見つかりません")]
    UserUserSyncGvgDeckDtoNotFound = 91009
    # [Description("所持してないキャラーです")]
    UserNotHaveCharacter = 92000
    # [Description("無効な誕生日です。")]
    UserInvalidBirthday = 92001
    # [Description("誕生日は一度しか設定できません。")]
    UserCanOnlySetBirthdayOnce = 92002
    # [Description("重複したキャラクターIDが選択されています。")]
    UserSelectDuplicateCharacterId = 92003
    # [Description("認証に失敗しました")]
    UserFailedAuthentication = 92004
    # [Description("既に名前変更のチュートリアルを達成しています。")]
    UserAlreadyClearedChangeNameTutorial = 92005
    # [Description("ユーザーデータが見つかりません。")]
    UserNotFoundPlayerInfo = 92006
    # [Description("所持したことがないキャラクターは背景に設定できません。")]
    UserInvalidBackgroundCharacterId = 92007
    # [Description("所持してないキャラクターです")]
    UserSetDeckNotFoundCharacter = 93101
    # [Description("デッキ内にキャラクターがいません。")]
    UserSaveDeckNobodyCharacter = 93104
    # [Description("重複しているキャラクターが存在します")]
    UserSaveDeckSameIdCharacter = 93105
    # [Description("パーティのキャラ上限数を超えています。")]
    UserSaveDeckOverMaxCharacterCount = 93106
    # [Description("パーティNoの値が不正です。")]
    UserSaveDeckInvalidDeckNo = 93107
    # [Description("不正なデッキ種別です。")]
    UserSyncGvgDeckInvalidDeckType = 93108
    # [Description("パーティ同期のインターバル中です。")]
    UserSyncGvgDeckInterval = 93109
    # [Description("パーティが同期されていないため同期を解除できません。")]
    UserUnsyncGvgDeckNotSyncGvgDeck = 93110
    # [Description("不正なデッキ種別です。")]
    UserSaveDeckInvalidDeckType = 93111
    # [Description("ユーザーのステータスデータが存在しません。")]
    BattleCommonUserStatusDtoNotFound = 96000
    # [Description("例外ケースサブスキルの条件データが存在しません。")]
    BattleCommonNotFoundIrregularSubSkillConditionFormula = 97000
    # [Description("例外ケースサブスキルの値データが存在しません。")]
    BattleCommonNotFoundIrregularValueFormula = 97001
    # [Description("サブセットスキルの条件データが存在しません。")]
    BattleCommonNotFoundSubSetSkillConditionFormula = 97002
    # [Description("ダメージ系スキルの条件データが存在しません。")]
    BattleCommonNotFoundHpSubSkillConditionFormula = 97003
    # [Description("ダメージ系スキルの値データが存在しません。")]
    BattleCommonNotFoundHpSubSkillPowerValueFormula = 97004
    # [Description("効果系スキルの条件データが存在しません。")]
    BattleCommonNotFoundStatusSubSubSkillConditionFormula = 97005
    # [Description("効果系スキルの命中率データが存在しません。")]
    BattleCommonNotFoundStatusSubSubSkillHitValueFormula = 97006
    # [Description("効果系スキルの効果ターンデータが存在しません。")]
    BattleCommonNotFoundStatusSubSubSkillEffectTurnFormula = 97007
    # [Description("効果系スキルの効果値データが存在しません。")]
    BattleCommonNotFoundStatusSubSubSkillEffectValueFormula = 97008
    # [Description("アクティブスキルの条件データが存在しません。")]
    BattleCommonNotFoundActiveSkillConditionFormula = 97009
    # [Description("バトル種別が無効です。")]
    BattleCommonInvalidBattleType = 97010
    # [Description("ユーザーの放置バトルデータがありません")]
    BattleAutoUserBattleAutoDtoNotFound = 101000
    # [Description("ユーザーのボスバトルデータがありません")]
    BattleAutoUserBattleBossDtoNotFound = 101001
    # [Description("ユーザーのステータスデータがありません")]
    BattleAutoUserStatusDtoNotFound = 101002
    # [Description("ユーザーのオートバトルの報酬データがありません")]
    BattleAutoUserBattleAutoRewardDtoNotFound = 101003
    # [Description("ユーザーのチュートリアルデータがありません")]
    BattleAutoUserTutorialDtoNotFound = 101004
    # [Description("次のクエスト情報がありません")]
    BattleAutoNextQuestNotFound = 102000
    # [Description("バトルクエスト変更ができません")]
    BattleAutoInvalidChangeBattleQuest = 102001
    # [Description("石で高速周回できません")]
    BattleAutoInvalidCurrencyBattleQuick = 102002
    # [Description("特典回数が足りません")]
    BattleAutoNotEnoughPrivilegeCount = 102003
    # [Description("存在しない高速周回実行タイプです")]
    BattleAutoInvalidQuickExecuteType = 102005
    # [Description("特典がまだ残っています")]
    BattleAutoPrivilegeRemain = 102006
    # [Description("高速周回の最大値を超えました。")]
    BattleAutoOverQuickMaxCount = 102007
    # [Description("ユーザーのボスバトルデータがありません")]
    BattleBossUserBattleBossDtoNotFound = 111000
    # [Description("ユーザーのステータスデータがありません")]
    BattleBossUserStatusDtoNotFound = 111001
    # [Description("ユーザーのチュートリアルデータがありません")]
    BattleBossUserTutorialDtoNotFound = 111002
    # [Description("ユーザーの放置バトルデータがありません")]
    BattleBossUserBattleAutoDtoNotFound = 111003
    # [Description("クリアしていないボスには浸透できません")]
    BattleBossNotYetBossBattleClear = 112000
    # [Description("ボス挑戦回数が足りません")]
    BattleBossNotEnoughBossChallengeCount = 112001
    # [Description("ボス挑戦できません")]
    BattleBossImpossibleBossChallenge = 112002
    # [Description("次のクエスト情報がありません")]
    BattleBossNextQuestNotFound = 112003
    # [Description("ボス挑戦最大回数を超えました")]
    BattleBossOverBossChallengeMaxCount = 112004
    # [Description("石でボス挑戦券を購入できません")]
    BattleBossInvalidBuyBossBattleTicket = 112005
    # [Description("Vipレベルが足りなくて、ボス浸透できません。")]
    BattleBossNotEnoughVipLevelOrMaxQuestIdBossQuick = 112006
    # [Description("ユーザーのキャラクターデータがありません")]
    DungeonBattleCharacterDtoNotFound = 121000
    # [Description("ユーザーの見逃し回数データがありません")]
    DungeonBattleMissedCountDtoNotFound = 121001
    # [Description("ユーザの放置バトルデータがありません")]
    DungeonBattleUserBattleAutoDtoNotFound = 121002
    # [Description("ユーザのショップデータがありません")]
    DungeonBattleUserDungeonBattleShopDtoNotFound = 121003
    # [Description("ユーザの商品データがありません")]
    DungeonBattleUserShopItemDataNotFound = 121004
    # [Description("時空の洞窟のマップ情報がありません")]
    DungeonBattleDungeonBattleMapDtoNotFound = 121005
    # [Description("ユーザーの時空の洞窟敵情報がありません")]
    DungeonBattleUserDungeonBattleEnemyDtoNotFound = 121006
    # [Description("ユーザーの時空の洞窟敵情報がありません")]
    DungeonBattleUserDungeonBattleSkipRewardDtoNotFound = 121007
    # [Description("開催期間内のタームが無い")]
    DungeonBattleNoActiveTerm = 122001
    # [Description("開催期間外(※時間経過で期間外になった)")]
    DungeonBattleOutOfTerm = 122002
    # [Description("有効期間内のユーザーデータが見つからない")]
    DungeonBattleUserDataNotFound = 122003
    # [Description("マス種別とAPIが異なる")]
    DungeonBattleInvalidGrid = 122004
    # [Description("指定されたマスと現在位置が異なる（データ不整合）")]
    DungeonBattleInvalidGridRequest = 122006
    # [Description("最初の階層が見つからない")]
    DungeonBattleFirstLayerNotFound = 122010
    # [Description("最初のマスが見つからない")]
    DungeonBattleFirstGridNotFound = 122011
    # [Description("現在の階層が見つからない")]
    DungeonBattleCurrentLayerNotFound = 122012
    # [Description("現在のマスが見つからない")]
    DungeonBattleCurrentGridNotFound = 122013
    # [Description("ゲストキャラクターが不足しているのでMAP生成できない")]
    DungeonBattleGuestCharacterNotEnough = 122014
    # [Description("まだ層をクリアしていません")]
    DungeonBattleNotClearedLayerYet = 122015
    # [Description("次の層がありません")]
    DungeonBattleNextLayerNotFound = 122016
    # [Description("現在のマスは未完了です")]
    DungeonBattleCurrentGridIsNotDone = 122020
    # [Description("選択された遺物は強化できません")]
    DungeonBattleCanNotReinforceRelic = 122021
    # [Description("バトルはマスを事前に指定してください")]
    DungeonBattleBattleNotSelected = 122031
    # [Description("行商人はマスを事前に指定してください")]
    DungeonBattleShopNotSelected = 122040
    # [Description("行商人から購入しようとしたIDが存在しない")]
    DungeonBattleShopItemNotFound = 122041
    # [Description("行商人から購入しようとしたIDは購入済み")]
    DungeonBattleShopItemAlreadyBought = 122042
    # [Description("加護IDが不正です。")]
    DungeonBattleInvalidRelicId = 122043
    # [Description("強化可能なレアリティの加護ではありません。")]
    DungeonBattleInvalidReinforceRelicRarity = 122044
    # [Description("バトルマスではありません。")]
    DungeonBattleNotBattleGrid = 122045
    # [Description("バトル結果データが存在しません。")]
    DungeonBattleBattleResultNotFound = 122046
    # [Description("全キャラクター体力が最大です。")]
    DungeonBattleAllCharacterHPFull = 122047
    # [Description("編成キャラにHPが0のキャラクターがいます。")]
    DungeonBattleDeckContainCharacterHPZero = 122048
    # [Description("クリア報酬取得済みです。")]
    DungeonBattleAlreadyGetClearLayerReward = 122049
    # [Description("カロン敵データが設定されていません。")]
    DungeonBattleCharonInfoNotSetting = 122050
    # [Description("強化後の加護を既に持っています。")]
    DungeonBattleAlreadyHaveRelic = 122051
    # [Description("取得可能な加護がありません。")]
    DungeonBattleNotEnoughRelic = 122052
    # [Description("期間中の使用制限を超えています。")]
    DungeonBattleAlreadyMaxHealedByItem = 122053
    # [Description("ハードモードの解放条件を満たしていません。")]
    DungeonBattleNotEnoughHardModeCondition = 122054
    # [Description("時空の洞窟の解放条件を満たしていません。")]
    DungeonBattleNotOpen = 122055
    # [Description("ミステリーショップの商品が売り切れです。")]
    DungeonBattleMysteryShopBuyLimitCount = 122056
    # [Description("敵データが不足しているのでMAP生成できない")]
    DungeonBattleDungeonEnemyNotEnough = 122067
    # [Description("既に実行済みのマスです。")]
    DungeonBattleAlreadyDoneGrid = 122068
    # [Description("移動できないマスです。")]
    DungeonBattleCanNotMoveGrid = 122069
    # [Description("イベント特殊バトルマスが選択されていません。")]
    DungeonBattleNotSelectedEventSpecialBattleGrid = 122070
    # [Description("現在のマスがイベント特殊バトルマスではありません。")]
    DungeonBattleCurrentGridIsNotEventSpecialBattleGrid = 122071
    # [Description("まだイベント特殊マスで敗北していません。")]
    DungeonBattleNotLostBattleYet = 122072
    # [Description("時空の洞窟のマップ情報を更新しています。")]
    DungeonBattleUpdatingMap = 122073
    # [Description("選択できないマスです。")]
    DungeonBattleCanNotSelectGrid = 122074
    # [Description("バトル報酬が存在しません。")]
    DungeonBattleNotFoundBattleReward = 122075
    # [Description("時空の洞窟をスキップできません。")]
    DungeonBattleCanNotSkip = 122076
    # [Description("移動先のマスが見つからない。")]
    DungeonBattleSkipGridNotFound = 122077
    # [Description("ユーザーのバトルリーグデータがありません")]
    BattlePvpUserBattlePvpDtoNotFound = 131000
    # [Description("ユーザーのステータスデータがありません")]
    BattlePvpUserStatusDtoNotFound = 131001
    # [Description("ユーザーのレジェンドリーグデータがありません")]
    BattlePvpUserBattleLegendLeagueDtoNotFound = 131002
    # [Description("ユーザーのレジェンドリーグアイコン報酬データがありません")]
    BattlePvpUserLegendLeagueIconRewardDtoNotFound = 131003
    # [Description("石でPVP挑戦券を購入できません")]
    BattlePvpInvalidBuyPvpTicket = 132000
    # [Description("PVP挑戦最大回数を超えました")]
    BattlePvpOverPvpChallengeMaxCount = 132001
    # [Description("レジェンドリーグランキングデータがありません")]
    BattlePvpNotFoundLegendLeagueData = 132002
    # [Description("レジェンドリーグの開催日ではありません")]
    BattlePvpNotOpenLegendLeague = 132003
    # [Description("レジェンドリーグの参加メンバーではありません")]
    BattlePvpNotFoundLegendLeagueMember = 132004
    # [Description("レジェンドリーグ挑戦最大回数を超えました")]
    BattlePvpOverLegendLeagueChallengeMaxCount = 132005
    # [Description("購入挑戦券の購入数が足りません")]
    BattlePvpNotEnoughBuyCount = 132006
    # [Description("一日購入できるレジェンドリーグ挑戦回数を超えました")]
    BattlePvpOverBuyLegendLeagueChallengeCount = 132007
    # [Description("プレイヤーIDが無効です。")]
    BattlePvpInvalidPlayerId = 132008
    # [Description("本日の参加条件を満たしていません。")]
    BattlePvpNotEnoughTodayLegendLeagueRequired = 132009
    # [Description("レジェンドリーグが解放されていません。")]
    BattlePvpLegendLeagueNotOpen = 132010
    # [Description("バトルリーグのランキング集計中です。")]
    BattlePvpWaitingBattleLeagueBatch = 132011
    # [Description("このプレイヤーのアカウントは削除されたため、挑戦できません")]
    BattlePvpDeletedAccount = 132012
    # [Description("バトルログの有効期限が切れています。")]
    BattlePvpNotFoundBattleLog = 132013
    # [Description("プレイヤーのランキング情報が存在しません。")]
    BattlePvpPlayerRankingNotFound = 132014
    # [Description("ランキングデータの更新に失敗しました。")]
    BattlePvpFailedToUpdateRankingData = 132015
    # [Description("レジェンドリーグのランキングデータの更新に失敗しました。")]
    BattlePvpFailedToUpdateLegendLeagueRankingData = 132016
    # [Description("プレイヤー情報の取得に失敗しました。")]
    BattlePvpFailedToGetPlayerInfo = 132017
    # [Description("レジェンドリーグの開催期間外です。")]
    BattlePvpNotBattleTimeLegendLeague = 132018
    # [Description("アイコン報酬は解放されていません。")]
    BattlePvpLegendLeagueIconRewardNotOpen = 132019
    # [Description("アイコン報酬購入可能な時間が過ぎました。")]
    BattlePvpLegendLeagueIconRewardLimitTimeOver = 132020
    # [Description("アイコン報酬購入済みです")]
    BattlePvpLegendLeagueIconRewardAlreadyBuy = 132021
    # [Description("ユーザーのボスバトルデータがありません")]
    BattleBossUserBountyQuestDtoNotFound = 141000
    # [Description("ユーザーデータがありません")]
    BountyQuestUserStatusDtoNotFound = 141001
    # [Description("ユーザーのチュートリアルデータがありません")]
    BountyQuestUserTutorialDtoNotFound = 141002
    # [Description("派遣可能な人数を超えました")]
    BountyQuestOverDispatchMember = 142000
    # [Description("所持してないキャラーが選択されました")]
    BountyQuestNotHaveCharacter = 142001
    # [Description("出発できない懸賞カウンタークエストです")]
    BountyQuestInvalidBountyQuest = 142002
    # [Description("進行中のクエストは出発できません")]
    BountyQuestNotEndBountyQuest = 142003
    # [Description("受け取り前のクエストは出発できません")]
    BountyQuestNotYetRewardBountyQuest = 142004
    # [Description("派遣人数が異常です。")]
    BountyQuestInvalidMemberCount = 142005
    # [Description("存在しない派遣条件タイプです")]
    BountyQuestInvalidBountyQuestConditionType = 142006
    # [Description("職業条件を満たす人数が足りません")]
    BountyQuestNotEnoughElementCondition = 142007
    # [Description("レアリティ条件を満たす人数が足りません")]
    BountyQuestNotEnoughRarityCondition = 142008
    # [Description("他のソロクエストで使われているキャラーが含まれています")]
    BountyQuestAlreadyUsedOtherSoloQuest = 142009
    # [Description("他のチームクエストで使われているキャラーが含まれています")]
    BountyQuestAlreadyUsedOtherTeamQuest = 142010
    # [Description("共有メンバーにないキャラーが選択されています")]
    BountyQuestNotDispatchShareCharacter = 142011
    # [Description("他のクエストで使われているキャラーが含まれています")]
    BountyQuestAlreadyUsedOtherQuest = 142012
    # [Description("受け取りできないクエストです")]
    BountyQuestInvalidRewardBountyQuest = 142013
    # [Description("ほかのユーザーのキャラーが必要です")]
    BountyQuestNotEnoughOtherUserCharacter = 142014
    # [Description("同一キャラクターを同じクエストに編成することはできません。")]
    BountyQuestCanNotAssignDuplicateIdCharacter = 142015
    # [Description("抽選グループが存在しません。")]
    BountyQuestInvalidLotteryGroup = 142016
    # [Description("存在しない属性です。")]
    BountyQuestNotDefinedElementType = 142017
    # [Description("一括派遣機能は使えません。")]
    BountyQuestUnavailableMultipleBountyQuest = 142018
    # [Description("一括受け取り機能は使えません。")]
    BountyQuestUnavailableRewardsBountyQuest = 142019
    # [Description("キャラクターレアリティ合計が不正です。")]
    BountyQuestInvalidCharacterRarityPoint = 142020
    # [Description("祈りの泉が解放されていません。")]
    BountyQuestNotOpen = 142021
    # [Description("アカウント削除されたプレイヤーのサポートキャラが含まれています")]
    BountyQuestContainsDeletedAccountSupportCharacter = 142022
    # [Description("ユーザーキャラクターサブデータが存在しません。")]
    CharacterUserCharacterSubDtoNotFound = 161000
    # [Description("ユーザーのステータスデータが存在しません。")]
    CharacterUserStatusDtoNotFound = 161003
    # [Description("ユーザキャラクターデータが存在しません。")]
    CharacterUserCharacterDtoNotFound = 161004
    # [Description("ユーザのボックスデータが存在しません。")]
    CharacterUserBoxSizeDtoNotFound = 161005
    # [Description("ユーザキャラクターの図鑑データが存在しません。")]
    CharacterUserCharacterBookDtoNotFound = 161006
    # [Description("レベルリンクデータが存在しません。")]
    CharacterUserLevelLinkDtoNotFound = 161007
    # [Description("レベルアップ機能は使えません。")]
    CharacterCannotUseLevelUp = 161008
    # [Description("レベルリセット機能は使えません。")]
    CharacterCannotUseLevelReset = 161009
    # [Description("ユーザーのチュートリアルデータが存在しません。")]
    CharacterUserTutorialDtoNotFound = 161010
    # [Description("進化解放回数データが存在しません。")]
    CharacterRankReleaseCountDtoNotFound = 161011
    # [Description("エピソードIDが不正です。")]
    CharacterInvalidEpisodeId = 162000
    # [Description("強化に必要なランクに達していません。")]
    CharacterNotReachRequiredRank = 162008
    # [Description("Nレアリティではないものが含まれています")]
    CharacterNotRarityN = 162017
    # [Description("ロックされているキャラクターが含まれています")]
    CharacterLocked = 162018
    # [Description("指定したレベルが不正です。")]
    CharacterLevelInvalid = 162019
    # [Description("ベースキャラのレベルが不足しています。")]
    CharacterNotEnoughBaseCharactersLevel = 162020
    # [Description("これ以上拡張できません")]
    CharacterAlreadyCharacterBoxMaxSize = 162021
    # [Description("レベルリンクに登録されているキャラクターはレベルアップできません")]
    CharacterCannotLevelUpWithInLevelLinkCharacters = 162022
    # [Description("レベル1のキャラクターはリセットできません。")]
    CharacterResetCharacterLevelAlreadyOne = 162023
    # [Description("初期レアリティの条件を満たしていません。")]
    CharacterNotEnoughInitialRarity = 162024
    # [Description("ランクリセット可能なレアリティに到達していません。")]
    CharacterNotReachCanResetRarity = 162025
    # [Description("キャラクター所持数制限を超えてしまいます。")]
    CharacterCharacterBoxIsOverfull = 162026
    # [Description("SSR以上の同名キャラクターが一体しか存在しません。")]
    CharacterHigherSSRCharacterIsOnlyOne = 162027
    # [Description("レアリティ最大のキャラクターは選択できません。")]
    CharacterMaxRarityCharacterIsOnlyOne = 162028
    # [Description("同レアリティ内で最大のレベルのキャラクターはランクリセットできません。")]
    CharacterCanNotResetRankMaxLevelInSameRarity = 162029
    # [Description("キャラクターIDが異なります。")]
    CharacterIdDifferent = 162030
    # [Description("キャラクターelementが異なります。")]
    CharacterElementDifferent = 162031
    # [Description("キャラクターランクが最大値")]
    CharacterRankMaximum = 162032
    # [Description("放置バトルのキャラクターは対象にできません。")]
    CharacterExistsAutoBattleDeck = 162033
    # [Description("アルカナ解放条件がありません。")]
    CharacterNotEnoughCharacterCollectionCondition = 162034
    # [Description("アルカナ解放ができません。")]
    CharacterCannotOpenCharacterCollection = 162035
    # [Description("LR+5以上のレアリティのキャラクターを獲得したことがありません。")]
    CharacterNotEverExistOverRarityLRPlus5 = 162036
    # [Description("心片回帰でサポートされていないレアリティのキャラクターが含まれています。")]
    CharacterShardReversionNotSupportedRarity = 162037
    # [Description("LR+5以上のレアリティのキャラクターを所持していません。")]
    CharacterNotExistOverRarityLRPlus5 = 162038
    # [Description("メモリー機能が開放されていません")]
    CharacterGetCharacterStoryRewardNotOpen = 162039
    # [Description("ランクアップ条件を満たしていません。")]
    CharacterNotEnoughRankUpRarityCondition = 162040
    # [Description("進化機能が解放されていません。")]
    CharacterRankUpNotOpen = 162041
    # [Description("解放されてないアルカナです。")]
    CharacterCollectionNotOpen = 162042
    # [Description("進化解放機能が解放されていません。")]
    CharacterRankReleaseNotOpen = 162043
    # [Description("すでに進化解放済みのキャラクターです。")]
    CharacterRankReleaseAlreadyReleased = 162044
    # [Description("進化解放可能回数が不足しています。")]
    CharacterRankReleaseLimit = 162045
    # [Description("進化優先設定が解放されていません。")]
    CharacterRankUpPrioritySettingNotOpen = 162046
    # [Description("進化優先設定が不正です。")]
    CharacterRankUpPrioritySettingInvalid = 162047
    # [Description("最も優先度の高いキャラクターが含まれています。")]
    CharacterShardReversionHighestPrioritySelected = 162048
    # [Description("バトル結果が見つかりません。")]
    LocalRaidBattleResultNotFound = 172000
    # [Description("幻影の神殿がまだ解放されてありません。")]
    LocalRaidNotOpenLocalRaid = 172001
    # [Description("デッキデータが存在しません。")]
    LocalRaidNotFoundPlayerDeckData = 172002
    # [Description("レベルリンクデータが存在しません。")]
    LocalRaidNotFoundLevelLinkData = 172003
    # [Description("このバトルのデータは削除されました")]
    LocalRaidDeletedAccount = 172004
    # [Description("ユーザの訓練所データが存在しません")]
    TowerBattleTowerBattleDtoNotFound = 181000
    # [Description("ユーザ情報データが存在しません")]
    TowerBattleUserStatusDtoNotFound = 181001
    # [Description("購入回数上限を超えています")]
    TowerBattleOverPurchaseLimit = 182000
    # [Description("挑戦できないクエストです")]
    TowerBattleNotClearPreQuest = 182001
    # [Description("訓練所掃討条件を満たしていません")]
    TowerBattleNotEnoughQuestCondition = 182002
    # [Description("訓練所挑戦回数が足りません")]
    TowerBattleNotEnoughChallengeCount = 182003
    # [Description("存在しない塔の種類です")]
    TowerBattleNotFoundTowerType = 182004
    # [Description("キャラの属性が不正です。")]
    TowerBattleCharacterElementTypeIsInvalid = 182005
    # [Description("属性の塔の一日に進行できる階層の回数を超えています。")]
    TowerBattleLimitOverClearNewFloorPerDay = 182006
    # [Description("無窮の塔が解放されていません。")]
    TowerBattleNotOpen = 182007
    # [Description("属性の塔は解放されていません。")]
    TowerBattleElementTowerNotOpen = 182008
    # [Description("属性の塔はクリア済みの階に挑戦出来ません。")]
    TowerBattleElementTowerNotEnterAlreadyClearedFloor = 182009
    # [Description("無効な塔の種類です。")]
    TowerBattleInvalidTowerType = 182010
    # [Description("塔の層が存在しません。")]
    TowerBattleNotOpenQuest = 182011
    # [Description("ユーザーのギルドデータがありません")]
    GuildRaidUserGuildDtoNotFound = 191000
    # [Description("ギルドデータがありません")]
    GuildRaidGuildDtoNotFound = 191001
    # [Description("ユーザーステータスデータがありません")]
    GuildRaidUserStatusDtoNotFound = 191002
    # [Description("ユーザーのギルドレイドデータが存在します")]
    GuildRaidExistUserGuildRaidDto = 191003
    # [Description("ユーザーの放置バトルデータが存在しません。")]
    GuildRaidUserBattleAutoDtoNotFound = 191004
    # [Description("ギルドレイドデータが存在しません")]
    GuildRaidGuildRaidDtoNotFound = 191005
    # [Description("ユーザーのギルドレイドデータが存在しません")]
    GuildRaidUserGuildRaidDtoNotFound = 191006
    # [Description("操作権限がありません")]
    GuildRaidNotHavePermission = 192001
    # [Description("開始中のギルドレイドボスが存在します")]
    GuildRaidAlreadyOpenGuildRaid = 192002
    # [Description("ギルドレイド挑戦回数を超えています")]
    GuildRaidOverChallengeCount = 192003
    # [Description("開始中のギルドレイドボスが存在しません")]
    GuildRaidNotExistGuildRaidBoss = 192004
    # [Description("ギルドレイド開始に必要な名声が足りません。")]
    GuildRaidNotEnoughGuildFame = 192005
    # [Description("掃討機能は利用不可です。")]
    GuildRaidNotAvailableQuickStart = 192006
    # [Description("現在解放ボスに挑戦できません。")]
    GuildRaidNotAllowedChallengeReleasableBoss = 192007
    # [Description("ギルドから除名されています。")]
    GuildRaidRemovedGuildMember = 192008
    # [Description("個人報酬の情報が見つかりません。")]
    GuildRaidNormalDamageBarInfoNotFound = 192010
    # [Description("既にボスは解放済みです")]
    GuildRaidAlreadyOpened = 192011
    # [Description("ギルド設立後24時間は解放できません")]
    GuildRaidNotOpenYet = 192012
    # [Description("対象ワールド報酬のデータが存在しません。")]
    GuildRaidNotFoundGoalDamageWorldReward = 192013
    # [Description("目標ダメージが足りません。")]
    GuildRaidNotEnoughGoalDamage = 192014
    # [Description("受け取りずみのワールド報酬です。")]
    GuildRaidAlreadyRewardWorldItem = 192015
    # [Description("ギルドレイドの期限外です。")]
    GuildRaidNotOpenGuildRaid = 192016
    # [Description("ガチャ開催中です。")]
    GachaAlreadyBeenOpened = 200110
    # [Description("既にその聖遺物が選択されています。")]
    GachaAlreadySelectedGachaRelic = 200120
    # [Description("セレクトリストに設定するキャラクター数が多すぎます。")]
    GachaOverMaxCountSelectList = 200130
    # [Description("セレクトリスト対象外のキャラクターが選択されています。")]
    GachaOtherCharacterSelectList = 200131
    # [Description("セレクトリストに設定する同属性のキャラクター数が多すぎます。")]
    GachaOverMaxCountSameElementTypeSelectList = 200132
    # [Description("ガチャ期間外です。")]
    GachaOutOfDate = 200201
    # [Description("ガチャが解放されていません。")]
    GachaNotOpen = 200202
    # [Description("条件を満たしていません。")]
    GachaInvalidButton = 200203
    # [Description("キャラクター所持枠上限です。")]
    GachaHaveMaxCharacter = 200204
    # [Description("運命ガチャの解放条件を満たしていません。")]
    GachaNotEnoughVipLevelOrMaxQuestIdDestinyGacha = 200205
    # [Description("チュートリアルの条件を満たしていません。")]
    GachaInvalidTutorialGacha = 200206
    # [Description("武具ガチャの解放条件を満たしていません。")]
    GachaNotEnoughMaxQuestIdEquipmentGacha = 200207
    # [Description("ガチャを引く回数が足りません。")]
    GachaInvalidDrawCount = 200208
    # [Description("ガチャチケットの使用期限外です。")]
    GachaInvalidGachaTicketPeriod = 200209
    # [Description("運命のガチャのセレクトリスト対象外のキャラクターが選択されています。")]
    GachaOtherCharacterDestinySelectList = 200210
    # [Description("運命のガチャのセレクトリスト対象外のキャラクターが選択されています。")]
    GachaOtherCharacterStarsGuidanceSelectList = 200211
    # [Description("星の導きガチャの解放条件を満たしていません。")]
    GachaNotEnoughVipLevelOrMaxQuestIdStarsGuidanceGacha = 200212
    # [Description("選択ピックアップの対象外のキャラクターが選択されています。")]
    GachaOtherCharacterPickupSelectList = 200213
    # [Description("ピックアップの対象のキャラクターが選択されていません。")]
    GachaNotSelectedPickupCharacter = 200214
    # [Description("不正なセレクトリスト種別です。")]
    GachaInvalidSelectListType = 200215
    # [Description("ユーザーのステータスデータが存在しません。")]
    GachaUserStatusDtoNotFound = 200500
    # [Description("ユーザーの放置バトルデータが存在しません。")]
    GachaUserBattleAutoDtoNotFound = 200501
    # [Description("ユーザーのチュートリアルデータが存在しません。")]
    GachaUserTutorialDtoNotFound = 200502
    # [Description("ユーザーのセレクトリストデータが存在しません。")]
    GachaUserGachaSelectListDtoNotFound = 200503
    # [Description("バトルログが見つかりません。")]
    BattleCommonBattleLogNotFound = 220000
    # [Description("バトル詳細ログが見つかりません。")]
    BattleCommonBattleDetailLogNotFound = 220001
    # [Description("ユーザの装備データが存在しません。")]
    EquipmentUserEquipmentDtoNotFound = 231000
    # [Description("ユーザのステータスデータが存在しません。")]
    EquipmentUserStatusDtoNotFound = 231001
    # [Description("ユーザーのキャラクターデータが存在しません。")]
    EquipmentUserCharacterDtoNotFound = 231005
    # [Description("ユーザーのレベルリンクデータが存在しません。")]
    EquipmentUserLevelLinkDtoNotFound = 231006
    # [Description("ユーザーのチュートリアルデータが存在しません。")]
    EquipmentUserTutorialDtoNotFound = 231007
    # [Description("ユーザーの放置バトルデータが存在しません。")]
    EquipmentUserBattleAutoDtoNotFound = 231008
    # [Description("ユーザーの固定キャラクターデータが存在しません。")]
    EquipmentUserLockCharacterDtoNotFound = 231009
    # [Description("一括研磨結果データが存在しません。")]
    EquipmentBulkTrainingResultDtoNotFound = 231010
    # [Description("同じ種類の宝石は装備できません。")]
    EquipmentCanNotEquipSameKindSpheres = 232000
    # [Description("その部位には装備できません。")]
    EquipmentCanNotEquipOnThisPart = 232001
    # [Description("宝石スロットが存在しません。")]
    EquipmentMissingSphereSlot = 232002
    # [Description("宝石スロットはすべて解放されています。")]
    EquipmentSphereSlotAlreadyUnlockedAll = 232003
    # [Description("スロットの種類が違います。")]
    EquipmentDifferentSlotType = 232004
    # [Description("対象の装備がありません。")]
    EquipmentMissingEquipment = 232005
    # [Description("無効な神器融合のパターンです。")]
    EquipmentInvalidMergeSacredTreasurePattern = 232006
    # [Description("吸収に使用する素材がありません。")]
    EquipmentMissingAbsorbedMaterial = 232007
    # [Description("神器は消費できません。")]
    EquipmentCanNotConsumeSacredTreasure = 232008
    # [Description("装備不可能なキャラタイプです。")]
    EquipmentCharacterTypeCanNotBeEquipped = 232009
    # [Description("装備可能レベルを超えています。")]
    EquipmentExceedCanEquipLevel = 232010
    # [Description("他のキャラクターが装備しています。")]
    EquipmentEquippedByOtherCharacters = 232011
    # [Description("宝石が装着されている装備は選択できません。")]
    EquipmentCanNotSelectEquipmentWithSphere = 232012
    # [Description("限界まで強化済みです。")]
    EquipmentReinforcementLvAlreadyUpperLimit = 232013
    # [Description("通常武具は分解できません。")]
    EquipmentCanNotTakeApartNormalEquipment = 232014
    # [Description("通常武具以外は選択できません。")]
    EquipmentCanNotSelectSetAndExclusiveEquipment = 232015
    # [Description("装備中のアイテムは選択できません。")]
    EquipmentCanNotSelectEquippedItem = 232016
    # [Description("その武具は進化できません。")]
    EquipmentEquipmentCanNotEvolve = 232018
    # [Description("進化後装備情報が見つかりません。")]
    EquipmentEquipmentEvolutionInfoNotFound = 232019
    # [Description("指定した武具レアリティの付加パラメータ数が見つかりません。")]
    EquipmentAdditionalParameterCountNotFound = 232020
    # [Description("同一の武具IDを指定しています。")]
    EquipmentSpecifySameEquipmentGuid = 232021
    # [Description("VIPレベルが不足しています。")]
    EquipmentVipLvNotEnough = 232022
    # [Description("要求アイテムが存在しません。")]
    EquipmentRequiredItemIsNull = 232023
    # [Description("再分配する追加効果が存在しません。")]
    EquipmentNotFoundAdditionalParameterType = 232024
    # [Description("強化素材が不足しています。")]
    EquipmentReinforcementItemNotEnough = 232025
    # [Description("武具を装備してない部位です。")]
    EquipmentNotExistEquipment = 232026
    # [Description("装備できないスロットタイプです。")]
    EquipmentNotEqualEquipmentSlotType = 232027
    # [Description("宝石が不足しています。")]
    EquipmentGetComposeLackSphereResultFailed = 232028
    # [Description("強化レベルが上限を超えてしまいます。")]
    EquipmentInheritanceEquipmentFailed = 232029
    # [Description("セット武具進化に必要な強化レベルを満たしていません。")]
    EquipmentEvolutionSetPossibleLevel = 232030
    # [Description("専用武具進化に必要な強化レベルを満たしていません。")]
    EquipmentEvolutionExclusivePossibleLevel = 232031
    # [Description("装備中キャラクターのレアリティが条件を満たしていません。")]
    EquipmentEvolutionNotEnoughEquippingCharacterRarity = 232032
    # [Description("装備に必要なキャラクターレアリティを満たしていません。")]
    EquipmentEquipLREquipmentPossibleCharacterRarity = 232033
    # [Description("スフィア装着が解放されていません。")]
    EquipmentNotOpenSphereSetContent = 232034
    # [Description("宝石スロット開放数が異常です。")]
    EquipmentUnlockSphereSlotCountInvalid = 232035
    # [Description("武具進化機能の解放条件を満たしていません。")]
    EquipmentNotEnoughMaxQuestIdEvolution = 232036
    # [Description("神装強化機能の解放条件を満たしていません。")]
    EquipmentNotEnoughMaxQuestIdAscend = 232037
    # [Description("武具強化機能の解放条件を満たしていません。")]
    EquipmentNotEnoughMaxQuestIdStrength = 232038
    # [Description("武具研磨機能の解放条件を満たしていません。")]
    EquipmentNotEnoughMaxQuestIdRefine = 232039
    # [Description("無効なデッキ保存種別です。")]
    EquipmentInvalidLockEquipmentDeckType = 232040
    # [Description("装備固定のクールダウン中です。")]
    EquipmentLockEquipmentCooldownNow = 232041
    # [Description("装備固定機能が解放されていません。")]
    EquipmentLockEquipmentNotOpen = 232042
    # [Description("装備固定された武具データが存在しません。")]
    EquipmentLockEquipmentDtoNotFound = 232043
    # [Description("装備固定されたキャラクターが存在しません。")]
    EquipmentNotFoundLockCharacter = 232044
    # [Description("無効な装備固定誘導ダイアログ種別です。")]
    EquipmentInvalidLeadLockEquipmentDialogType = 232045
    # [Description("選択されたキャラクター数が登録可能数を超過しています。")]
    EquipmentOverMaxRegisterLockCharacterCount = 232048
    # [Description("装備固定の変更不可時間です。")]
    EquipmentLockEquipmentForceFixTime = 232049
    # [Description("武具一括進化機能の解放条件を満たしていません。")]
    BulkEquipmentNotEnoughMaxQuestIdEvolution = 232050
    # [Description("装備固定(ギルドバトル用)機能が解放されていません。")]
    EquipmentLockEquipmentGuildBattleNotOpen = 232051
    # [Description("スフィア装着(一括装着カスタム)が解放されていません。")]
    EquipmentNotOpenBulkSphereSetContent = 232052
    # [Description("スフィア種類ごとの最大選択数を超過しています。")]
    EquipmentOverMaxSelectionPerSphereType = 232053
    # [Description("攻撃タイプ・防御タイプ　それぞれの最大選択数を超過しています。")]
    EquipmentOverMaxSelectionPerSphereSlotType = 232054
    # [Description("スフィアカスタムの最大登録数を超過しています。")]
    EquipmentOverMaxCustomCount = 232055
    # [Description("キャラごとのスフィアカスタムの最大登録数を超過しています。")]
    EquipmentOverMaxCustomCountPerCharacter = 232056
    # [Description("スフィアカスタムのデータが存在しません。")]
    EquipmentBulkSphereSetDtoNotFound = 232057
    # [Description("武具一括研磨機能の解放条件を満たしていません。")]
    EquipmentNotEnoughMaxQuestIdBulkRefine = 232058
    # [Description("一括研磨対象となる武具の追加効果がロックされています。")]
    EquipmentBulkRefineLockedAdditionalParameter = 232059
    # [Description("ユーザのフレンドデータが存在しません。")]
    FriendUserFriendDtoNotFound = 241000
    # [Description("ユーザのステータスデータが存在しません。")]
    FriendUserStatusDtoNotFound = 241001
    # [Description("ユーザの放置バトルデータが存在しません。")]
    FriendUserBattleAutoDtoNotFound = 241002
    # [Description("ユーザーのフレンドミッションデータが存在しません。")]
    FriendUserFriendMissionDtoNotFound = 241003
    # [Description("ユーザーのアカウントデータが存在しません。")]
    FriendUserAccountDtoNotFound = 241004
    # [Description("ユーザデータが見つかりません。")]
    FriendUserDataNotFound = 242000
    # [Description("自分自身のIDを検索しようとしています。")]
    FriendCanNotSearchOwnPlayerId = 242001
    # [Description("ブロック可能人数上限に達しています。")]
    FriendBlockListFull = 242002
    # [Description("これ以上フレンドを増やすことはできません。")]
    FriendFriendsFull = 242003
    # [Description("指定したプレイヤーはブロックしていません。")]
    FriendNotBlockTargetPlayer = 242004
    # [Description("相手のフレンド数が一杯です")]
    FriendTargetPlayerFriendsFull = 242005
    # [Description("申請可能数上限です。")]
    FriendFriendApplyingFull = 242006
    # [Description("既にフレンドになっています。")]
    FriendAlreadyFriend = 242007
    # [Description("承認待ちのプレイヤーです。")]
    FriendAwaitingApprovalPlayer = 242008
    # [Description("対象プレイヤーをブロックしています。")]
    FriendTargetPlayerBlocked = 242009
    # [Description("対象プレイヤーはフレンドです。")]
    FriendTargetPlayerIsFriend = 242010
    # [Description("自身のIDを対象にしています。")]
    FriendTargetPlayerIdIsMine = 242011
    # [Description("FriendInfoTypeが無効です。")]
    FriendInvalidFriendInfoType = 242012
    # [Description("相手の申請待ち件数が一杯です。")]
    FriendTargetPlayerReceivedFriendsFull = 242013
    # [Description("既にフレンドポイントを送信しています。")]
    FriendAlreadySentFriendPoint = 242014
    # [Description("本日送信されていないかまたは受取済です。")]
    FriendNotSendOrAlreadyReceivedFriendPoint = 242015
    # [Description("一日の受取上限に達しています。")]
    FriendAlreadyMaxReceived = 242016
    # [Description("フレンドポイントの上限に達しています。")]
    FriendAlreadyMaxOwned = 242017
    # [Description("フレンドキャンペーンが開催されてないです。")]
    FriendNotOpenFriendCampaign = 242018
    # [Description("存在しないフレンドミッションです。")]
    FriendNotContainFriendCampaignMission = 242019
    # [Description("存在しないフレンドコードです。")]
    FriendNotExistFriendCode = 242020
    # [Description("条件が足りなくフレンドコードは入力できないです。")]
    FriendNotOpenFriendCode = 242021
    # [Description("コード入力できる新規ユーザーではありません。")]
    FriendUnusableAccount = 242022
    # [Description("コード入力可能な時間が過ぎました。")]
    FriendOverTimeFriendCode = 242023
    # [Description("もう招待コードを使用しました。")]
    FriendAlreadyUseFriendCode = 242024
    # [Description("自分のコードは使用できません。")]
    FriendCannotUseSelfFriendCode = 242025
    # [Description("違う国のコードは使用できません。")]
    FriendCannotUseAnotherTimeServerFriendCode = 242026
    # [Description("同じアカウントのコードは一回しか使用できません。")]
    FriendCannotUseSameUserFriendCode = 242027
    # [Description("コードの使用制限を超えました。")]
    FriendOverUseLimitFriendCode = 242028
    # [Description("ギルド申請のデータがありません。")]
    GuildJoinRequestDtoNotFound = 251000
    # [Description("ギルドデータがありません。")]
    GuildGuildDtoNotFound = 251001
    # [Description("ユーザーのギルドデータがありません。")]
    GuildUserGuildDtoNotFound = 251002
    # [Description("ギルドオプションデータがありません。")]
    GuildSystemChatOptionNotFound = 251003
    # [Description("標準化ギルド名データがありません。")]
    StandardGuildNameDtoNotFound = 251004
    # [Description("ギルドIDが無効です。")]
    GuildInvalidGuildId = 252000
    # [Description("権限が不足しています。")]
    GuildUserHasNoAuthority = 252001
    # [Description("既に存在するギルド名です。")]
    GuildAlreadyExistName = 252002
    # [Description("既にギルドに所属しています。")]
    GuildAlreadyBelong = 252003
    # [Description("申請が取り消されています。")]
    GuildCancelJoinRequest = 252005
    # [Description("ギルドのメンバーが満員です。")]
    GuildGuildMemberFull = 252006
    # [Description("ギルドに加入していないプレイヤーです。")]
    GuildInvalidTargetPlayer = 252007
    # [Description("リーダーは除名できません。")]
    GuildCanNotRemoveLeader = 252008
    # [Description("リーダー以外にギルドメンバーがいます。")]
    GuildExistMemberOtherThanLeader = 252009
    # [Description("戦闘力が不足しています。")]
    GuildNotEnoughBattlePower = 252010
    # [Description("ギルドへの申請数がいっぱいです。")]
    GuildApplyCountMax = 252011
    # [Description("クエスト進行が不足しています。")]
    GuildNotEnoughQuestId = 252012
    # [Description("一日に加入可能回数を超過しました。")]
    GuildDailyJoinedExceeded = 252013
    # [Description("既に加入申請しました")]
    GuildAlreadyApply = 252014
    # [Description("申請数がいっぱいです。")]
    GuildUserApplyCountMax = 252015
    # [Description("ギルド機能が開放されていません")]
    GuildGetGuildIdNotOpen = 252016
    # [Description("ギルドのメンバーが満員です。")]
    GuildApplyGuildGuildMemberFull = 252017
    # [Description("既にギルドに所属しています。")]
    GuildApplyGuildAlreadyBelong = 252018
    # [Description("ギルドに所属していません。")]
    GuildChangeLeaderNotBelongToGuild = 252019
    # [Description("ギルド名が入力されていません。")]
    GuildEmptyGuildName = 252020
    # [Description("ギルド名は10文字まで入力できます。")]
    GuildOverMaxLengthGuildName = 252021
    # [Description("使用できない単語が含まれています。")]
    GuildExistNgWordInGuildName = 252022
    # [Description("ギルド名保存処理に失敗しました。")]
    GuildFailToSaveGuildName = 252023
    # [Description("プレイヤーが見つかりません。")]
    RecruitGuildMemberNotFoundPlayer = 253000
    # [Description("ギルドメンバー数が上限です。")]
    RecruitGuildMemberUpperLimitMember = 253001
    # [Description("勧誘数が上限です。")]
    RecruitGuildMemberUpperLimitRecruitCount = 253002
    # [Description("プレイヤー側の勧誘数が上限です。")]
    RecruitGuildMemberUpperLimitRecruitCountOnPlayerSide = 253003
    # [Description("勧誘条件を満たしていません。")]
    RecruitGuildMemberNotMeetRequired = 253004
    # [Description("同じギルドに所属しているプレイヤーです。")]
    RecruitGuildMemberSameGuildPlayer = 253005
    # [Description("ギルド機能が開放されていないプレイヤーです。")]
    RecruitGuildMemberNotOpenGuild = 253006
    # [Description("プレイヤーが見つかりません。")]
    RecruitGuildMemberSearchNotFoundPlayer = 253010
    # [Description("サブマスターは1ギルドに1名のみ任命可能です。")]
    GuildAlreadyExistSubLeader = 253011
    # [Description("指揮官は1ギルドに1名のみ任命可能です。")]
    GuildAlreadyExistCommander = 253012
    # [Description("勧誘コメントの最大文字数を超過しています。")]
    RecruitGuildMemberOverMessageMaxLength = 253013
    # [Description("既に勧誘済みです。")]
    RecruitGuildMemberAlreadyRecruited = 253014
    # [Description("ユーザーデータが見つかりません。")]
    ShopCurrencyMissionDtoNotFound = 261000
    # [Description("ゲリラパックのデータが見つかりません。")]
    ShopGuerrillaPackDtoNotFound = 261001
    # [Description("ユーザデータが見つかりません。")]
    ShopFirstChargeBonusDtoNotFound = 261002
    # [Description("日付更新によりプレゼントボックスへ送られたか存在していない。")]
    ShopUserShopChargeBonusMissionDtoNotFound = 261003
    # [Description("ユーザデータが見つかりません。")]
    ShopUserAccountDtoNotFound = 261004
    # [Description("ユーザデータが見つかりません。")]
    ShopUserCurrencyMissionDtoNotFound = 261005
    # [Description("ユーザデータが見つかりません。")]
    ShopMonthlyBoostDtoNotFound = 261006
    # [Description("ユーザデータが見つかりません。")]
    ShopAchievementPackDtoNotFound = 261007
    # [Description("不正なリクエストです。")]
    ShopBuyProductInvalidRequest = 262000
    # [Description("VIPレベルが不足しています。")]
    ShopBuyProductNotEnoughVip = 262001
    # [Description("販売期間ではありません。")]
    ShopBuyProductNotOpen = 262002
    # [Description("上限回数購入済みです。")]
    ShopBuyProductBuyCountLimit = 262003
    # [Description("購入済みです。")]
    ShopBuyProductAlready = 262004
    # [Description("解放条件を満たしていません。")]
    ShopBuyProductNotEnoughChapterId = 262005
    # [Description("レシート検証に失敗しました。")]
    ShopInvalidReceipt = 262006
    # [Description("使用ずみのレシートです。")]
    ShopAlreadyUsedReceipt = 262007
    # [Description("補填ずみのレシートです。")]
    ShopAlreadyRecoveredReceipt = 262008
    # [Description("不正なリクエストです。")]
    ShopReceiveRewardInvalidRequest = 262009
    # [Description("必要条件を満たしていません。")]
    ShopReceiveAchievementPackRewardNotEnoughChapterId = 262010
    # [Description("必要条件を満たしていません。")]
    ShopReceiveAchievementPackRewardAlreadyReceive = 262011
    # [Description("期限が切れています。")]
    ShopMonthlyBoostExpired = 262012
    # [Description("既に受取済みです。")]
    ShopMonthlyBoostDailyRewardAlreadyGet = 262013
    # [Description("受取出来ません。")]
    ShopFirstChargeBonusNotReceived = 262014
    # [Description("不正なリクエストです。")]
    ShopFirstChargeBonusInvalidDay = 262015
    # [Description("不正な条件タイプです。")]
    ShopChargeBonusMissionTypeInvalid = 262016
    # [Description("ミッション情報が見つかりません。")]
    ShopChargeBonusMissionInfoNotFound = 262017
    # [Description("取得上限です。")]
    ShopLimitGetChargeBonus = 262018
    # [Description("不正なリクエストです。")]
    ShopEndChargeBonus = 262019
    # [Description("IOSレシート検証に失敗しました。")]
    ShopFailVerifyIOSReceipt = 262020
    # [Description("不正なリクエストです。")]
    ShopGrowthPackIsNotFree = 262021
    # [Description("レアリティ条件を満たしていません。")]
    ShopGrowthPackNotEnoughMaxRarity = 262022
    # [Description("コンテンツが解放されていません。")]
    ShopNotOpen = 262023
    # [Description("ダイヤが不足しています。")]
    ShopCurrencyNotEnough = 262024
    # [Description("既に受取済みです。")]
    ShopCurrencyMissionRewardAlreadyReceived = 262025
    # [Description("既に登録済です。")]
    ShopConfirmAgeAlreadyRegister = 262028
    # [Description("無料ではありません。")]
    ShopRewardIsNotFree = 262029
    # [Description("データが見つかりません。")]
    ShopGuerrillaPackInfoNotFound = 262030
    # [Description("アイテム情報が見つかりません。")]
    ShopCurrencyMissionItemInfoNotFound = 262031
    # [Description("アイテム情報が見つかりません。")]
    ShopAchievementPackItemInfoNotFound = 262032
    # [Description("課金情報と一致しないアカウントです。")]
    ShopInvalidAccount = 262033
    # [Description("購入条件を満たしてありません。")]
    ShopBuyProductNotEnoughCondition = 262034
    # [Description("表示期間条件が不正です。")]
    ShopInvalidDisplayPeriodType = 262035
    # [Description("IOS側の一時的な問題で復元処理を利用してください。")]
    ShopIosVerifyReceiptProblem = 262036
    # [Description("レシートデータが見つかりません。")]
    ShopNotFoundReceipt = 262037
    # [Description("課金処理セッションが切れました。")]
    ShopNotFoundSession = 262038
    # [Description("支払いが完了されてないです。")]
    ShopNotPaid = 262039
    # [Description("使用可能なクーポンデータが存在しません。")]
    ShopNotFoundCouponData = 262040
    # [Description("使用済みのクーポンです。")]
    ShopAlreadyUsedCoupon = 262041
    # [Description("利用できない商品タイプです。")]
    ShopNotSupportShopProductType = 262042
    # [Description("ユーザーのステータスデータが見つかりません。")]
    ChatUserStatusDtoNotFound = 271000
    # [Description("ユーザーのアカウントデータが見つかりません。")]
    ChatUserAccountDtoNotFound = 271001
    # [Description("ユーザーのギルドデータが見つかりません。")]
    ChatUserGuildDtoNotFound = 271002
    # [Description("対象ユーザにブロックされています。")]
    ChatBlockedByTargetPlayer = 272000
    # [Description("時間の指定が無効です。")]
    ChatInvalidRequestTimeStamp = 272001
    # [Description("自分自身に送信することはできません。")]
    ChatPlayerCanNotSendChatToHimself = 272002
    # [Description("チャットの間隔が短すぎます。")]
    ChatSendMessageRestriction = 272003
    # [Description("チャット禁止中です")]
    ChatSendMessageBanChat = 272004
    # [Description("ギルドに参加していません。")]
    ChatNotBelongToGuild = 272005
    # [Description("指定されたチャット情報が存在しません。")]
    ChatNotFoundChatInfo = 272006
    # [Description("チャットを投稿した本人ではありません。")]
    ChatNotSendPlayer = 272007
    # [Description("無効なリアクション種別です。")]
    ChatNotDefinedReactionType = 272008
    # [Description("リアクションを付けることができないチャットです。")]
    ChatCanNotReact = 272009
    # [Description("既にアナウンスチャットに登録されています。")]
    ChatAlreadyRegistered = 272010
    # [Description("権限あるメンバーのみ使用可能です。")]
    ChatAnnounceHasNoAuthority = 272011
    # [Description("アナウンスに登録可能な最大数を超過しています。")]
    ChatOverMaxRegisterAnnounceChatCount = 272012
    # [Description("アナウンスチャットのインターバル中です。")]
    ChatGuildChatAnnounceInterval = 272013
    # [Description("所持していないふきだしです。")]
    ChatSettingNotHaveBalloon = 272014
    # [Description("所持していない背景です。")]
    ChatSettingNotHaveBackground = 272015
    # [Description("設定できない文字サイズです。")]
    ChatSettingNotAllowedFontSize = 272016
    # [Description("未受け取りのプレゼントは削除できません。")]
    PresentDeleteNotReceivedPresent = 282001
    # [Description("削除済みのプレゼントは受け取れません。")]
    PresentReceiveDeletedPresent = 282002
    # [Description("プレゼントアイテムデータが存在しません。")]
    PresentItemListDataIsNull = 282003
    # [Description("プレゼントの受け取り期限を過ぎたため、受け取れませんでした。")]
    PresentReceiveExpiredPresent = 282004
    # [Description("アイテムが所持数上限に達しているため受け取れません。")]
    PresentReceiveOverLimitCountPresent = 282005
    # [Description("プレゼント機能が解放されていません。")]
    PresentNotOpen = 282006
    # [Description("受け取り済みのプレゼントは受け取れません。")]
    PresentReceiveAlreadyReceivedPresent = 282007
    # [Description("ユーザーのギルドデータが見つかりません。")]
    LocalGvgUserGuildDtoNotFound = 291000
    # [Description("ユーザーの放置バトルデータが見つかりません。")]
    LocalGvgUserBattleAutoDtoNotFound = 291001
    # [Description("ユーザーはギルドに入っていません。")]
    LocalGvgUserNotJoinGuild = 292000
    # [Description("報酬受け取りに失敗しました。")]
    LocalGvgReceiveRewardInvalidRequest = 292001
    # [Description("マッチング処理中です。")]
    LocalGvgNotMatchingYet = 292002
    # [Description("受け取れる報酬が見つかりませんでした。")]
    LocalGvgNotFoundReceivableReward = 292003
    # [Description("指定されたパーティが存在しません。")]
    LocalGvgNotFoundParty = 292004
    # [Description("ユーザーのギルドデータが見つかりません。")]
    GlobalGvgUserGuildDtoNotFound = 301000
    # [Description("ギルドデータが見つかりません。")]
    GlobalGvgGuildDtoNotFound = 301001
    # [Description("ユーザーはギルドに入っていません。")]
    GlobalGvgUserNotJoinGuild = 302000
    # [Description("報酬受け取りに失敗しました。")]
    GlobalGvgReceiveRewardInvalidRequest = 302001
    # [Description("受け取れる報酬が見つかりませんでした。")]
    GlobalGvgNotFoundReceivableReward = 302003
    # [Description("指定されたパーティが存在しません。")]
    GlobalGvgNotFoundParty = 302004
    # [Description("ユーザのレベルリンクデータが見つかりません")]
    LevelLinkUserLevelLinkDtoNotFound = 311000
    # [Description("ユーザのキャラクターデータが見つかりません")]
    LevelLinkUserCharacterDtoNotFound = 311001
    # [Description("ユーザのレベルリンクメンバーデータが見つかりません")]
    LevelLinkUserLevelLinkMemberDtoNotFound = 311002
    # [Description("ユーザの情報データが見つかりません")]
    LevelLinkUserStatusDtoNotFound = 311003
    # [Description("セットずみのキャラクターが含まれています")]
    LevelLinkAlreadySetCharacter = 312000
    # [Description("セットできるメンバー数を超えました")]
    LevelLinkOverMember = 312001
    # [Description("パーティーレベルがもう最大です")]
    LevelLinkAlreadyMaxPartyLevel = 312002
    # [Description("条件を満たしているベースメンバー数が足りません")]
    LevelLinkNotEnoughMaxLevelBaseMember = 312003
    # [Description("メンバー枠の最大数を超えました")]
    LevelLinkOverMemberCount = 312004
    # [Description("パーティーレベルモードが開放されていません。")]
    LevelLinkNotPartyLevelModeOpen = 312008
    # [Description("通話での開放限度数を超過しました。")]
    LevelLinkOverOpenSlotCountWithCurrency = 312009
    # [Description("すでに パーティーモードです。")]
    LevelLinkAlreadyPartyMode = 312010
    # [Description("レベルリンク機能が開放されていません")]
    LevelLinkNotOpen = 312011
    # [Description("VipLvが不足しています")]
    VipBuyVipGiftNotEnoughVipLv = 322000
    # [Description("購入済みです")]
    VipBuyVipGiftAlreadyBuy = 322001
    # [Description("商品データが存在しません")]
    VipBuyVipGiftInvalidRequestVipGiftId = 322002
    # [Description("取得済みです")]
    VipGetDailyGiftAlreadyGet = 322003
    # [Description("ユーザーのステータスデータが存在しません。")]
    LoginBonusUserStatusDtoNotFound = 331000
    # [Description("ユーザーの月間ログインボーナス情報が存在しません。")]
    LoginBonusUserMonthlyLoginBonusDtoNotFound = 331001
    # [Description("ユーザーの期間限定ログインボーナス情報が存在しません。")]
    LoginBonusUserLimitedLoginBonusDtoNotFound = 331002
    # [Description("既に受け取り済みの日別報酬です。")]
    LoginBonusAlreadyReceivedDailyReward = 332000
    # [Description("未来の報酬は受け取れません。")]
    LoginBonusReceiveFutureReward = 332001
    # [Description("過去受取可能数が不足しています。")]
    LoginBonusReceivablePastRewardCountNotEnough = 332002
    # [Description("日別報酬情報が存在しません。")]
    LoginBonusDailyRewardInfoIsNull = 332003
    # [Description("既に受け取り済みの合計ログイン報酬です。")]
    LoginBonusAlreadyReceivedLoginCountReward = 332004
    # [Description("合計ログイン日数が不足しています。")]
    LoginBonusLoginCountNotEnough = 332005
    # [Description("合計ログイン報酬情報が存在しません。")]
    LoginBonusLoginCountRewardInfoIsNull = 332006
    # [Description("期間限定ログインボーナスが解放されていません。")]
    LoginBonusLimitedLoginBonusNotOpen = 332101
    # [Description("期間限定ログインボーナスが開催されていません。")]
    LoginBonusLimitedLoginBonusNotHeld = 332102
    # [Description("特別報酬が存在しません。")]
    LoginBonusNotExistSpecialReward = 332103
    # [Description("既に特別報酬は受け取り済みです。")]
    LoginBonusAlreadyReceivedSpecialReward = 332104
    # [Description("ユーザーデータが存在しません。")]
    NoticeUserAccountDtoNotFound = 341001
    # [Description("指定のお知らせアクセス種別が定義されていません")]
    NoticeNotDefinedNoticeAccessType = 342001
    # [Description("指定のお知らせカテゴリーが定義されていません。")]
    NoticeNotDefinedNoticeCategoryType = 342002
    # [Description("指定のお知らせカテゴリーはタイトルから取得できません。")]
    NoticeCanNotGetNoticeAccessCategoryInTitle = 342003
    # [Description("指定の言語種別が定義されていません。")]
    NoticeNotDefinedLanguageType = 342004
    # [Description("ユーザーのミッションデータが存在しません。")]
    MissionUserMissionDtoNotFound = 351000
    # [Description("ユーザーのミッションデータが存在しません。")]
    MissionUserMissionActivityDtoNotFound = 351001
    # [Description("ユーザーの放置バトルデータが存在しません。")]
    MissionUserBattleAutoDtoNotFound = 351002
    # [Description("ユーザーのチュートリアルデータが存在しません。")]
    MissionUserTutorialDtoNotFound = 351003
    # [Description("ユーザーのミッション履歴データが存在しません。")]
    MissionUserMissionOccurrenceHistoryDtoNotFound = 351004
    # [Description("ユーザーのボスバトルデータが存在しません。")]
    MissionUserBattleBossDtoNotFound = 351005
    # [Description("未解放のミッションです。")]
    MissionNotOpenMission = 352000
    # [Description("報酬が受け取れません。")]
    MissionNotReceivedMission = 352001
    # [Description("要求値を満たしていません。")]
    MissionNotEnoughRequireCount = 352002
    # [Description("存在しない報酬タイプです。")]
    MissionNotExistRewardType = 352003
    # [Description("購入できないミッションです。")]
    MissionMBNotAchievementType = 352004
    # [Description("通貨が不足しています。")]
    MissionNotEnoughCurrency = 352005
    # [Description("存在しないミッショングループタイプです。")]
    MissionNotExistMissionGroupType = 352006
    # [Description("MBがない、または達成済です。")]
    MissionActivityMBNotFoundOrAlreadyAchieved = 352007
    # [Description("受取出来ません。")]
    MissionActivityRewardNotReceived = 352008
    # [Description("存在しないシート番号です。")]
    MissionNotExistSheetNo = 352021
    # [Description("存在しないビンゴ種別です。")]
    MissionNotExistBingoType = 352022
    # [Description("受け取り済みのビンゴ報酬です。")]
    MissionAlreadyReceivedBingoReward = 352023
    # [Description("ビンゴが達成出来ていません。")]
    MissionNotCompletedBingo = 352024
    # [Description("ビンゴ報酬が存在しません。")]
    MissionNotFoundBingoReward = 352025
    # [Description("前のシートをクリアしていません。")]
    MissionNotClearedPrevSheetMission = 352026
    # [Description("ギルドツリーイベント終了後にギルドに加入したためミッションを開けません。")]
    MissionJoinGuildAfterEndEvent = 352030
    # [Description("ユーザーの放置バトルデータが存在しません。")]
    TradeShopUserBattleAutoDtoNotFound = 361000
    # [Description("ユーザーの放置バトルデータが存在しません。")]
    TradeShopUserStatusDtoNotFound = 361001
    # [Description("ユーザーの交換所データが存在しません。")]
    TradeShopUserTradeShopDtoNotFound = 361002
    # [Description("購入できない景品です。")]
    TradeShopInvalidTradeShopItem = 362000
    # [Description("購入可能な時間が過ぎました。")]
    TradeShopLimitTimeOver = 362001
    # [Description("購入制限を超えました。")]
    TradeShopOverLimitBuyCount = 362002
    # [Description("手動更新できないタブです。")]
    TradeShopInvalidResetType = 362003
    # [Description("利用できないタブです。")]
    TradeShopIsHideTab = 362004
    # [Description("有効期間ではありません。")]
    TradeShopNotOpen = 362005
    # [Description("受け取り可能なランキング到達報酬データが存在しません。")]
    RankingWorldReceivableRankingRewardDtoNotFound = 371000
    # [Description("ランキングが解放されていません。")]
    RankingNotOpenRankingContent = 372000
    # [Description("受け取り出来ないランキング到達報酬です。")]
    RankingCanNotReceiveReward = 372001
    # [Description("既に受け取り済みのランキング到達報酬です。")]
    RankingAlreadyReceivedRankingReward = 372002
    # [Description("ランキング到達報酬が解放されていません。")]
    RankingNotOpenAchieveRankingReward = 372003
    # [Description("パネル図鑑表示期間外です。")]
    PanelNotStarted = 382000
    # [Description("無条件で解放されているパネルです。")]
    PanelUnlockFreePanel = 382001
    # [Description("既に解放しているパネルです。")]
    PanelAlreadyUnlocked = 382002
    # [Description("ユーザーの楽曲データが存在しません。")]
    MusicUserMusicDtoNotFound = 391000
    # [Description("ユーザーのプレイリストデータが存在しません。")]
    MusicUserPlaylistDtoNotFound = 391001
    # [Description("楽曲再生が解放されていません。")]
    MusicNotOpenMusicContent = 392000
    # [Description("プレイリストの上限を超えています。")]
    MusicOverMaxPlaylistCount = 392001
    # [Description("プレイリスト名が入力されていません。")]
    MusicEmptyPlaylistName = 392002
    # [Description("プレイリストは15文字まで入力できます。")]
    MusicOverMaxLengthPlaylistName = 392003
    # [Description("使用できない単語が含まれています。")]
    MusicExistNgWordInPlaylistName = 392004
    # [Description("購入済みです。")]
    MusicAlreadyBuyMusic = 392005
    # [Description("不正な楽曲IDです。")]
    MusicInvalidMusicId = 392006
    # [Description("プレイリストの曲数上限を超えています。")]
    MusicOverMaxPlaylistMusicCount = 392007
    # [Description("ユーザーのアカウント情報が存在しません")]
    TutorialAccountDtoNotFound = 401000
    # [Description("ユーザーのステータス情報が存在しません")]
    TutorialUserStatusDtoNotFound = 401001
    # [Description("ユーザーの放置バトル情報が存在しません")]
    TutorialUserBattleAutoDtoNotFound = 401002
    # [Description("ユーザーのデッキ情報が存在しません")]
    TutorialUserDeckDtoNotFound = 401003
    # [Description("不正なリクエストです")]
    TutorialOpenContentInvalidRequest = 402000
    # [Description("演出再生済みです")]
    TutorialOpenContentAlready = 402001
    # [Description("不正なチュートリアルIDです")]
    TutorialClearTutorialInvalidTutorialId = 402002
    # [Description("既に達成済みのチュートリアルです")]
    TutorialClearTutorialAlreadyCleared = 402003
    # [Description("スキップ対象のチュートリアルが存在しません")]
    TutorialSkipTutorialIdIsNullOrEmpty = 402004
    # [Description("スキップの条件を満たしていません")]
    TutorialNotEnoughSkipCondition = 402005
    # [Description("ユーザーのギルドツリー情報が存在しません。")]
    GuildTowerUserGuildTowerDtoNotFound = 410000
    # [Description("ユーザーのキャラ情報が存在しません。")]
    GuildTowerUserCharacterDtoNotFound = 410001
    # [Description("ユーザーのギルド情報が存在しません。")]
    GuildTowerUserGuildDtoNotFound = 410002
    # [Description("ユーザー情報が存在しません。")]
    GuildTowerUserStatusDtoNotFound = 410003
    # [Description("ギルドツリー情報が存在しません。")]
    GuildTowerGuildTowerDtoNotFound = 410004
    # [Description("ギルドツリー前勝利データが存在しません。")]
    GuildTowerUserGuildTowerPreviousEntryInfoDtoNotFound = 410005
    # [Description("ギルドツリーギルドデータが存在しません。")]
    GuildTowerGuildDtoNotFound = 410006
    # [Description("ギルドツリーイベントが開催されていません。")]
    GuildTowerNotOpenEvent = 412000
    # [Description("ユーザーがギルドに所属していません。")]
    GuildTowerNotBelongToGuild = 412001
    # [Description("ギルドツリーの挑戦回数が足りません。")]
    GuildTowerNotEnoughChallengeCount = 412002
    # [Description("存在しないキャラが含まれています。")]
    GuildTowerNotFoundCharacter = 412003
    # [Description("エントリータイプが不正です。")]
    GuildTowerInvalidGuildTowerEntryType = 412004
    # [Description("持ってないキャラが含まれています。")]
    GuildTowerInvalidCharacter = 412005
    # [Description("登録キャラリストが空いています。")]
    GuildTowerEmptyEntryCharacter = 412006
    # [Description("日付が変わるまでは使えません。")]
    GuildTowerNotChangeDay = 412007
    # [Description("挑戦できる階層ではありません。")]
    GuildTowerInvalidChallengeFloor = 412008
    # [Description("選択できない難易度です。")]
    GuildTowerInvalidDifficulty = 412009
    # [Description("不正な職業種別です。")]
    GuildTowerInvalidJobFlags = 412100
    # [Description("次の職業レベルデータが存在しません。")]
    GuildTowerNotFoundNextJobLevelData = 412101
    # [Description("職業強化に失敗しました。")]
    GuildTowerFailedToReinforceJob = 412102
    # [Description("レベルキャップ制限により強化出来ません。")]
    GuildTowerLimitReinforcementJobLevelCap = 412103
    # [Description("最大レベルのためこれ以上強化できません。")]
    GuildTowerReachedMaxReinforcementJobLevel = 412104
    # [Description("登録してないキャラが含まれています。")]
    GuildTowerInvalidEntryCharacter = 412105
    # [Description("ほかのギルドメンバーのバトルが終わっていません。")]
    GuildTowerNotYetEndBattle = 412106
    # [Description("ギルドツリーのギルド全体の挑戦回数が足りません。")]
    GuildTowerNotEnoughGuildChallengeCount = 412107
    # [Description("ギルドに参加した日は挑戦できません。")]
    GuildTowerCannotChallengeOnJoinGuildDate = 412108
    # [Description("タイプ強化を行ったプレイヤーが存在しません。")]
    GuildTowerNotFoundReinforceJobPlayer = 412109
    # [Description("クリアされた階層です。")]
    GuildTowerAlreadyClearFloor = 412110
    # [Description("まだクリアされていない階層の報酬は受け取れません。")]
    GuildTowerCanNotReceiveNotClearedFloorReward = 412200
    # [Description("既に受け取り済みの階層報酬です。")]
    GuildTowerAlreadyReceivedFloorReward = 412201
    # [Description("イベント終了後にギルドに加入したため階層報酬を受け取ることができません。")]
    GuildTowerJoinedGuildAfterEndEvent = 412202
    # [Description("本日の挑戦時間を過ぎています。")]
    GuildTowerOverTodayChallengeTime = 412203
    # [Description("個別通知キャッシュ情報が存在しません")]
    IndividualNotificationCacheDtoNotFound = 421000
    # [Description("ユーザーの個別通知情報が存在しません")]
    IndividualNotificationDtoNotFound = 421001
    # [Description("星導交換所情報が存在しません")]
    StarsGuidanceTradeShopDtoNotFound = 431000
    # [Description("星導交換所が開催されていません。")]
    StarsGuidanceTradeShopNotOpen = 432000
    # [Description("星導交換所機能は使えません。")]
    StarsGuidanceTradeShopUnavailable = 432001
    # [Description("交換元アイテム情報が不正です。")]
    StarsGuidanceTradeShopConsumeItemInvalid = 432002
    # [Description("交換制限を超えました。")]
    StarsGuidanceTradeShopOverLimitTradeCount = 432003
    # [Description("人気投票機能は使えません。")]
    PopularityVoteUnavailable = 442000
    # [Description("人気投票が可能な期限ではありません。")]
    PopularityVoteNotVotingPeriod = 442001
    # [Description("投票可能なキャラではありません。")]
    PopularityVoteNotEntryCharacter = 442002
    # [Description("マイリストから解除できません。")]
    PopularityVoteInvalidRemoveCharacterFromMyList = 442003
    # [Description("マイリストに登録ずみのキャラクターです。")]
    PopularityVoteAlreadyRegisterCharacter = 442004
    # [Description("マイリストに登録できないキャラクターです。")]
    PopularityVoteNotFoundEntryCharacter = 442005
    # [Description("投票報酬がありません。")]
    PopularityVoteNotFoundVoteCountReward = 442006
    # [Description("累積投票数が足りません。")]
    PopularityVoteNotEnoughGoalVoteCount = 442007
    # [Description("受け取り済みの報酬です。")]
    PopularityVoteAlreadyRewardGoalVoteCountItem = 442008
    # [Description("予選結果を確認できる期限ではありません。")]
    PopularityVoteUnavailablePreliminaryResult = 442009
    # [Description("本選結果を確認できる期限ではありません。")]
    PopularityVoteUnavailableFinalResult = 442010
    # [Description("シリアルコードに間違いがあるか不正な文字が含まれています。")]
    SerialCodeInvalidCode = 450001
    # [Description("シリアルコードの有効期限が終了しました。")]
    SerialCodeInvalidDate = 450002
    # [Description("連続して無効なコードが入力されました。5分後に再度お試しください。")]
    SerialCodeContinuousInput = 450003
    # [Description("このシリアルコードは既に使用されました。")]
    SerialCodeAlreadyUsedSameCodeGroup = 450004
    # [Description("利用条件を満たしていないシリアルコードが入力されました。入力条件をご確認ください。")]
    SerialCodeAlreadyUsedOtherCodeGroup = 450005
    # [Description("入力されたシリアルコードはBOI版アプリ内のコード入力でのみ使用可能です。")]
    SerialCodeOnlyBoiAvailable = 450006
    # [Description("バトルリーグの集計データが存在しません。")]
    WeeklyTopicsNotFoundWeeklyTopicsBattleLeagueDto = 460001
    # [Description("ボスバトルの集計データが存在しません。")]
    WeeklyTopicsNotFoundWeeklyTopicsBossBattleDto = 460002
    # [Description("存在しない属性です。")]
    WeeklyTopicsNotDefinedElementType = 461001
    # [Description("存在しないバトル種別です。")]
    WeeklyTopicsNotDefinedBattleType = 461002
    # [Description("存在しないバトルトークンです。")]
    WeeklyTopicsBattleTokenIsNullOrEmpty = 461003
    # [Description("バトルの詳細ログが存在しません。")]
    WeeklyTopicsNotFoundHighlightBattleResult = 461004
    # [Description("週間トピックスが解放されていません。")]
    WeeklyTopicsNotOpen = 461005
    # [Description("ユーザーのユーザーの個人情報データが存在しません。")]
    LuckyChanceNotFoundUserPersonalInfoDto = 470001
    # [Description("ユーザーの抽選回数が上限に達しています。")]
    LuckyChanceUserDrawCountLimit = 471001
    # [Description("抽選の最中にDBのデータ更新に失敗しました。")]
    LuckyChanceFailedToUpdateDbData = 471002
    # [Description("有効なメールアドレスを入力してください。")]
    LuckyChanceInvalidEmailFormat = 471003
    # [Description("メールアドレスの認証に失敗しました。登録時に使用したメールアドレスのみ有効です。")]
    LuckyChanceDifferentFromRegisteredMailAddress = 471004
    # [Description("認証コード生成のインターバル中です。")]
    LuckyChanceAuthCodeInterval = 471005
    # [Description("認証メールの送信に失敗しました。")]
    LuckyChanceFailedToSendMail = 471006
    # [Description("認証コードが存在しません。")]
    LuckyChanceNotFoundAuthCode = 471007
    # [Description("認証コードが間違っています。")]
    LuckyChanceInvalidAuthCode = 471008
    # [Description("氏名を入力してください。")]
    LuckyChanceInvalidPersonalInfoName = 471009
    # [Description("フリガナを全角カタカナで入力してください。")]
    LuckyChanceInvalidPersonalInfoFurigana = 471010
    # [Description("郵便番号を入力してください。")]
    LuckyChancePersonalInfoPostalCodeIsEmpty = 471011
    # [Description("郵便番号を7桁で入力してください。")]
    LuckyChanceInvalidPersonalInfoPostalCode = 471012
    # [Description("電話番号を入力してください。")]
    LuckyChancePersonalInfoPhoneNumberIsEmpty = 471013
    # [Description("0から始まる10~11桁の電話番号を入力してください。")]
    LuckyChanceInvalidPersonalInfoPhoneNumber = 471014
    # [Description("メールアドレスを入力してください。")]
    LuckyChancePersonalInfoMailAddressIsEmpty = 471015
    # [Description("有効なメールアドレスを入力してください。")]
    LuckyChanceInvalidPersonalInfoMailAddress = 471016
    # [Description("交換可能なリアル景品を所持していません。")]
    LuckyChanceNotFoundValidRealItem = 471017
    # [Description("アイテムの当選数が不足しています。")]
    LuckyChanceShortageLotteryItemCount = 471018
    # [Description("交換先のアイテム情報が存在しません。")]
    LuckyChanceNotFoundExchangeGameItem = 471019
    # [Description("ラッキーチャンスの抽選機能が解放されていません。")]
    LuckyChanceNotOpenDrawLuckyChance = 471020
    # [Description("氏名を全角で入力してください。")]
    LuckyChanceContainsHalfWidthCharacterName = 471021
    # [Description("都道府県を入力してください。")]
    LuckyChancePrefectureIsEmpty = 471022
    # [Description("都道府県を全角で入力してください。")]
    LuckyChanceContainsHalfWidthCharacterPrefecture = 471023
    # [Description("市区町村を入力してください。")]
    LuckyChanceMunicipalityIsEmpty = 471024
    # [Description("市区町村を全角で入力してください。")]
    LuckyChanceContainsHalfWidthCharacterMunicipality = 471025
    # [Description("番地以降を入力してください。")]
    LuckyChanceBlockNumberIsEmpty = 471026
    # [Description("番地以降を全角で入力してください。")]
    LuckyChanceContainsHalfWidthCharacterBlockNumber = 471027
    # [Description("建物名を全角で入力してください。")]
    LuckyChanceContainsHalfWidthCharacterBuildingName = 471028
    # [Description("ユーザーのフレンド情報が見つかりません。")]
    FriendBattleUserFriendDtoNotFound = 480000
    # [Description("ユーザーのステータス情報が見つかりません。")]
    FriendBattleUserStatusDtoNotFound = 480001
    # [Description("ユーザーのデッキ情報が見つかりません。")]
    FriendBattleUserDeckDtoNotFound = 480002
    # [Description("模擬戦の機能が解放されていません。")]
    FriendBattleNotOpen = 481000
    # [Description("対戦相手がフレンドではありません。")]
    FriendBattleNotFriend = 481001
    # [Description("対戦相手が模擬戦を許可していません。")]
    FriendBattleNotAllowedByRival = 481002
    # [Description("自分が模擬戦を許可していません。")]
    FriendBattleNotAllowedBySelf = 481003
    # [Description("既にお気に入り登録をしているプレイヤーです。")]
    FriendBattleAlreadySetFavoritePlayer = 481004
    # [Description("1日の挑戦回数の上限に達しています。")]
    FriendBattleLimitChallengeCount = 481005
    # [Description("模擬戦のバトル詳細ログが見つかりません。")]
    FriendBattleNotFoundBattleDetailLog = 481006
    # [Description("アンケート情報が見つかりません。")]
    GuildSurveyNotFoundGuildSurveyDto = 490000
    # [Description("プレイヤーがギルドに参加していません。")]
    GuildSurveyNotBelongToGuild = 491000
    # [Description("権限が足りていません。")]
    GuildSurveyHasNoPermission = 491001
    # [Description("無効な投票期限が設定されています。")]
    GuildSurveyInvalidVotingEndTimestamp = 491002
    # [Description("本文が入力されていません。")]
    GuildSurveyContentIsEmpty = 491003
    # [Description("選択肢が入力されていません。")]
    GuildSurveyContainsEmptyChoice = 491004
    # [Description("無効な選択肢が設定されています。")]
    GuildSurveyInvalidChoices = 491005
    # [Description("無効な選択肢種別です。")]
    GuildSurveyInvalidGuildSurveyChoiceType = 491006
    # [Description("アンケートに存在しない選択肢です。")]
    GuildSurveyNotFoundGuildSurveyChoiceType = 491007
    # [Description("本文の文字数が上限を超えています。")]
    GuildSurveyOverContentLength = 491008
    # [Description("選択肢の文字数が上限を超えています。")]
    GuildSurveyOverChoiceLength = 491009
    # [Description("アンケートの登録件数がが上限に達しています。")]
    GuildSurveyOverSurveyCount = 491010
    # [Description("異なるギルドのアンケートが指定されています。")]
    GuildSurveyDifferentGuildSurvey = 491011
    # [Description("魔女の書庫整理情報が見つかりません。")]
    BookSortNotFoundUserBookSortDto = 500000
    # [Description("魔女の書庫整理が解放されていません。")]
    BookSortEventNotOpen = 501000
    # [Description("魔女の書庫整理が開催されていません。")]
    BookSortEventNotHeld = 501001
    # [Description("すでに当たりマスを解放済みです。")]
    BookSortEventCurrentFloorAlreadyFinished = 501002
    # [Description("ボーナスフロア報酬が未選択です。")]
    BookSortEventNotSelectBonusFloorReward = 501003
    # [Description("ボーナスフロア報酬のラインナップが更新されました。")]
    BookSortEventChangeBonusFloorRewardLineup = 501004
    # [Description("ボーナスフロアではないフロアです。")]
    BookSortEventNotBonusFloor = 501005
    # [Description("まだ当たりマスを解放していません。")]
    BookSortEventCurrentFloorNotFinish = 501006
    # [Description("枠外が解放対象に指定されています。")]
    BookSortEventUnlockOutsideFrame = 501007
    # [Description("対象の範囲に、解放可能なマスがありません。")]
    BookSortEventNotExistAvailableGridCell = 501008
    # [Description("一マス解放アイテムが足りないため、一括解放できません。")]
    BookSortEventNotEnoughBulkUnlockItem = 501009
    # [Description("残りマスが3つ未満のため、一括解放できません。")]
    BookSortEventNotEnoughLockedGridCellBulkUnlock = 501010
    # [Description("選択できないボーナスフロア報酬です。")]
    BookSortEventNotSelectableBonusFloorReward = 501011
    # [Description("存在しないTreasureChestです。")]
    ItemOpenTreasureChestIdNotFound = 602004
    # [Description("存在しないTreasureChestです。")]
    ItemOpenTreasureChestItemNotFound = 602005
    # [Description("開ける数が少なすぎます。")]
    ItemOpenTreasureChestCountTooLittle = 602006
    # [Description("この宝箱は報酬を選択できません。")]
    ItemOpenTreasureChestCanNotSelect = 602007
    # [Description("この宝箱は報酬を選択してください。")]
    ItemOpenTreasureChestNotSelected = 602008
    # [Description("変換する数が足りません")]
    ItemNotEnoughChangeItemCount = 602009
    # [Description("抽選タイプが不正です。")]
    ItemNotMatchLotteryType = 602010
    # [Description("アイテムの終了日が不正です。")]
    ItemInvalidEndTime = 602011
    # [Description("宝箱の抽選アイテムが存在しません。")]
    ItemGetLotteryItemListGachaLotteryItemListInfoListIsEmpty = 602014
    # [Description("宝箱の抽選リストタイプが定義されていません。")]
    ItemOpenTreasureChestTreasureChestItemListTypeNotDefined = 602015
    # [Description("宝箱の抽選タイプが定義されていません。")]
    ItemOpenTreasureChestTreasureChestLotteryTypeNotDefined = 602016
    # [Description("リクエストの値が範囲外です。")]
    ItemOpenTreasureChestIndexOutOfRange = 602017
    # [Description("宝箱の抽選アイテムが存在しません。")]
    ItemOpenTreasureChestStaticItemIsNull = 602018
    # [Description("天井対象のアイテムが存在しません。")]
    ItemOpenTreasureChestCeilingTargetItemNotFound = 602019
    # [Description("特別アイコンアイテムが存在しません。")]
    ItemSpecialIconItemNotFound = 602020
    # [Description("ゴールド交換は解放されていません。")]
    ItemGoldExchangeNotOpen = 602021
    # [Description("不正なリクエストです")]
    ItemUsingInvalidItems = 602022
    # [Description("一括使用は解放されていません。")]
    ItemBulkUseItemNotOpen = 602023
    # [Description("一括使用できないアイテムです。")]
    ItemBulkUseItemNotSupported = 602024
    # [Description("指定できない武具タイプが指定されています")]
    ItemOpenEquipmentSetMaterialBoxNotSupportedEquipmentType = 602025
    # [Description("指定できないレベルが指定されています")]
    ItemOpenEquipmentSetMaterialBoxNotSupportedLevel = 602026
    # [Description("アダマントボックスが期限外です")]
    ItemOpenEquipmentSetMaterialBoxNotOpen = 602027
    # [Description("LocalRaidで解散に失敗した")]
    MagicOnionLocalRaidDisbandRoomFailed = 900102
    # [Description("LocalRaidで他の部屋に参加しているので参加に失敗した")]
    MagicOnionLocalRaidJoinRoomAlreadyJoinedOtherRoom = 900103
    # [Description("LocalRaidで残り挑戦回数が不足していて参加に失敗した")]
    MagicOnionLocalRaidJoinRoomNoRemainingChallenges = 900104
    # [Description("LocalRaidで部屋が存在してなくて参加に失敗した")]
    MagicOnionLocalRaidJoinRoomNotExistRoom = 900105
    # [Description("LocalRaidでチームが満員で参加に失敗した")]
    MagicOnionLocalRaidJoinRoomMembersAreFull = 900106
    # [Description("LocalRaidで戦闘力不足で参加に失敗した")]
    MagicOnionLocalRaidJoinRoomNotEnoughBattlePower = 900107
    # [Description("LocalRaidでパスワードが不正で参加に失敗した")]
    MagicOnionLocalRaidJoinRoomWrongPassword = 900108
    # [Description("LocalRaidでRedis処理エラーで参加に失敗した")]
    MagicOnionLocalRaidJoinRoomRedisError = 900109
    # [Description("LocalRaidで脱退に失敗した")]
    MagicOnionLocalRaidLeaveRoomFailed = 900110
    # [Description("LocalRaidで部屋が存在してなくて脱退に失敗した")]
    MagicOnionLocalRaidLeaveRoomNotExistRoom = 900111
    # [Description("LocalRaidでリーダーなので脱退に失敗した")]
    MagicOnionLocalRaidLeaveRoomIsLeader = 900112
    # [Description("LocalRaidでデータの取得に失敗して脱退に失敗した")]
    MagicOnionLocalRaidLeaveRoomNotFoundData = 900113
    # [Description("LocalRaidでRedis処理エラーで脱退に失敗した")]
    MagicOnionLocalRaidLeaveRoomRedisError = 900114
    # [Description("LocalRaidで他の部屋に参加しているので作成に失敗した")]
    MagicOnionLocalRaidOpenRoomAlreadyJoinedOtherRoom = 900115
    # [Description("LocalRaidで開催していないクエストを参照したので作成に失敗した")]
    MagicOnionLocalRaidOpenRoomQuestNotHeld = 900116
    # [Description("LocalRaidで残り挑戦回数が不足していて作成に失敗した")]
    MagicOnionLocalRaidOpenRoomNoRemainingChallenges = 900117
    # [Description("LocalRaidでバトル開始に失敗した")]
    MagicOnionLocalRaidStartBattleFailed = 900118
    # [Description("LocalRaidでデータの取得に失敗してバトル開始に失敗した")]
    MagicOnionLocalRaidStartBattleNotFoundData = 900119
    # [Description("LocalRaidで開催期間が終了していてバトル開始に失敗した")]
    MagicOnionLocalRaidStartBattleExpiredLocalRaidQuest = 900120
    # [Description("LocalRaidで追放に失敗した")]
    MagicOnionLocalRaidRefuse = 900121
    # [Description("LocalRaidでデータの取得に失敗して追放に失敗した")]
    MagicOnionLocalRaidRefuseNotFoundData = 900122
    # [Description("LocalRaidでRedis処理エラーで追放に失敗した")]
    MagicOnionLocalRaidRefuseRedisError = 900123
    # [Description("LocalRaidで部屋が存在してなくて追放に失敗した")]
    MagicOnionLocalRaidRefuseNotExistRoom = 900124
    # [Description("LocalRaidでフレンド以外を誘って勧誘に失敗した")]
    MagicOnionLocalRaidInviteNotFriend = 900125
    # [Description("LocalRaidでデータの取得に失敗して勧誘に失敗した")]
    MagicOnionLocalRaidInviteNotFoundData = 900126
    # [Description("LocalRaidでデータの取得に失敗してフレンドの部屋への参加に失敗した")]
    MagicOnionLocalRaidJoinFriendRoomNotFoundData = 900127
    # [Description("LocalRaidで他の部屋に参加しているのでフレンドの部屋への参加に失敗した")]
    MagicOnionLocalRaidJoinFriendRoomAlreadyJoinedOtherRoom = 900128
    # [Description("LocalRaidで残り挑戦回数が不足していてフレンドの部屋への参加に失敗した")]
    MagicOnionLocalRaidJoinFriendRoomNoRemainingChallenges = 900129
    # [Description("LocalRaidでチームが満員でフレンドの部屋への参加に失敗した")]
    MagicOnionLocalRaidJoinFriendRoomMembersAreFull = 900130
    # [Description("LocalRaidでRedis処理エラーでフレンドの部屋への参加に失敗した")]
    MagicOnionLocalRaidJoinFriendRoomRedisError = 900131
    # [Description("LocalRaidで部屋が存在してなくてフレンドの部屋への参加に失敗した")]
    MagicOnionLocalRaidJoinFriendRoomNotExistRoom = 900132
    # [Description("LocalRaidで他の部屋に参加しているのでランダム参加に失敗した")]
    MagicOnionLocalRaidJoinRandomRoomAlreadyJoinedOtherRoom = 900133
    # [Description("LocalRaidで残り挑戦回数が不足していてランダム参加に失敗した")]
    MagicOnionLocalRaidJoinRandomRoomNoRemainingChallenges = 900134
    # [Description("LocalRaidで部屋が存在してなくてランダム参加に失敗した")]
    MagicOnionLocalRaidJoinRandomRoomNotExistRoom = 900135
    # [Description("LocalRaidでRedis処理エラーでランダム参加に失敗した")]
    MagicOnionLocalRaidJoinRandomRoomRedisError = 900136
    # [Description("LocalRaidで開催期間が終了していて解散された")]
    MagicOnionLocalRaidExpiredLocalRaidQuest = 900137
    # [Description("LocalRaidで残り挑戦回数が不足していて勧誘に失敗した")]
    MagicOnionLocalRaidInviteNoRemainingChallenges = 900138
    # [Description("LocalRaidで開催されているクエストないので失敗しました")]
    MagicOnionLocalRaidNotOpenQuest = 900139
    # [Description("LocalRaidでリーダーなので準備変更に失敗した")]
    MagicOnionLocalRaidReadyIsLeader = 900140
    # [Description("LocalRaidで準備完了ではないユーザがいる")]
    MagicOnionLocalRaidAllNotReady = 900141
    # [Description("LocalRaidで準備完了に失敗した")]
    MagicOnionLocalRaidReadyFailed = 900142
    # [Description("LocalRaidで部屋が存在してなくて準備完了に失敗した")]
    MagicOnionLocalRaidReadyNotExistRoom = 900143
    # [Description("LocalRaidでデータの取得に失敗して準備完了に失敗した")]
    MagicOnionLocalRaidReadyNotFoundData = 900144
    # [Description("LocalRaidでRedis処理エラーでフ準備完了に失敗した")]
    MagicOnionLocalRaidReadyRedisError = 900145
    # [Description("LocalRaidでルーム参加条件変更に失敗した")]
    MagicOnionLocalRaidUpdateRoomConditionFailed = 900146
    # [Description("LocalRaidでリーダーではないのでルーム参加条件変更に失敗した")]
    MagicOnionLocalRaidUpdateRoomConditionIsNotLeader = 900147
    # [Description("LocalRaidでRedis処理エラーでフルーム参加条件変更に失敗した")]
    MagicOnionLocalRaidUpdateRoomConditionRedisError = 900148
    # [Description("LocalRaidで戦闘力更新に失敗した")]
    MagicOnionLocalRaidUpdateBattlePowerFailed = 900150
    # [Description("LocalRaidで部屋が存在してなくて戦闘力更新に失敗した")]
    MagicOnionLocalRaidUpdateBattlePowerNotExistRoom = 900151
    # [Description("LocalRaidでデータの取得に失敗して戦闘力更新に失敗した")]
    MagicOnionLocalRaidUpdateBattlePowerNotFoundData = 900152
    # [Description("LocalRaidでRedis処理エラーでフ戦闘力更新に失敗した")]
    MagicOnionLocalRaidUpdateBattlePowerRedisError = 900153
    # [Description("LocalRaidで戦闘力不足でバトル開始に失敗した")]
    MagicOnionLocalRaidStartBattleNotEnoughBattlePower = 900154
    # [Description("LocalRaidで違うワールドのルームに入ろうとして失敗した")]
    MagicOnionLocalRaidJoinRoomNotSameWorld = 900155
    # [Description("LocalRaidでバトルデータが足りなくてバトル開始を失敗した")]
    MagicOnionLocalRaidNotEnoughBattleData = 900156
    # [Description("GlobalGvgで不正なリクエストによってパーティ追加に失敗した")]
    MagicOnionGlobalGvgAddCastlePartyInvalidRequest = 900302
    # [Description("GlobalGvgでデータの不整合によってパーティ追加に失敗した")]
    MagicOnionGlobalGvgAddCastlePartyInvalidData = 900303
    # [Description("GlobalGvgで配置できない城に配置しようとしてパーティ追加に失敗した")]
    MagicOnionGlobalGvgAddCastlePartyNotOwnCastle = 900304
    # [Description("GlobalGvgで行動力が不足してパーティ追加に失敗した")]
    MagicOnionGlobalGvgAddCastlePartyNotEnoughActionPoint = 900305
    # [Description("GlobalGvgで同じユニットを配置しようとしてパーティ追加に失敗した")]
    MagicOnionGlobalGvgAddCastlePartySameCharacter = 900306
    # [Description("GlobalGvgで先頭のパーティを操作しようとしてパーティ並び替えに失敗した")]
    MagicOnionGlobalGvgOrderCastlePartyFirst = 900307
    # [Description("GlobalGvgでデータの不整合によってパーティ並び替えに失敗した")]
    MagicOnionGlobalGvgOrderCastlePartyInvalidData = 900308
    # [Description("GlobalGvgでデータの不整合によって宣戦に失敗した")]
    MagicOnionGlobalGvgCastleDeclarationInvalidData = 900309
    # [Description("GlobalGvgで隣接していない城に宣戦しようとして宣戦に失敗した")]
    MagicOnionGlobalGvgCastleDeclarationDistant = 900310
    # [Description("GlobalGvgですでに他のギルドに宣戦されている城に宣戦しようとして宣戦に失敗した")]
    MagicOnionGlobalGvgCastleDeclarationByOtherGuild = 900311
    # [Description("GlobalGvgで宣戦の上限数を超えて宣戦しようとして宣戦に失敗した")]
    MagicOnionGlobalGvgCastleDeclarationMaxCount = 900312
    # [Description("GlobalGvgでデータの不整合によって反撃に失敗した")]
    MagicOnionGlobalGvgCastleDeclarationCounterInvalidData = 900313
    # [Description("GlobalGvgでギルドに加入してないエラー")]
    MagicOnionGlobalGvgCheckCanJoinBattleAndNoticeNotJoinGuild = 900314
    # [Description("GlobalGvgでギルドに加入した日は参加できないエラー")]
    MagicOnionGlobalGvgCheckCanJoinBattleAndNoticeJoinGuildToDay = 900315
    # [Description("GlobalGvgで権限がないメンバーは操作できないエラー")]
    MagicOnionGlobalGvgCheckCanJoinBattleAndNoticeHasNoPermission = 900316
    # [Description("GlobalGvgが開放されていない")]
    MagicOnionGlobalGvgNotOpen = 900317
    # [Description("GlobalGvgでキャラクターのキャッシュデータが存在しないためパーティ追加に失敗しました。")]
    MagicOnionGlobalGvgAddCastlePartyNotFoundCharacterCache = 900318
    # [Description("グランドバトルの参加条件を満たしていません。")]
    MagicOnionNotJoinedGrandBattle = 900319
    # [Description("認証に失敗しました。")]
    MagicOnionAuthenticationFail = 1000000
    # [Description("プレイヤーの情報を見つけません。")]
    MagicOnionNotFoundPlayerInfo = 1000001
    # [Description("ユーザーIDの取得に失敗しました。")]
    MagicOnionFailedToGetUserId = 1000002
    # [Description("ギルドに入ってないです。")]
    MagicOnionNotJoinGuild = 1001000
    # [Description("チャットの内容が長すぎです。")]
    MagicOnionChatLimitOver = 1001001
    # [Description("チャットは連投できません。")]
    MagicOnionRepeatTimeOver = 1001002
    # [Description("メッセージの送信に失敗しました。")]
    MagicOnionFailSendMessage = 1001003
    # [Description("チャット禁止中です")]
    MagicOnionBanChat = 1001004
    # [Description("不正な城のIdです。")]
    MagicOnionInvalidCastleId = 1002000
    # [Description("配置できない城です。")]
    MagicOnionCannotSetCastle = 1002001
    # [Description("行動力が足りません。")]
    MagicOnionNotEnoughActionPoint = 1002002
    # [Description("同じキャラクターを1つの城に2回以上配置できません。")]
    MagicOnionAlreadySetCharacter = 1002003
    # [Description("先頭のパーティは操作できません。")]
    MagicOnionCannotControllFirstParty = 1002004
    # [Description("データが不正です。")]
    MagicOnionInvalidData = 1002005
    # [Description("キャッシュデータが存在しません。")]
    MagicOnionNotFoundCache = 1002006
    # [Description("隣接した城ではありません。")]
    MagicOnionNotNeighborCastle = 1002007
    # [Description("すでに他のギルドに宣戦されています。")]
    MagicOnionAlreadySelectedOtherGuild = 1002008
    # [Description("これ以上宣戦できません。")]
    MagicOnionCannotAttackOtherGuild = 1002009
    # [Description("ギルドに加入した日はLocalGvgに参加できません。")]
    MagicOnionCannotPlayLocalGvgInFirstDay = 1002010
    # [Description("この機能は権限あるメンバーのみ実行できます。")]
    MagicOnionHasNoPermission = 1002011
    # [Description("ギルドバトルの参加条件を満たしていないです。")]
    MagicOnionNotJoinedGuildBattle = 1002012
    # [Description("宣戦する条件を満たしていないです。")]
    MagicOnionCanNotDeclaration = 1002013
    # [Description("キャラクターのキャッシュデータが存在しません。")]
    MagicOnionNotFoundCharacterCache = 1002014
    # [Description("作戦時間前のためまだ布告できません。")]
    MagicOnionBeforeDeclarationTime = 1002015
    # [Description("ギルドバトルが開催されていません。")]
    MagicOnionNotOpenGuildBattle = 1002016
    # [Description("キャラクターのキャッシュデータが存在しないためパーティの配置に失敗しました。")]
    MagicOnionLocalGvgAddPartyNotFoundCharacterCache = 1002017
    # [Description("拠点メモは設定できません。")]
    MagicOnionCanNotSetCastleMemo = 1002018
    # [Description("拠点メモの設定の権限がありません。")]
    MagicOnionHasNoPermissionSetCastleMemo = 1002019
    # [Description("拠点メモメッセージの最大文字数を超過しています。")]
    MagicOnionOverCastleMemoMessageMaxLength = 1002020
    # [Description("既に他のメンバーにより、拠点メモがリセット済みです。")]
    MagicOnionAlreadyResetCastleMemo = 1002021
    # [Description("プッシュ通知対象外の端末です。")]
    PushNotificationNotSupportedDeviceType = 4000000
    # [Description("プッシュ通知の登録に必要な情報が取得できません。")]
    InvalidDeviceToken = 4000001
    # [Description("不正なリクエストです。")]
    InvalidRemoteNotificationIgnoreTypes = 4000002
    # [Description("不正なリクエストです。")]
    NotSupportedRemoteNotificationIgnoreType = 4000003
    # [Description("不正なリクエストです。")]
    PushNotificationNotDefinedLanguageType = 4000004
    # [Description("DMM GAME PLAYERからゲームを起動しなおしてください。")]
    DmmOneTimeTokenExpired = 5000100
    # [Description("不正なリクエストです。")]
    DmmFailedToGetParamFromHeader = 5000101
    # [Description("DMM GAMESとの連携時にエラーが発生しました。")]
    DmmApiRequestFailedAuthCheckLogin = 5000102
    # [Description("DMM GAMESとの連携時にエラーが発生しました。")]
    DmmApiRequestFailed = 5000103
    # [Description("DMM GAMESとの連携時にエラーが発生しました。")]
    DmmApiRequestResultNotZero = 5000104
    # [Description("DMM GAMESとの連携時にエラーが発生しました。")]
    DmmApiRequestFailedIssueOneTimeToken = 5000105
    # [Description("DMM GAMESとの連携時にエラーが発生しました。")]
    DmmApiRequestFailedIdLinkage = 5000106
    # [Description("DMM GAMESとの連携時にエラーが発生しました。")]
    DmmMultiViewerIdLinkageRequested = 5000107
    # [Description("DMM GAMESとの連携機能がメンテナンス中です。")]
    DmmUnderMaintenance = 5000108
    # [Description("DMM GAMESとの連携情報が見つかりません。")]
    DmmDataLinkageInfoNotFound = 5000109
    # [Description("他のアカウントデータとDMMアカウントが連携しています。再度このアカウントデータとDMMアカウントを連携させてください。")]
    DmmDataLinkageNotActive = 5000110
    # [Description("DMM GAMESとの連携情報が見つかりません。")]
    DmmFailedToGetViewerId = 5000111
    # [Description("DMM ポイント確認に失敗しました。")]
    DmmApiRequestFailedAuthCheckPoint = 5000200
    # [Description("DMM月額課金サービスデータがそんざいしません。")]
    DmmApiRequestNotFoundDmmSubscription = 5000201
    # [Description("DMMのデバイスではありません。")]
    DmmApiRequestNotDmmDeviceType = 5000202
    # [Description("Stripe プレイヤーIDが存在しません。")]
    StripeNotFoundGivePlayerId = 5010000
    # [Description("Stripe MbIDが存在しません。")]
    StripeNotFoundMbId = 5010001
    # [Description("Stripe ProductIdが存在しません。")]
    StripeNotFoundProductId = 5010002
    # [Description("Stripe ShopProductTypeが存在しません。")]
    StripeNotFoundShopProductType = 5010003
    # [Description("Stripe DeviceTypeが存在しません。")]
    StripeNotFoundDeviceType = 5010004
    # [Description("Stripe InvoiceIdが存在しません。")]
    StripeNotFoundInvoiceId = 5010005
    # [Description("Stripe 決済されてないです。")]
    StripeNotPaidPaymentStatus = 5010006
    # [Description("Stripe 課金処理に問題が発生しました。")]
    StripeNotFoundCurrencyDataBase = 5010007
    # [Description("Stripe 課金処理情報が存在しません。")]
    StripeNotFoundPaymentInfo = 5010008
    # [Description("Stripe 存在しない国課金コードです。")]
    StripeNotFoundCurrencyCode = 5010009
    # [Description("Stripe 決済できない金額です。")]
    StripeInvalidPrice = 5010010
    # [Description("Stripe 顧客情報が存在しません。")]
    StripeNotFoundCustomerInfo = 5010011
    # [Description("Stripe ポイントが足りません。")]
    StripeNotEnoughPoint = 5010012
    # [Description("Stripe セッションデータがありません。")]
    StripeNotFoundSession = 5010013
    # [Description("ユーザーのSteamIdの取得に失敗しました。")]
    SteamFailedToGetUserSteamId = 6000101
    # [Description("既に別のSteamアカウントと紐づいたユーザーです。")]
    SteamAlreadyLinkedOtherSteamId = 6000102
    # [Description("端末種別がSteamではありません。")]
    SteamDeviceTypeIsNotSteam = 6000201
    # [Description("未定義の言語コードです。")]
    SteamNotDefinedLanguageCode = 6000202
    # [Description("Steamのユーザー情報取得に失敗しました。")]
    SteamFailedToGetUserInfo = 6000203
    # [Description("価格情報が定義されていません。")]
    SteamNotDefinedProductPriceInfo = 6000204
    # [Description("Steamでの課金開始に失敗しました。")]
    SteamFailedToInitTxn = 6000205
    # [Description("Steamでの購入ステータス取得に失敗しました。")]
    SteamFailedToQueryTxn = 6000301
    # [Description("Steamでの購入完了に失敗しました。")]
    SteamFailedToFinalizeTxn = 6000302
    # [Description("Steamでの課金に失敗しました。")]
    SteamNotCorrectSteamId = 6000303
    # [Description("Steamでの課金に失敗しました。")]
    SteamInvalidTxnStatus = 6000304
    # [Description("Steamでのサブスク情報取得に失敗しました。")]
    SteamFailedToGetUserAgreementInfo = 6000305
    # [Description("Steamでのサブスク情報取得に失敗しました。")]
    SteamNotFoundUserAgreementInfo = 6000306
    # [Description("Steamでのサブスク情報取得に失敗しました。")]
    SteamAgreementInfoIsNull = 6000307
    # [Description("既にサブスク契約済みです。")]
    SteamAlreadyExistAgreement = 6000308
    # [Description("次回支払日が存在しません。")]
    SteamNotFoundNextPayment = 6000309

# [MessagePackObject(True)]
_ErrorCode = ErrorCode
@_dataclass(slots=True)
class ApiErrorResponse(ApiResponseBase):
    ErrorCode: _ErrorCode = _field(default_factory=lambda: _ErrorCode())
    # [Obsolete("ErrorCodeに移行します")]
    ErrorHandlingType: _ErrorHandlingType = _field(default_factory=lambda: _ErrorHandlingType())
    # [Obsolete("ErrorCodeに移行します")]
    ErrorMessageId: int = 0
    Message: str = ""
    # [Obsolete("ErrorCodeに移行します")]
    MessageParams: list[str] = _field(default_factory=list["str"])

# [Description("パーティー")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class ClearPartyCharacterInfo():
    # [Description("ベースパラメータ")]
    BaseParameter: _BaseParameter = _field(default_factory=lambda: _BaseParameter())
    # [Description("バトルパラメータ")]
    BattleParameter: _BattleParameter = _field(default_factory=lambda: _BattleParameter())
    # [Description("戦闘力")]
    BattlePower: int = 0
    # [Description("Character固有キー")]
    CharacterGuid: str = ""
    # [Description("CharacterMBのID")]
    CharacterId: int = 0
    # [Description("レベルリンク可否")]
    IsLevelLink: bool = False
    # [Description("レベル")]
    Level: int = 0
    # [Description("レアリティ")]
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))
    # [Description("キャラクターが装着している武具情報")]
    UserEquipmentDtoInfos: list[UserEquipmentDtoInfo] = _field(default_factory=list["UserEquipmentDtoInfo"])

# [Description("無窮の塔クリアパーティー情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class TowerBattleClearPartyInfo():
    # [Description("クリア当時のキャラクター情報")]
    ClearPartyCharacterInfos: list[ClearPartyCharacterInfo] = _field(default_factory=list["ClearPartyCharacterInfo"])
    # [Description("クリア日")]
    ClearTimestamp: int = 0
    # [Description("クリア当時デッキの総合戦闘力")]
    DeckBattlePower: int = 0
    # [Description("階層")]
    Floor: int = 0
    # [Description("プレイヤーアイコン枠情報")]
    LegendLeagueClass: LegendLeagueClassType = _field(default_factory=lambda: LegendLeagueClassType())
    # [Description("メインアイコンキャラクター")]
    MainCharacterIconId: int = 0
    # [Description("クリアしたプレイヤーID")]
    PlayerId: int = 0
    # [Description("ユーザー名")]
    PlayerName: str = ""
    # [Description("クリア当時ランク")]
    Rank: int = 0
    # [Description("塔の種類")]
    TowerType: _TowerType = _field(default_factory=lambda: _TowerType())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BattleRewardResult():
    CharacterExp: int = 0
    DropItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    ExtraGold: int = 0
    FixedItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    PlayerExp: int = 0
    RankUp: int = 0

# [Description("交換元アイテム情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class StarsGuidanceConsumeItemInfo():
    # [Description("交換元アイテム種別")]
    # [PropertyOrder(1)]
    ConsumeItemType: ItemType = _field(default_factory=lambda: ItemType())
    # [Description("交換元アイテムID")]
    # [PropertyOrder(2)]
    ConsumeItemId: int = 0
    # [Description("交換元アイテム個数")]
    # [PropertyOrder(3)]
    ConsumeItemCount: int = 0
    # [Description("交換先アイテム個数")]
    # [PropertyOrder(4)]
    GiveItemCount: int = 0

class ShopProductType(_Enum):
    # [Description("買い切り一般商品")]
    Default = 0
    # [Description("買い切りダイヤ商品")]
    Currency = 1
    # [Description("VIP情報")]
    VipInfo = 2
    # [Description("魔女の贈り物")]
    GrowthPack = 4
    # [Description("盟約特権")]
    ContractPrivilege = 5
    # [Description("月間ブースト")]
    MonthlyBoost = 6
    # [Description("課金機能付きミッション")]
    CurrencyMission = 7
    # [Description("初課金ボーナス")]
    FirstChargeBonus = 8
    # [Description("達成パック")]
    AchievementPack = 9
    # [Description("チャージ特典")]
    ChargeBonus = 10
    # [Description("ゲリラパック")]
    GuerrillaPack = 11
    # [Description("全検索")]
    AllSearch = 99

# [Description("一括ショップ商品情報")]
# [MessagePackObject(True)]
_ShopProductType = ShopProductType
@_dataclass(slots=True)
class BulkShopProductInfo():
    Count: int = 0
    MbId: int = 0
    ProductId: str = ""
    ShopProductType: _ShopProductType = _field(default_factory=lambda: _ShopProductType())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserCharacter():
    CharacterId: int = 0
    CharacterRarityFlags: _Flags[_CharacterRarityFlags] = _field(default_factory=lambda: _Flags["_CharacterRarityFlags"]([]))
    Guid: str = ""
    ItemCount: int = 0
    ItemId: int = 0
    ItemType: _ItemType = _field(default_factory=lambda: _ItemType())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BulkShopRewardInfo():
    BonusItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    CharacterList: list[UserCharacter] = _field(default_factory=list["UserCharacter"])
    Count: int = 0
    ItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    Price: int = 0
    ShopPoint: int = 0
    ShopProductNameKey: str = ""
    ShopProductType: _ShopProductType = _field(default_factory=lambda: _ShopProductType())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopAchievementInfo():
    # [Description("報酬解放章")]
    RequiredChapterId: int = 0
    # [Description("報酬リスト")]
    # [Nest(True, 1)]
    UserItemList: list[UserItem] = _field(default_factory=list["UserItem"])

# [MessagePackObject(True)]
_UserItem = UserItem
@_dataclass(slots=True)
class ShopProductAchievementPack():
    # [Description("ダイアログベース画像ID")]
    DialogImageId: int = 0
    # [Description("終了日時")]
    EndTime: str = ""
    # [Description("獲得ダイヤ量")]
    GetCurrencyCount: int = 0
    # [Description("開放されているか")]
    IsOpen: bool = False
    # [Description("商品名キー")]
    NameKey: str = ""
    # [Description("パネルベース画像ID")]
    PanelImageId: int = 0
    # [Description("ProductId")]
    ProductId: str = ""
    # [Description("払い戻し倍率")]
    RefundRate: int = 0
    # [Description("報酬リスト")]
    ShopAchievementInfoList: list[ShopAchievementInfo] = _field(default_factory=list["ShopAchievementInfo"])
    # [Description("商品値段")]
    ShopProductPrice: int = 0
    # [Description("詳細ダイアログの概要説明キー")]
    SummaryKey: str = ""
    # [Description("シンボル画像ID")]
    SymbolImageId: int = 0
    # [Description("開放報酬")]
    UserItem: _UserItem = _field(default_factory=lambda: _UserItem())
    # [Description("受取情報")]
    UserShopAchievementPackDtoInfoList: list[UserShopAchievementPackDtoInfo] = _field(default_factory=list["UserShopAchievementPackDtoInfo"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopChargeBonusMissionDetail():
    # [Description("獲得済み回数")]
    AlreadyReceivedCount: int = 0
    # [Description("獲得可能回数")]
    CanReceiveCount: int = 0
    # [Description("日数")]
    Day: int = 0
    # [Description("獲得制限回数")]
    GetLimitCount: int = 0
    # [Description("目標設定値")]
    RequiredValue: int = 0
    # [Description("ShopChargeBonusMissionMBのID")]
    ShopChargeBonusMissionMBId: int = 0
    # [Description("目標表示テキストキー")]
    TextKey: str = ""
    # [Description("その日獲得した有償ダイヤの数")]
    TodayGetCurrency: int = 0
    # [Description("報酬リスト")]
    UserItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    # [Description("報酬リスト2 (ギルド特典の場合のギルド報酬など)")]
    UserItemList2: list[UserItem] = _field(default_factory=list["UserItem"])

class ShopChargeBonusMissionType(_Enum):
    # [Description("買い切りダイヤ商品購入")]
    Currency = 1
    # [Description("有償ダイヤ購入")]
    CurrencySum = 2
    # [Description("有償ダイヤ連日購入")]
    CurrencySumDays = 3
    # [Description("有償ダイヤ購入 ギルド特典")]
    CurrencySumGuild = 4

# [MessagePackObject(True)]
_ShopChargeBonusMissionType = ShopChargeBonusMissionType
@_dataclass(slots=True)
class ShopProductChargeBonus():
    # [Description("詳細ダイアログベース画像ID")]
    DialogImageId: int = 0
    # [Description("終了日時")]
    EndDateTime: str = ""
    # [Description("商品パネルのベース画像ID")]
    ImageId: int = 0
    # [Description("商品パネルのメッセージキー")]
    MessageKey: str = ""
    # [Description("表示名キー")]
    NameKey: str = ""
    # [Description("ShopChargeBonusMBのID")]
    ShopChargeBonusMBId: int = 0
    # [Description("目標リスト")]
    ShopChargeBonusMissionDetailList: list[ShopChargeBonusMissionDetail] = _field(default_factory=list["ShopChargeBonusMissionDetail"])
    # [Description("チャージ特典条件タイプ")]
    ShopChargeBonusMissionType: _ShopChargeBonusMissionType = _field(default_factory=lambda: _ShopChargeBonusMissionType())
    # [Description("開始日時")]
    StartDateTime: str = ""
    # [Description("詳細ダイアログ概要説明キー")]
    SummaryKey: str = ""
    # [Description("シンボル画像ID")]
    SymbolImageId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopContractPrivilegeDescription():
    # [Description("説明キー")]
    DescriptionKey: str = ""
    # [Description("表示番号")]
    DisplayNumber: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopProductContractPrivilege():
    # [Description("特権概要説明")]
    DescriptionContractPrivilege: str = ""
    # [Description("定期購読の説明")]
    DescriptionSubscription: str = ""
    # [Description("ダイアログ画像ID")]
    DialogImageId: int = 0
    # [Description("有効期限")]
    ExpirationTimeStamp: int = 0
    # [Description("無料トライアルを既に使用しているか")]
    IsAlreadyUsedTrial: bool = False
    # [Description("パネル画像ID")]
    PanelImageId: int = 0
    # [Description("1カ月購入ボタンのProductId")]
    ProductIdMonthly: str = ""
    # [Description("1週間購入ボタンのProductId")]
    ProductIdWeekly: str = ""
    # [Description("特権詳細説明リスト")]
    ShopContractPrivilegeDescriptionList: list[ShopContractPrivilegeDescription] = _field(default_factory=list["ShopContractPrivilegeDescription"])
    # [Description("1カ月購入の値段")]
    ShopProductPriceMonthly: int = 0
    # [Description("1週間購入の値段")]
    ShopProductPriceWeekly: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopProductCurrency():
    # [Description("お得バッジ画像ID")]
    BadgeImageId: int = 0
    # [Description("告知用大画像ID")]
    BigImageId: int = 0
    # [Description("ボーナス率")]
    BonusTextKey: str = ""
    # [Description("画像ID")]
    ImageId: int = 0
    # [Description("商品名キー")]
    NameKey: str = ""
    # [Description("ProductId")]
    ProductId: str = ""
    # [Description("商品値段")]
    ShopProductPrice: int = 0
    # [Description("ボーナス報酬")]
    UserItemBonus: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("報酬リスト")]
    UserItemList: list[UserItem] = _field(default_factory=list["UserItem"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopCurrencyMissionInfo():
    # [Description("商品ID")]
    # [Nest(True, 1)]
    CommonRewardItem: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("商品種別タイプ")]
    # [Nest(True, 1)]
    PremiumRewardItem1: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("商品種別タイプ")]
    # [Nest(True, 1)]
    PremiumRewardItem2: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("要求Pt")]
    RequiredPoint: int = 0

class ShopCurrencyMissionType(_Enum):
    # [Description("貢献メダル収集")]
    ActivityMedal = 1

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserShopCurrencyMissionRewardDtoInfo():
    IsReceiveCommon: bool = False
    IsReceivePremium: bool = False
    RequiredPoint: int = 0

# [MessagePackObject(True)]
_ShopCurrencyMissionType = ShopCurrencyMissionType
@_dataclass(slots=True)
class ShopProductCurrencyMission():
    # [Description("現在のポイント")]
    CurrentPoint: int = 0
    # [Description("ダイアログベース画像ID")]
    DialogImageId: int = 0
    # [Description("ミッションの終了日時")]
    EndDateTime: str = ""
    # [Description("開放についての説明キー")]
    ExplanationKey: str = ""
    # [Description("PT購入ボタン表示するか")]
    IsDisplayBuyPointButton: bool = False
    # [Description("開放報酬")]
    IsPremium: bool = False
    # [Description("商品名キー")]
    NameKey: str = ""
    # [Description("パネルベース画像ID")]
    PanelImageId: int = 0
    # [Description("ProductId")]
    ProductId: str = ""
    # [Description("目標リスト")]
    ShopCurrencyMissionInfoList: list[ShopCurrencyMissionInfo] = _field(default_factory=list["ShopCurrencyMissionInfo"])
    # [Description("課金機能付きミッションの種類")]
    ShopCurrencyMissionType: _ShopCurrencyMissionType = _field(default_factory=lambda: _ShopCurrencyMissionType())
    # [Description("商品値段")]
    ShopProductPrice: int = 0
    # [Description("詳細ダイアログの概要説明キー")]
    SummaryKey: str = ""
    # [Description("開放報酬")]
    UserItem: _UserItem = _field(default_factory=lambda: _UserItem())
    # [Description("受取状況リスト")]
    UserShopCurrencyMissionRewardDtoInfoList: list[UserShopCurrencyMissionRewardDtoInfo] = _field(default_factory=list["UserShopCurrencyMissionRewardDtoInfo"])

# [Description("購入回数制限タイプ")]
class ShopBuyLimitType(_Enum):
    # [Description("購入回数制限なし")]
    None_ = 0
    # [Description("永久の購入回数制限")]
    Forever = 1
    # [Description("日単位の購入回数制限")]
    Daily = 2
    # [Description("週単位の購入回数制限")]
    Weekly = 3
    # [Description("月単位の購入回数制限")]
    Monthly = 4
    # [Description("指定された経過日数が経過し、その商品が閉じるときにリセット")]
    EndDisplayProduct = 5

class ShopProductUiType(_Enum):
    Default = 0

# [Description("ショップアイテム")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopItem():
    # [Nest(True, 1)]
    Item: UserItem = _field(default_factory=lambda: UserItem())
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [MessagePackObject(True)]
_ShopBuyLimitType = ShopBuyLimitType
_ShopProductUiType = ShopProductUiType
@_dataclass(slots=True)
class ShopProductDefault():
    # [Description("お得バッジ画像ID")]
    BadgeImageId: int = 0
    # [Description("告知用大画像ID")]
    BigImageId: int = 0
    # [Description("期間内購入回数")]
    BuyCountPeriod: int = 0
    # [Description("購入回数制限の制限回数")]
    BuyLimitCount: int = 0
    # [Description("ディスカウント率")]
    DiscountRate: int = 0
    # [Description("終了日時")]
    EndDateTime: str = ""
    # [Description("画像ID")]
    ImageId: int = 0
    # [Description("無料フラグ")]
    IsFree: bool = False
    # [Description("ShopProductDefaultMBのId")]
    MBId: int = 0
    # [Description("商品名キー")]
    NameKey: str = ""
    # [Description("ProductId")]
    ProductId: str = ""
    # [Description("購入回数リセット時間")]
    ResetTime: int = 0
    # [Description("購入回数制限タイプ")]
    ShopBuyLimitType: _ShopBuyLimitType = _field(default_factory=lambda: _ShopBuyLimitType())
    # [Description("商品値段")]
    ShopProductPrice: int = 0
    # [Description("商品UIタイプ")]
    ShopProductUiType: _ShopProductUiType = _field(default_factory=lambda: _ShopProductUiType())
    # [Description("報酬リスト")]
    UserItemList: list[ShopItem] = _field(default_factory=list["ShopItem"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopProductFirstChargeBonus():
    # [Description("詳細ダイアログキャラクターID")]
    CharacterId: int = 0
    # [Description("商品パネルのベース画像ID")]
    PanelImageId: int = 0
    # [Description("1日目の報酬")]
    ShopItemList1: list[ShopItem] = _field(default_factory=list["ShopItem"])
    # [Description("2日目の報酬")]
    ShopItemList2: list[ShopItem] = _field(default_factory=list["ShopItem"])
    # [Description("3日目の報酬")]
    ShopItemList3: list[ShopItem] = _field(default_factory=list["ShopItem"])
    # [Description("受取状況(未開放の場合はnull)")]
    UserShopFirstChargeBonusDtoInfo: _UserShopFirstChargeBonusDtoInfo = _field(default_factory=lambda: _UserShopFirstChargeBonusDtoInfo())

# [Description("成長パックバフタイプ")]
class GrowthPackBuffType(_Enum):
    # [Description("放置バトル")]
    Auto = 1
    # [Description("バトルリーグ")]
    BattleLeague = 2
    # [Description("ギルドレイド")]
    GuildRaid = 3

# [MessagePackObject(True)]
_GrowthPackBuffType = GrowthPackBuffType
@_dataclass(slots=True)
class ShopGrowthPackBuffInfo():
    # [Description("バフの影響範囲")]
    # [PropertyOrder(1)]
    GrowthPackBuffType: _GrowthPackBuffType = _field(default_factory=lambda: _GrowthPackBuffType())
    # [Description("上昇するパラメータ")]
    # [PropertyOrder(2)]
    BattleParameterType: _BattleParameterType = _field(default_factory=lambda: _BattleParameterType())
    # [Description("パラメータ増減タイプ")]
    # [PropertyOrder(3)]
    ChangeParameterType: _ChangeParameterType = _field(default_factory=lambda: _ChangeParameterType())
    # [Description("値")]
    # [PropertyOrder(4)]
    Value: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopProductGrowthPackDetail():
    # [Description("バフ情報")]
    BuffInfo: ShopGrowthPackBuffInfo = _field(default_factory=lambda: ShopGrowthPackBuffInfo())
    # [Description("現在購入回数")]
    CurrentBuyCount: int = 0
    # [Description("バフか否か")]
    IsBuff: bool = False
    # [Description("無料フラグ")]
    IsFree: bool = False
    # [Description("MBのID")]
    MBId: int = 0
    # [Description("購入可能回数")]
    MaxBuyCount: int = 0
    # [Description("ProductId")]
    ProductId: str = ""
    # [Description("報酬リスト")]
    ShopItemList: list[ShopItem] = _field(default_factory=list["ShopItem"])
    # [Description("商品値段")]
    ShopProductPrice: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopGrowthPackGoalDetail():
    # [Description("目標レアリティ")]
    CharacterRarityFlags: _Flags[_CharacterRarityFlags] = _field(default_factory=lambda: _Flags["_CharacterRarityFlags"]([]))
    # [Description("商品リスト")]
    ShopProductGrowthPackInfoList: list[ShopProductGrowthPackDetail] = _field(default_factory=list["ShopProductGrowthPackDetail"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopProductGrowthPack():
    # [Description("キャラクターID")]
    CharacterId: int = 0
    # [Description("終了日時")]
    EndTime: str = ""
    # [Description("成長目標の不可視レアリティ")]
    InvisibleStartRarityFlag: CharacterRarityFlags = _field(default_factory=lambda: CharacterRarityFlags())
    # [Description("名称キー")]
    NameKey: str = ""
    # [Description("成長リスト")]
    ShopGrowthPackGoalDetailList: list[ShopGrowthPackGoalDetail] = _field(default_factory=list["ShopGrowthPackGoalDetail"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopProductMonthlyBoost():
    # [Description("お得バッジ画像ID")]
    BadgeImageId: int = 0
    # [Description("割引率")]
    DiscountRate: int = 0
    # [Description("期限")]
    ExpirationTimeStamp: int = 0
    # [Description("ヘルプパス")]
    HelpPath: str = ""
    # [Description("デイリー報酬を受取済みか")]
    IsAlreadyReceive: bool = False
    # [Description("事前購入フラグ")]
    IsPrePurchased: bool = False
    # [Description("商品名キー")]
    NameKey: str = ""
    # [Description("パネル画像ID")]
    PanelImageId: int = 0
    # [Description("ProductId")]
    ProductId: str = ""
    # [Description("特権詳細説明リスト")]
    ShopContractPrivilegeDescriptionList: list[ShopContractPrivilegeDescription] = _field(default_factory=list["ShopContractPrivilegeDescription"])
    # [Description("商品値段")]
    ShopProductPrice: int = 0
    # [Description("購入時報酬")]
    UserItem: _UserItem = _field(default_factory=lambda: _UserItem())
    # [Description("デイリー報酬")]
    UserItemDailyList: list[_UserItem] = _field(default_factory=list["_UserItem"])

# [MessagePackObject(True)]
_ShopProductAchievementPack = ShopProductAchievementPack
_ShopProductChargeBonus = ShopProductChargeBonus
_ShopProductContractPrivilege = ShopProductContractPrivilege
_ShopProductCurrency = ShopProductCurrency
_ShopProductCurrencyMission = ShopProductCurrencyMission
_ShopProductDefault = ShopProductDefault
_ShopProductFirstChargeBonus = ShopProductFirstChargeBonus
_ShopProductGrowthPack = ShopProductGrowthPack
_ShopProductGuerrillaPack = ShopProductGuerrillaPack
_ShopProductMonthlyBoost = ShopProductMonthlyBoost
@_dataclass(slots=True)
class ShopProductInfo():
    # [Description("表示順(昇順)")]
    DisplayOrder: int = 0
    # [Description("商品MBのId")]
    MbId: int = 0
    # [Description("達成パック用データ")]
    ShopProductAchievementPack: _ShopProductAchievementPack = _field(default_factory=lambda: _ShopProductAchievementPack())
    # [Description("チャージ特典用データ")]
    ShopProductChargeBonus: _ShopProductChargeBonus = _field(default_factory=lambda: _ShopProductChargeBonus())
    # [Description("盟約特権用データ")]
    ShopProductContractPrivilege: _ShopProductContractPrivilege = _field(default_factory=lambda: _ShopProductContractPrivilege())
    # [Description("買い切りダイヤ商品用データ")]
    ShopProductCurrency: _ShopProductCurrency = _field(default_factory=lambda: _ShopProductCurrency())
    # [Description("課金機能付きミッション用データ")]
    ShopProductCurrencyMission: _ShopProductCurrencyMission = _field(default_factory=lambda: _ShopProductCurrencyMission())
    # [Description("買い切り一般商品用データ")]
    ShopProductDefault: _ShopProductDefault = _field(default_factory=lambda: _ShopProductDefault())
    # [Description("初課金ボーナス用データ")]
    ShopProductFirstChargeBonus: _ShopProductFirstChargeBonus = _field(default_factory=lambda: _ShopProductFirstChargeBonus())
    # [Description("魔女の贈り物用データ")]
    ShopProductGrowthPack: _ShopProductGrowthPack = _field(default_factory=lambda: _ShopProductGrowthPack())
    # [Description("ゲリラパック用データ")]
    ShopProductGuerrillaPack: _ShopProductGuerrillaPack = _field(default_factory=lambda: _ShopProductGuerrillaPack())
    # [Description("月間ブースト用データ")]
    ShopProductMonthlyBoost: _ShopProductMonthlyBoost = _field(default_factory=lambda: _ShopProductMonthlyBoost())
    # [Description("商品種別タイプ")]
    ShopProductType: _ShopProductType = _field(default_factory=lambda: _ShopProductType())

# [Description("Stripeポイント増減タイプ")]
class StripePointType(_Enum):
    # [Description("商品購入")]
    BuyProduct = 0
    # [Description("補填")]
    Present = 1
    # [Description("回収")]
    Retrieve = 2

# [Description("Stripe支払いタイプ")]
class StripePaidType(_Enum):
    # [Description("クレジットカード")]
    Card = 0
    # [Description("アップルペイ")]
    ApplePay = 1
    # [Description("グーグルペイ")]
    GooglePay = 2

# [MessagePackObject(True)]
_StripePaidType = StripePaidType
_StripePointType = StripePointType
@_dataclass(slots=True)
class UserStripePointHistoryInfo():
    AfterPoint: int = 0
    BeforePoint: int = 0
    BuyDateTime: _datetime = _datetime.min
    CardSubInfo: str = ""
    ChargeBackDateTime: str = ""
    DiscountPrice: int = 0
    IsBulkBuy: bool = False
    PlayerId: int = 0
    Price: int = 0
    ProductNameKey: str = ""
    RefundDateTime: str = ""
    SavePoint: int = 0
    StripePaidType: _StripePaidType = _field(default_factory=lambda: _StripePaidType())
    StripePointType: _StripePointType = _field(default_factory=lambda: _StripePointType())
    TransactionId: str = ""
    UsePoint: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class AcquisitionShopRewardInfo():
    BonusItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    CharacterList: list[UserCharacterDtoInfo] = _field(default_factory=list["UserCharacterDtoInfo"])
    ItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    ShopProductType: _ShopProductType = _field(default_factory=lambda: _ShopProductType())

# [Description("装飾データ")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class DecorationData():
    # [Description("カラー")]
    DecorationColor: str = ""
    # [Description("装飾ID")]
    DecorationId: int = 0
    # [Description("追加装飾カラー")]
    DecorationSpecialColor: str = ""
    # [Description("追加装飾ID")]
    DecorationSpecialId: int = 0
    # [Description("アイコンID")]
    IconId: int = 0
    # [Description("購入回数制限タイプ")]
    ShopBuyLimitType: _ShopBuyLimitType = _field(default_factory=lambda: _ShopBuyLimitType())

# [MessagePackObject(True)]
_CustomTextLayout = CustomTextLayout
_DecorationData = DecorationData
@_dataclass(slots=True)
class ShopTabInfo():
    # [Description("レイアウト")]
    CustomTextLayout: _CustomTextLayout = _field(default_factory=lambda: _CustomTextLayout())
    # [Description("装飾データ")]
    DecorationData: _DecorationData = _field(default_factory=lambda: _DecorationData())
    # [Description("表示順(昇順)")]
    DisplayOrder: int = 0
    # [Description("Id")]
    Id: int = 0
    # [Description("タブ画像ID")]
    ImageId: int = 0
    # [Description("ダイヤタブかどうか")]
    IsCurrencyTab: bool = False
    # [Description("タブ名キー")]
    NameKey: str = ""
    # [Description("商品一覧")]
    ShopProductInfoList: list[ShopProductInfo] = _field(default_factory=list["ShopProductInfo"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ShopProductSubInfo():
    # [Description("商品Id")]
    ProductId: str = ""
    # [Description("商品値段")]
    ShopProductPrice: int = 0

# [Description("Stripe商品情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class StripeShopProductInfo():
    BulkShopProductInfos: list[BulkShopProductInfo] = _field(default_factory=list["BulkShopProductInfo"])
    GivePlayerId: int = 0
    IsStripePaidStatus: bool = False
    MbId: int = 0
    ProductId: str = ""
    SessionId: str = ""
    ShopProductType: _ShopProductType = _field(default_factory=lambda: _ShopProductType())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class PresentItem():
    # [Description("アイテム")]
    # [Nest(True, 2)]
    # [PropertyOrder(1)]
    Item: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("キャラクターレアリティ")]
    # [PropertyOrder(2)]
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [MessagePackObject(True)]
@_dataclass(slots=True)
class RetrieveItemData():
    # [Description("回収アイテム")]
    # [Nest(True, 2)]
    # [PropertyOrder(1)]
    Item: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("キャラクターのレアリティ")]
    # [PropertyOrder(2)]
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [MessagePackObject(True)]
_RetrieveItemData = RetrieveItemData
@_dataclass(slots=True)
class RetrieveItemInfo():
    EndTimeFixJST: int = 0
    IsDisplayBadge: bool = False
    RetrieveItemData: _RetrieveItemData = _field(default_factory=lambda: _RetrieveItemData())
    RetrievedItemCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class RetrieveItemHistory():
    RetrieveItemInfoList: list[RetrieveItemInfo] = _field(default_factory=list["RetrieveItemInfo"])
    RetrieveLocalTime: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class AchieveRankingPlayerInfo():
    AchieveLocalTimeStamp: int = 0
    PlayerInfo: _PlayerInfo = _field(default_factory=lambda: _PlayerInfo())
    Rank: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class AchieveRewardReceivedPlayerInfo():
    PlayerId: int = 0
    PlayerName: str = ""

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildRank():
    BattlePower: int = 0
    GuildInfo: _GuildInfo = _field(default_factory=lambda: _GuildInfo())
    GuildStock: int = 0
    GuildTowerMaxFloor: int = 0
    IsApplying: bool = False
    Rank: int = 0

# [Description("ボス情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class BossBattleInfo():
    # [Description("ドロップアイテムリスト")]
    BossBattleDropItems: list[UserItem] = _field(default_factory=list["UserItem"])
    # [Description("ボス表示情報リスト")]
    BossDisplayInfos: list[BossDisplayInfo] = _field(default_factory=list["BossDisplayInfo"])
    # [Description("ボスバトル初回ドロップアイテムリスト")]
    FirstBossBattleDropItems: list[UserItem] = _field(default_factory=list["UserItem"])
    # [Description("ボスバトル確定ドロップアイテムリスト")]
    FixedBossBattleDropItems: list[UserItem] = _field(default_factory=list["UserItem"])
    # [Description("クエストId(QuestMB)")]
    QuestId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class MapPlayerInfo():
    LatestQuestId: int = 0
    MainCharacterIconId: int = 0
    PlayerId: int = 0
    PlayerRank: int = 0
    QuestId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserMapBuildingDtoInfo():
    QuestMapBuildingId: int = 0
    SelectedIndex: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserPresentDtoInfo():
    CreateAt: int = 0
    DisplayLimitDate: int = 0
    Guid: str = ""
    IsReceived: bool = False
    ItemList: list[PresentItem] = _field(default_factory=list["PresentItem"])
    Message: str = ""
    ReceiveLimitDate: int = 0
    Title: str = ""

# [MessagePackObject(True)]
@_dataclass(slots=True)
class VoteCharacter():
    CharacterId: int = 0
    VoteCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class PopularityVoteRewardInfo():
    GoalVoteCount: int = 0
    IsReceived: bool = False

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ClearNotificationInfo():
    NotificationType: _NotificationType = _field(default_factory=lambda: _NotificationType())
    Value: int = 0

# [Description("お知らせボタンのシンボル画像タイプ")]
class NoticeButtonImageType(_Enum):
    # [Description("表示なし")]
    None_ = 0
    # [Description("インフォメーション")]
    Information = 1
    # [Description("アップデート")]
    Update = 2
    # [Description("メンテナンス")]
    Maintenance = 3
    # [Description("不具合")]
    Bug = 4
    # [Description("イベント")]
    Event = 5
    # [Description("ガチャ")]
    Gacha = 6
    # [Description("キャンペーン")]
    Campaign = 7
    # [Description("その他")]
    Other = 8
    # [Description("アンケート")]
    Survey = 9

# [Description("お知らせカテゴリー")]
class NoticeCategoryType(_Enum):
    # [Description("イベントタブ")]
    EventTab = 0
    # [Description("お知らせタブ")]
    NoticeTab = 1

# [Description("お知らせ情報")]
# [MessagePackObject(True)]
_LanguageType = LanguageType
@_dataclass(slots=True)
class NoticeInfo():
    # [Description("バナーID")]
    BannerId: int = 0
    # [Description("ボタン画像タイプ")]
    ButtonImageType: NoticeButtonImageType = _field(default_factory=lambda: NoticeButtonImageType())
    # [Description("ボタン上のタイトル")]
    ButtonTitle: str = ""
    # [Description("カテゴリー")]
    CategoryType: NoticeCategoryType = _field(default_factory=lambda: NoticeCategoryType())
    # [Description("グループID")]
    GroupId: int = 0
    # [Description("NoticeMBのId")]
    Id: int = 0
    # [Description("言語種別")]
    LanguageType: _LanguageType = _field(default_factory=lambda: _LanguageType())
    # [Description("本文")]
    MainText: str = ""
    # [Description("本文上のタイトル")]
    Title: str = ""

# [Description("お知らせをどこから開いたか")]
class NoticeAccessType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("タイトル")]
    Title = 1
    # [Description("マイページ")]
    MyPage = 2

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserPlaylistMusicInfo():
    Guid: str = ""
    MusicId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserPlaylistInfo():
    Guid: str = ""
    MusicList: list[UserPlaylistMusicInfo] = _field(default_factory=list["UserPlaylistMusicInfo"])
    PlaylistName: str = ""

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserPanelMissionDtoInfo():
    ReceivedBingoTypeList: list[BingoType] = _field(default_factory=list["BingoType"])
    SheetNo: int = 0

# [MessagePackObject(True)]
_UserMissionActivityDtoInfo = UserMissionActivityDtoInfo
@_dataclass(slots=True)
class MissionInfo():
    MissionExpirationTimeStamp: int = 0
    UserMissionActivityDtoInfo: _UserMissionActivityDtoInfo = _field(default_factory=lambda: _UserMissionActivityDtoInfo())
    UserMissionDtoInfoDict: dict[MissionType, list[UserMissionDtoInfo]] = _field(default_factory=dict["MissionType", "list[UserMissionDtoInfo]"])
    UserPanelMissionDtoInfoList: list[UserPanelMissionDtoInfo] = _field(default_factory=list["UserPanelMissionDtoInfo"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class AcquisitionMissionRewardInfo():
    CharacterList: list[UserCharacterDtoInfo] = _field(default_factory=list["UserCharacterDtoInfo"])
    ItemList: list[UserItem] = _field(default_factory=list["UserItem"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class LuckyChanceLotteryItemInfo():
    LotteryItem: UserItem = _field(default_factory=lambda: UserItem())
    LotteryLimitCount: int = 0
    RemainingCount: int = 0

class LuckyChanceInputFormType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("景品選択")]
    PrizeSelection = 1
    # [Description("個人情報入力")]
    InputPersonalInfo = 2
    # [Description("個人情報入力(メアドのみ)")]
    InputMailAddress = 3
    # [Description("個人情報登録済み")]
    RegisteredPersonalInfo = 4

# [MessagePackObject(True)]
@_dataclass(slots=True)
class AddressInfo():
    BlockNumber: str = ""
    BuildingName: str = ""
    Municipality: str = ""
    Prefecture: str = ""

# [MessagePackObject(True)]
_AddressInfo = AddressInfo
@_dataclass(slots=True)
class LuckyChancePersonalInfo():
    AddressInfo: _AddressInfo = _field(default_factory=lambda: _AddressInfo())
    MailAddress: str = ""
    Name: str = ""
    NameFurigana: str = ""
    PhoneNumber: str = ""
    PostalCode: str = ""

# [MessagePackObject(True)]
@_dataclass(slots=True)
class LuckyChanceExchangeItemInfo():
    ExchangeCount: int = 0
    FromItemId: int = 0
    FromItemType: ItemType = _field(default_factory=lambda: ItemType())
    IsExchangeInGameItem: bool = False

# [Description("期間限定ログボの報酬アイテム")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class LimitedLoginBonusRewardItem():
    # [Description("特別報酬アイテム")]
    Item: UserItem = _field(default_factory=lambda: UserItem())
    # [Description("キャラレアリティ")]
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [MessagePackObject(True)]
@_dataclass(slots=True)
class LocalRaidQuestInfo():
    FirstBattleRewards: list[UserItem] = _field(default_factory=list["UserItem"])
    FixedBattleRewards: list[UserItem] = _field(default_factory=list["UserItem"])
    Id: int = 0
    Level: int = 0
    LocalRaidBannerId: int = 0
    LocalRaidEnemyIds: list[int] = _field(default_factory=list["int"])
    RecommendedBattlePower: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class LocalRaidEnemyInfo():
    BattlePower: int = 0
    CharacterRarityFlags: _Flags[_CharacterRarityFlags] = _field(default_factory=lambda: _Flags["_CharacterRarityFlags"]([]))
    ElementType: _ElementType = _field(default_factory=lambda: _ElementType())
    EnemyRank: int = 0
    Id: int = 0
    NameKey: str = ""
    UnitIconId: int = 0
    UnitIconType: _UnitIconType = _field(default_factory=lambda: _UnitIconType())

class ILocalRaidInfoApiResponse(_Protocol):
    LocalRaidEnemyInfos: list[LocalRaidEnemyInfo]
    LocalRaidQuestInfos: list[LocalRaidQuestInfo]

class LocalRaidRoomConditionsType(_Enum):
    None_ = 0
    BattlePower = 1
    Password = 2
    All = 3

# [MessagePackObject(True)]
@_dataclass(slots=True)
class LocalRaidBattleLogPlayerInfo():
    IsInvite: bool = False
    IsLeader: bool = False
    IsReady: bool = False
    PlayerInfo: _PlayerInfo = _field(default_factory=lambda: _PlayerInfo())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class LocalRaidPartyInfo():
    ConditionsType: LocalRaidRoomConditionsType = _field(default_factory=lambda: LocalRaidRoomConditionsType())
    IsAutoStart: bool = False
    IsReady: bool = False
    LeaderPlayerId: int = 0
    LeaderPlayerName: str = ""
    LocalRaidBattleLogPlayerInfoList: list[LocalRaidBattleLogPlayerInfo] = _field(default_factory=list["LocalRaidBattleLogPlayerInfo"])
    Password: int = 0
    QuestId: int = 0
    RequiredBattlePower: int = 0
    RoomId: str = ""
    TotalBattlePower: int = 0
    WorldId: int = 0

# [MessagePackObject(True)]
_LocalRaidPartyInfo = LocalRaidPartyInfo
@_dataclass(slots=True)
class LocalRaidBattleLogInfo():
    BattleEndInfo: _BattleEndInfo = _field(default_factory=lambda: _BattleEndInfo())
    BattleTime: int = 0
    BattleToken: str = ""
    ClearLevel: int = 0
    IsAutoStart: bool = False
    LocalRaidPartyInfo: _LocalRaidPartyInfo = _field(default_factory=lambda: _LocalRaidPartyInfo())
    QuestId: int = 0

# [MessagePackObject(True)]
_UserCharacterInfo = UserCharacterInfo
@_dataclass(slots=True)
class UserGvgCharacterInfo():
    BattlePower: int = 0
    IsSettingLevelLink: bool = False
    UserCharacterInfo: _UserCharacterInfo = _field(default_factory=lambda: _UserCharacterInfo())

# [MessagePackObject(False)]
@_dataclass(slots=True)
class PartyInfo(_ArrayPacked):
    # [Key(0)]
    BattlePower: int = 0
    # [Key(1)]
    UserGvgCharacterInfoList: list[UserGvgCharacterInfo] = _field(default_factory=list["UserGvgCharacterInfo"])
    # [Key(2)]
    OwnerPlayerId: int = 0
    # [Key(3)]
    OwnerPlayerRank: int = 0
    # [Key(4)]
    AliveCharacterIdList: list[int] = _field(default_factory=list["int"])
    # [Key(5)]
    IsNpc: bool = False
    # [Key(6)]
    GuildId: int = 0
    # [Key(7)]
    PartyGuid: str = ""
    # [Key(8)]
    HasCastleFallen: bool = False

# [MessagePackObject(False)]
_PartyInfo = PartyInfo
@_dataclass(slots=True)
class CastleBattleHistoryInfo_PartyInfoAndName(_ArrayPacked):
    # [Key(0)]
    PartyInfo: _PartyInfo = _field(default_factory=lambda: _PartyInfo())
    # [Key(1)]
    OwnerPlayerName: str = ""
    # [Key(2)]
    OwnerPlayerGuildName: str = ""
    # [Key(3)]
    CharacterId: int = 0

# [MessagePackObject(False)]
@_dataclass(slots=True)
class CastleBattleHistoryInfo(_ArrayPacked):
    # [Key(0)]
    BattleToken: str = ""
    # [Key(1)]
    LocalHoursAndMinutes: int = 0
    # [Key(2)]
    AttackerParty: CastleBattleHistoryInfo_PartyInfoAndName = _field(default_factory=lambda: CastleBattleHistoryInfo_PartyInfoAndName())
    # [Key(3)]
    ReceiverParty: CastleBattleHistoryInfo_PartyInfoAndName = _field(default_factory=lambda: CastleBattleHistoryInfo_PartyInfoAndName())
    # [Key(4)]
    WinContinueCount: int = 0
    # [Key(5)]
    LoserWinContinueCount: int = 0
    # [Key(6)]
    WinGroupType: BattleFieldCharacterGroupType = _field(default_factory=lambda: BattleFieldCharacterGroupType())
    # [Key(7)]
    IsCounter: bool = False
    # [Key(8)]
    WinBattleCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class RecordInfo():
    ContinueCount: int = 0
    GuildName: str = ""
    IsNpc: bool = False
    LegendLeagueClassType: _LegendLeagueClassType = _field(default_factory=lambda: _LegendLeagueClassType())
    PlayerCharacterId: int = 0
    PlayerId: int = 0
    PlayerName: str = ""

# [MessagePackObject(True)]
_BattleFieldCharacterGroupType = BattleFieldCharacterGroupType
@_dataclass(slots=True)
class GvgMvpPlayerInfo():
    BattleFieldCharacterGroupType: _BattleFieldCharacterGroupType = _field(default_factory=lambda: _BattleFieldCharacterGroupType())
    PlayerInfo: _PlayerInfo = _field(default_factory=lambda: _PlayerInfo())
    Rank: int = 0
    TotalKnockOutCount: int = 0

# [MessagePackObject(False)]
@_dataclass(slots=True)
class UserGvgCharacterInfoSlim(_ArrayPacked):
    # [Key(0)]
    BattlePower: int = 0
    # [Key(1)]
    CharacterId: int = 0
    # [Key(2)]
    IsSettingLevelLink: bool = False
    # [Key(3)]
    Level: int = 0
    # [Key(4)]
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GvgMvpPlayerPartyInfo():
    BattlePower: int = 0
    CastleId: int = 0
    CharacterInfoList: list[UserGvgCharacterInfoSlim] = _field(default_factory=list["UserGvgCharacterInfoSlim"])
    IsAlive: bool = False
    KnockOutCount: int = 0
    LastBattleCount: int = 0
    PartyGuid: str = ""
    WinBattleCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GvgMvpPlayerDetailInfo():
    MvpPlayerInfo: GvgMvpPlayerInfo = _field(default_factory=lambda: GvgMvpPlayerInfo())
    PartyInfoList: list[GvgMvpPlayerPartyInfo] = _field(default_factory=list["GvgMvpPlayerPartyInfo"])

# [Description("キャラクターソート種別")]
class CharacterSortType(_Enum):
    # [Description("レアリティ")]
    Rarity = 0
    # [Description("戦力")]
    BattlePower = 1
    # [Description("アバターなしのキャラID")]
    RootCharacterId = 2
    # [Description("キャラタイプ")]
    CharacterType = 3
    # [Description("属性")]
    CharacterAttribute = 4
    # [Description("キャラレベル")]
    CharacterLevel = 5
    # [Description("レベルリンクレベル確認ダイアログ用")]
    CheckLevelLinkLevel = 6
    # [Description("キャラ一覧画面 デフォルト設定")]
    CharacterListDefault = 7
    # [Description("お気に入りキャラ")]
    Favorite = 8
    # [Description("ソートしない")]
    None_ = 9
    # [Description("人気投票")]
    PopularityVote = 10

# [Description("ジェンドリーグアイコン報酬表示タブタイプ")]
class LegendLeagueIconRewardDisplayTabType(_Enum):
    # [Description("期間限定タブ")]
    Limited = 1
    # [Description("常設タブ")]
    Permanent = 2

# [MessagePackObject(True)]
@_dataclass(slots=True)
class LegendLeagueIconReward():
    ConsumeItemCount: int = 0
    DisplayTabType: LegendLeagueIconRewardDisplayTabType = _field(default_factory=lambda: LegendLeagueIconRewardDisplayTabType())
    EndLocalTime: int = 0
    GiveItem: UserItem = _field(default_factory=lambda: UserItem())
    Id: int = 0
    IsNew: bool = False
    LimitTradeCount: int = 0
    Order: int = 0
    StartLocalTime: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class TreasureChestReward():
    Item: UserItem = _field(default_factory=lambda: UserItem())
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))
    SacredTreasureType: _SacredTreasureType = _field(default_factory=lambda: _SacredTreasureType())

# [Description("高速周回チケット")]
class QuestQuickTicketType(_Enum):
    # [Description("ゴールド1時間")]
    GoldHours1 = 1
    # [Description("ゴールド2時間")]
    GoldHours2 = 2
    # [Description("ゴールド6時間")]
    GoldHours6 = 3
    # [Description("ゴールド8時間")]
    GoldHours8 = 4
    # [Description("ゴールド24時間")]
    GoldHours24 = 5
    # [Description("経験珠1時間")]
    ExpHours1 = 6
    # [Description("経験珠2時間")]
    ExpHours2 = 7
    # [Description("経験珠6時間")]
    ExpHours6 = 8
    # [Description("経験珠8時間")]
    ExpHours8 = 9
    # [Description("経験珠24時間")]
    ExpHours24 = 10
    # [Description("潜在宝珠1時間")]
    SeedHours1 = 11
    # [Description("潜在宝珠2時間")]
    SeedHours2 = 12
    # [Description("潜在宝珠6時間")]
    SeedHours6 = 13
    # [Description("潜在宝珠8時間")]
    SeedHours8 = 14
    # [Description("潜在宝珠24時間")]
    SeedHours24 = 15
    # [Description("豪華な袋1時間")]
    LuxuryHours1 = 16
    # [Description("豪華な袋2時間")]
    LuxuryHours2 = 17
    # [Description("豪華な袋6時間")]
    LuxuryHours6 = 18
    # [Description("豪華な袋8時間")]
    LuxuryHours8 = 19
    # [Description("豪華な袋24時間")]
    LuxuryHours24 = 20

# [MessagePackObject(True)]
_TreasureChestReward = TreasureChestReward
@_dataclass(slots=True)
class TreasureChestItemLotteryRate():
    IsCeilingTarget: bool = False
    LotteryRate: float = 0.0
    TreasureChestReward: _TreasureChestReward = _field(default_factory=lambda: _TreasureChestReward())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class TreasureChestItemLotteryRateListInfo():
    CeilingCount: int = 0
    LotteryRateList: list[TreasureChestItemLotteryRate] = _field(default_factory=list["TreasureChestItemLotteryRate"])
    TreasureChestItemId: int = 0

class GuildTowerEntryType(_Enum):
    # [Description("登録")]
    Entry = 0
    # [Description("再登録")]
    Reentry = 1

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildTowerComboData():
    ComboCount: int = 0
    EndLocalTimeStamp: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildTowerEntryCharacter():
    CharacterGuid: str = ""
    TodayUseCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildTowerReinforcementJobData():
    ConsumedMaterialItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    JobFlags: _Flags[_JobFlags] = _field(default_factory=lambda: _Flags["_JobFlags"]([]))
    Level: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildTowerTotalStarRankingInfo():
    PlayerInfo: _PlayerInfo = _field(default_factory=lambda: _PlayerInfo())
    TotalStarCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildTowerReinforcementJobRankingPlayerData():
    PlayerInfo: _PlayerInfo = _field(default_factory=lambda: _PlayerInfo())
    Rank: int = 0
    TotalConsumeItemCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildTowerReinforcementJobRankingData():
    AfterJobLevel: int = 0
    RankingPlayerDataList: list[GuildTowerReinforcementJobRankingPlayerData] = _field(default_factory=list["GuildTowerReinforcementJobRankingPlayerData"])

# [Description("ギルドアンケートの選択肢種別")]
class GuildSurveyChoiceType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("選択肢1")]
    First = 1
    # [Description("選択肢2")]
    Second = 2
    # [Description("選択肢3")]
    Third = 3
    # [Description("選択肢4")]
    Fourth = 4

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildSurveyInfo():
    ChoiceMap: dict[GuildSurveyChoiceType, str] = _field(default_factory=dict["GuildSurveyChoiceType", "str"])
    Content: str = ""
    CreateLocalTimestamp: int = 0
    CreateSurveyPlayerInfo: PlayerInfo = _field(default_factory=lambda: PlayerInfo())
    IsVoted: bool = False
    SurveyGuid: str = ""
    VoteCountMap: dict[GuildSurveyChoiceType, int] = _field(default_factory=dict["GuildSurveyChoiceType", "int"])
    VotingEndLocalTimestamp: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildRaidBossInfo():
    BossGuid: str = ""
    CurrentHp: int = 0
    EndTimeStamp: int = 0
    MaxHp: int = 0
    Name: str = ""
    StartTimeStamp: int = 0
    TotalDamage: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildRaidDtoInfo():
    BossType: GuildRaidBossType = _field(default_factory=lambda: GuildRaidBossType())
    CloseLimitTime: int = 0
    LastReleaseTime: int = 0
    TotalChallengeCount: int = 0
    TotalDamage: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildRaidUserRankingInfo():
    LegendLeagueClass: LegendLeagueClassType = _field(default_factory=lambda: LegendLeagueClassType())
    MainCharacterIconId: int = 0
    PlayerId: int = 0
    PlayerName: str = ""
    TotalDamage: int = 0
    TotalDamagePercent: float = 0.0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserGuildRaidDtoInfo():
    BattleLogAtMaxDamageJson: str = ""
    BossGuid: str = ""
    ChallengeCount: int = 0
    DropItemJson: str = ""
    MaxDamage: int = 0
    TotalDamage: int = 0

# [MessagePackObject(True)]
_GuildRaidBossType = GuildRaidBossType
@_dataclass(slots=True)
class UserGuildRaidPreviousDtoInfo():
    BattleLogJson: str = ""
    Damage: int = 0
    DropItemCount: int = 0
    GuildRaidBossType: _GuildRaidBossType = _field(default_factory=lambda: _GuildRaidBossType())

# [MessagePackObject(True)]
_GuildRaidBossInfo = GuildRaidBossInfo
_GuildRaidDtoInfo = GuildRaidDtoInfo
_UserGuildRaidDtoInfo = UserGuildRaidDtoInfo
_UserGuildRaidPreviousDtoInfo = UserGuildRaidPreviousDtoInfo
@_dataclass(slots=True)
class GuildRaidInfo():
    DropDiamondLotteryItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    GuildRaidBossInfo: _GuildRaidBossInfo = _field(default_factory=lambda: _GuildRaidBossInfo())
    GuildRaidDtoInfo: _GuildRaidDtoInfo = _field(default_factory=lambda: _GuildRaidDtoInfo())
    GuildRaidUserRankingInfos: list[GuildRaidUserRankingInfo] = _field(default_factory=list["GuildRaidUserRankingInfo"])
    IsExistWorldDamageReward: bool = False
    IsOpen: bool = False
    ObtainableEquipmentList: list[UserItem] = _field(default_factory=list["UserItem"])
    UserGuildRaidDtoInfo: _UserGuildRaidDtoInfo = _field(default_factory=lambda: _UserGuildRaidDtoInfo())
    UserGuildRaidPreviousDtoInfo: _UserGuildRaidPreviousDtoInfo = _field(default_factory=lambda: _UserGuildRaidPreviousDtoInfo())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class WorldRewardInfo():
    GoalDamage: int = 0
    IsReceived: bool = False

# [Description("システムチャット")]
class SystemChatMessageIdType(_Enum):
    # [Description("AギルドがBギルドのXX拠点に開戦を宣言しました！")]
    Declare = 1
    # [Description("AギルドがBギルドのXX拠点を占領しました！")]
    Occupy = 2
    # [Description("AギルドがBギルドのXX拠点に奪還を宣言しました！")]
    Recapture = 3
    # [Description("Ａがパーティを進軍させＢギルドのＸＸ城に攻撃を開始しました！")]
    Campaign = 4
    # [Description("ＢギルドのＸＸ城に進軍させたパーティが全敗になった！加勢に向かいましょう！")]
    CompleteDefeat = 5
    # [Description("占領しているXX城がＡギルドのＢに攻撃されました！急いで防衛に向かいましょう！")]
    Defense = 6
    # [Description("今回AギルドによるXX拠点への攻撃の防衛に成功しました！")]
    Offense = 7
    # [Description("レジェンドリーグ第１位　[PlayerName]
    #     レジェンドリーグ第２位　[PlayerName]
    #     レジェンドリーグ第３位　[PlayerName]")]
    LegendLeague = 8
    # [Description("バトルリーグ第１位　[PlayerName]
    #     バトルリーグ第２位　[PlayerName]
    #     バトルリーグ第３位　[PlayerName]")]
    BattleLeague = 9
    # [Description("マスターが[PlayerName]のギルド参加を承認しました")]
    GuildJoinApproved = 10
    # [Description("新しく[PlayerName]がギルドに加入しました")]
    GuildJoinFree = 11
    # [Description("[PlayerName]がギルドを脱退しました")]
    GuildLeave = 12
    # [Description("マスターが[PlayerName]をギルドから追放しました")]
    GuildMemberRemove = 13
    # [Description("[BeforePlayerName]が[AfterPlayerName]にプレイヤー名を変更しました")]
    ChangePlayerName = 14
    # [Description("[プレイヤー名]がギルドツリーの第[数値]階層を突破しました！")]
    GuildTowerClearSpecialFloor = 15
    # [Description("ギルドツリーでコンボが開始されました！
    #     ギルドツリーに挑戦してコンボ数を増やそう！")]
    GuildTowerStartCombo = 16
    # [Description("ギルドツリーで{プレイヤー名}の活躍で{数値}コンボを達成しました！")]
    GuildTowerAchieveCombo = 17
    # [Description("Aギルドの[布告したプレイヤー名]がBギルドの[拠点名]に布告しました！")]
    DeclareToTargetGuild = 18
    # [Description("Aギルドの[布告したプレイヤー名]がBギルドの[拠点名]に反撃を宣言しました！")]
    RecaptureToTargetGuild = 19

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildSystemChatOptionInfo():
    IsValid: bool = False
    Type: SystemChatMessageIdType = _field(default_factory=lambda: SystemChatMessageIdType())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class CastleRewardInfo():
    CastleId: int = 0
    LotteryRewardList: list[UserItem] = _field(default_factory=list["UserItem"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GuildGvgInfo():
    CanGetCastleRewardInfoList: list[CastleRewardInfo] = _field(default_factory=list["CastleRewardInfo"])
    CastleCountLarge: int = 0
    CastleCountMedium: int = 0
    CastleCountSmall: int = 0
    CurrentRanking: int = 0
    GotCastleRewardInfoList: list[CastleRewardInfo] = _field(default_factory=list["CastleRewardInfo"])
    IsOpen: bool = False
    MinCharacterNumLarge: int = 0
    MinCharacterNumMedium: int = 0
    MinCharacterNumSmall: int = 0
    RemainingDeclarationCount: int = 0
    RewardLimitTime: int = 0
    TodayRanking: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class RecommendationGuildInfo():
    GuildInfo: _GuildInfo = _field(default_factory=lambda: _GuildInfo())
    IsApplying: bool = False

class RecruitGuildMemberSearchType(_Enum):
    All = 0
    Free = 1
    Joined = 2

# [MessagePackObject(True)]
@_dataclass(slots=True)
class SearchGuildResultInfo():
    GuildInfo: _GuildInfo = _field(default_factory=lambda: _GuildInfo())
    IsApplying: bool = False
    IsRecruit: bool = False
    PlayerInfoList: list[PlayerInfo] = _field(default_factory=list["PlayerInfo"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GlobalGvgGuildInfo():
    AddedPointLastTime: int = 0
    BattlePower: int = 0
    BattlePowerRank: int = 0
    CastleCountLarge: int = 0
    CastleCountMedium: int = 0
    CastleCountSmall: int = 0
    GuildId: int = 0
    GuildLv: int = 0
    GuildName: str = ""
    LeaderPlayerInfo: PlayerInfo = _field(default_factory=lambda: PlayerInfo())
    MemberCount: int = 0
    Point: int = 0
    Rank: int = 0
    WorldId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GlobalGvgGroupInfo():
    GlobalGvgGroupType: _GlobalGvgGroupType = _field(default_factory=lambda: _GlobalGvgGroupType())
    GlobalGvgGuildInfoList: list[GlobalGvgGuildInfo] = _field(default_factory=list["GlobalGvgGuildInfo"])
    MatchingNumber: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GachaBonusInfo():
    GachaBonusCount: int = 0
    GachaBonusItem: UserItem = _field(default_factory=lambda: UserItem())
    LotteryProbability: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GachaButtonInfo():
    ConsumeUserItem: UserItem = _field(default_factory=lambda: UserItem())
    DisplayOrder: int = 0
    GachaButtonId: int = 0
    LotteryCount: int = 0

# [MessagePackObject(True)]
_GachaCaseFlags = GachaCaseFlags
_GachaCategoryType = GachaCategoryType
_GachaGroupType = GachaGroupType
_GachaRelicType = GachaRelicType
_GachaSelectListType = GachaSelectListType
@_dataclass(slots=True)
class GachaCaseInfo():
    DisplayOrder: int = 0
    ElementType: _ElementType = _field(default_factory=lambda: _ElementType())
    EndTime: int = 0
    GachaBonusDrawCount: int = 0
    GachaBonusInfoList: list[GachaBonusInfo] = _field(default_factory=list["GachaBonusInfo"])
    GachaButtonInfoList: list[GachaButtonInfo] = _field(default_factory=list["GachaButtonInfo"])
    GachaCaseFlags: _Flags[_GachaCaseFlags] = _field(default_factory=lambda: _Flags["_GachaCaseFlags"]([]))
    GachaCaseId: int = 0
    GachaCaseUiId: int = 0
    GachaCategoryType: _GachaCategoryType = _field(default_factory=lambda: _GachaCategoryType())
    GachaCeilingCount: int = 0
    GachaDrawCount: int = 0
    GachaGroupType: _GachaGroupType = _field(default_factory=lambda: _GachaGroupType())
    GachaRelicType: _GachaRelicType = _field(default_factory=lambda: _GachaRelicType())
    GachaSelectCharacterIdList: list[int] = _field(default_factory=list["int"])
    GachaSelectListType: _GachaSelectListType = _field(default_factory=lambda: _GachaSelectListType())
    MaxDrawGold: int = 0
    RemainingDrawGold: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GachaResultItem():
    CharacterRarityFlags: _Flags[_CharacterRarityFlags] = _field(default_factory=lambda: _Flags["_CharacterRarityFlags"]([]))
    GachaLotteryId: int = 0
    GachaLotteryItemListId: int = 0
    Guid: str = ""
    IsCeilingItem: bool = False
    ItemCount: int = 0
    ItemId: int = 0
    ItemType: _ItemType = _field(default_factory=lambda: _ItemType())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GachaDestinyLogInfo():
    Name: str = ""
    UserItem: _UserItem = _field(default_factory=lambda: _UserItem())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GachaStarsGuidanceLogInfo():
    Name: str = ""
    UserItem: _UserItem = _field(default_factory=lambda: _UserItem())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GachaElementInfo():
    EndTimeOpenBlue: int = 0
    EndTimeOpenGreen: int = 0
    EndTimeOpenRed: int = 0
    EndTimeOpenYellow: int = 0
    ServerOpenElementType: ElementType = _field(default_factory=lambda: ElementType())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GachaItemRate():
    AddItem: UserItem = _field(default_factory=lambda: UserItem())
    CharacterRarityFlags: _Flags[_CharacterRarityFlags] = _field(default_factory=lambda: _Flags["_CharacterRarityFlags"]([]))
    Item: UserItem = _field(default_factory=lambda: UserItem())
    LotteryRate: float = 0.0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GachaBonusRate():
    GachaCount: int = 0
    GachaItemRateList: list[GachaItemRate] = _field(default_factory=list["GachaItemRate"])
    Index: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GachaRarityRate():
    CharacterRarityFlags: _Flags[_CharacterRarityFlags] = _field(default_factory=lambda: _Flags["_CharacterRarityFlags"]([]))
    LotteryRate: float = 0.0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class FriendBattleLogInfo():
    BattleEndInfo: _BattleEndInfo = _field(default_factory=lambda: _BattleEndInfo())
    BattleToken: str = ""
    FriendStatusType: _FriendStatusType = _field(default_factory=lambda: _FriendStatusType())
    IsAllowedFriendBattle: bool = False
    PlayerGuildPositionType: _PlayerGuildPositionType = _field(default_factory=lambda: _PlayerGuildPositionType())
    RivalBackgroundCharacterId: int = 0
    RivalBattlePower: int = 0
    RivalComment: str = ""
    RivalGuildId: int = 0
    RivalGuildName: str = ""
    RivalLatestQuestId: int = 0
    RivalMainCharacterIconId: int = 0
    RivalPlayerId: int = 0
    RivalPlayerName: str = ""
    RivalPlayerRank: int = 0
    StartBattleTimestamp: int = 0

# [Description("フレンド画面の取得データ")]
class FriendInfoType(_Enum):
    # [Description("なし")]
    None_ = 0
    # [Description("フレンド")]
    Friend = 1
    # [Description("承認待ち")]
    ApprovalPending = 2
    # [Description("申請中")]
    Applying = 3
    # [Description("ブロック")]
    Block = 4
    # [Description("おすすめ検索")]
    Recommend = 5
    # [Description("模擬戦")]
    FriendBattle = 6

# [MessagePackObject(True)]
@_dataclass(slots=True)
class NewFriendInfo():
    FriendType: FriendInfoType = _field(default_factory=lambda: FriendInfoType())
    PlayerId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class EventPortalBannerInfo():
    # [Description("バッジタイプ")]
    BadgeType: _BadgeType = _field(default_factory=lambda: _BadgeType())
    # [Description("バナー画像ID")]
    BannerImageId: int = 0
    # [Description("表示終了日時")]
    DisplayEndTimeStamp: int = 0
    # [Description("終了日時")]
    EndTimeStamp: int = 0
    # [Description("EventBannerMBのID")]
    EventBannerId: int = 0
    # [Description("アイコン名")]
    IconStringKey: str = ""
    # [Description("バッジを点灯させるか")]
    IsDisplayBadge: bool = False
    # [Description("開放されているか")]
    IsOpen: bool = False
    # [Description("ソート順")]
    SortOrder: int = 0
    # [Description("開始日時")]
    StartTimeStamp: int = 0
    # [Description("遷移タイプ")]
    TransferDetailInfo: _TransferDetailInfo = _field(default_factory=lambda: _TransferDetailInfo())

# [MessagePackObject(True)]
_EventPortalBannerInfo = EventPortalBannerInfo
@_dataclass(slots=True)
class OutsideEventPortalBannerInfo():
    # [Description("イベントグループID")]
    EventGroupId: int = 0
    # [Description("イベントポータルバナー情報")]
    EventPortalBannerInfo: _EventPortalBannerInfo = _field(default_factory=lambda: _EventPortalBannerInfo())
    # [Description("タイトル画像ID")]
    TitleImageId: int = 0
    # [Description("タイトル名(TextResourceのStringKey)")]
    TitleTextKey: str = ""

class IAdditionalParameter(_Protocol):
    AdditionalParameterEnergy: int
    AdditionalParameterHealth: int
    AdditionalParameterIntelligence: int
    AdditionalParameterMuscle: int

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserEquipment():
    AdditionalParameterEnergy: int = 0
    AdditionalParameterHealth: int = 0
    AdditionalParameterIntelligence: int = 0
    AdditionalParameterMuscle: int = 0
    CharacterGuid: str = ""
    EquipmentId: int = 0
    Guid: str = ""
    HasParameter: bool = False
    ItemCount: int = 0
    ItemId: int = 0
    ItemType: _ItemType = _field(default_factory=lambda: _ItemType())
    LegendSacredTreasureExp: int = 0
    LegendSacredTreasureLv: int = 0
    MatchlessSacredTreasureExp: int = 0
    MatchlessSacredTreasureLv: int = 0
    ReinforcementLv: int = 0
    SphereId1: int = 0
    SphereId2: int = 0
    SphereId3: int = 0
    SphereId4: int = 0
    SphereUnlockedCount: int = 0

# [Description("武具変更情報")]
# [MessagePackObject(True)]
_EquipmentSlotType = EquipmentSlotType
@_dataclass(slots=True)
class EquipmentChangeInfo():
    EquipmentGuid: str = ""
    EquipmentId: int = 0
    EquipmentSlotType: _EquipmentSlotType = _field(default_factory=lambda: _EquipmentSlotType())
    IsInherit: bool = False

# [Description("ルーン変更情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class SphereChangeInfo():
    EquipmentGuid: str = ""
    SphereId1: int = 0
    SphereId2: int = 0
    SphereId3: int = 0
    SphereId4: int = 0

# [Description("ルーンの種別")]
class SphereCategoryType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("腕力のルーン")]
    Muscle = 1
    # [Description("技力のルーン")]
    Energy = 2
    # [Description("魔力のルーン")]
    Intelligence = 3
    # [Description("攻撃力のルーン")]
    AttackPower = 4
    # [Description("物魔防御貫通のルーン")]
    DamageEnhance = 5
    # [Description("命中のルーン")]
    Hit = 6
    # [Description("クリティカルのルーン")]
    Critical = 7
    # [Description("弱体効果命中のルーン")]
    DebuffHit = 8
    # [Description("スピードのルーン")]
    Speed = 9
    # [Description("耐久力のルーン")]
    Health = 10
    # [Description("HPのルーン")]
    Hp = 11
    # [Description("物理防御力のルーン")]
    PhysicalDamageRelax = 12
    # [Description("魔法防御力のルーン")]
    MagicDamageRelax = 13
    # [Description("回避のルーン")]
    Avoidance = 14
    # [Description("クリティカル耐性のルーン")]
    CriticalResist = 15
    # [Description("弱体効果耐性のルーン")]
    DebuffResist = 16

# [Description("ルーンカスタム情報")]
# [MessagePackObject(True)]
_SphereCategoryType = SphereCategoryType
@_dataclass(slots=True)
class SphereInfo():
    Count: int = 0
    SphereCategoryType: _SphereCategoryType = _field(default_factory=lambda: _SphereCategoryType())

# [Description("一括装着カスタム情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class BulkSphereSetInfo():
    AttackSphereInfos: list[SphereInfo] = _field(default_factory=list["SphereInfo"])
    BulkSphereSetGuid: str = ""
    CharacterId: int = 0
    DefenseSphereInfos: list[SphereInfo] = _field(default_factory=list["SphereInfo"])
    DisplayOrder: int = 0
    IsDeleted: bool = False
    Name: str = ""
    PlayerId: int = 0

class IDungeonBattleRequest(_Protocol):
    CurrentTermId: int

# [Description("時空の洞窟 味方情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class DungeonBattleAllyInfo():
    # [Description("レアリティ")]
    CharacterRarityFlags: _Flags[_CharacterRarityFlags] = _field(default_factory=lambda: _Flags["_CharacterRarityFlags"]([]))
    # [Description("残りのHP（‰）")]
    CurrentHpPerMill: int = 0
    # [Description("属性")]
    ElementType: _ElementType = _field(default_factory=lambda: _ElementType())
    # [Description("BattleCharacterReport.BattleCharacterGuid")]
    Guid: int = 0
    # [Description("ユニットアイコンID")]
    UnitIconId: int = 0
    # [Description("ユニットアイコンタイプ")]
    UnitIconType: _UnitIconType = _field(default_factory=lambda: _UnitIconType())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserDungeonBattleCharacterDtoInfo():
    CharacterId: int = 0
    CurrentHpPerMill: int = 0
    GuestId: int = 0
    Guid: str = ""

# [Description("時空の洞窟 マス状態")]
class DungeonBattleGridState(_Enum):
    # [Description("すべて完了し、次のマスに進むことができる")]
    Done = 0
    # [Description("選択した")]
    Selected = 1
    # [Description("報酬が未受け取り")]
    Reward = 2
    # [Description("スキップ時のミステリーショップ")]
    SkipShop = 3

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserDungeonBattleDtoInfo():
    CurrentBoughtShopCounts: list[int] = _field(default_factory=list["int"])
    CurrentGridGuid: str = ""
    CurrentGridState: DungeonBattleGridState = _field(default_factory=lambda: DungeonBattleGridState())
    DoneGridGuids: list[str] = _field(default_factory=list["str"])
    DoneRewardClearLayers: list[int] = _field(default_factory=list["int"])
    GuestCharacterMap: dict[str, list[int]] = _field(default_factory=dict["str", "list[int]"])
    IsLostLatestBattle: bool = False
    RelicIds: list[int] = _field(default_factory=list["int"])
    UseDungeonRecoveryItemCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserDungeonBattleShopDtoInfo():
    GridGuid: str = ""
    PlayerId: int = 0
    TermId: int = 0
    TradeShopItemList: list[TradeShopItem] = _field(default_factory=list["TradeShopItem"])

# [Description("時空の洞窟 敵情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class DungeonBattleEnemyInfo():
    # [Description("戦闘力")]
    BattlePower: int = 0
    # [Description("レアリティ")]
    CharacterRarityFlags: _Flags[_CharacterRarityFlags] = _field(default_factory=lambda: _Flags["_CharacterRarityFlags"]([]))
    # [Description("属性")]
    ElementType: _ElementType = _field(default_factory=lambda: _ElementType())
    # [Description("レベル")]
    Level: int = 0
    # [Description("ユニットアイコンID")]
    UnitIconId: int = 0
    # [Description("ユニットアイコンタイプ")]
    UnitIconType: _UnitIconType = _field(default_factory=lambda: _UnitIconType())

# [Description("時空の洞窟 難易度")]
class DungeonBattleDifficultyType(_Enum):
    # [Description("通常")]
    Normal = 0
    # [Description("ハード")]
    Hard = 1

# [MessagePackObject(True)]
@_dataclass(slots=True)
class DungeonBattleGrid():
    DungeonGridGuid: str = ""
    DungeonGridId: int = 0
    X: int = 0
    Y: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class DungeonBattleLayer():
    DungeonDifficultyType: DungeonBattleDifficultyType = _field(default_factory=lambda: DungeonBattleDifficultyType())
    DungeonGrids: list[DungeonBattleGrid] = _field(default_factory=list["DungeonBattleGrid"])
    LayerCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserDungeonBattleGuestCharacterDtoInfo():
    BaseParameter: _BaseParameter = _field(default_factory=lambda: _BaseParameter())
    BattleParameter: _BattleParameter = _field(default_factory=lambda: _BattleParameter())
    BattlePower: int = 0
    CharacterId: int = 0
    GuestEquipmentDtoInfos: list[UserEquipmentDtoInfo] = _field(default_factory=list["UserEquipmentDtoInfo"])
    Guid: str = ""
    Level: int = 0
    PlayerId: int = 0
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [MessagePackObject(True)]
@_dataclass(slots=True)
class DebugCharacterInfo():
    # [Description("キャラクターGuid")]
    CharacterGuid: str = ""
    # [Description("StatusSubGroupSkillMBのIdリスト")]
    StatusSubGroupSkillIds: list[int] = _field(default_factory=list["int"])

# [MessagePackObject(False)]
@_dataclass(slots=True)
class PrivateChatLogPlayerInfo(_ArrayPacked):
    # [Key(0)]
    ExistUnread: bool = False
    # [Key(1)]
    PlayerInfo: _PlayerInfo = _field(default_factory=lambda: _PlayerInfo())
    # [Key(2)]
    LocalTimestamp: int = 0

# [MessagePackObject(False)]
@_dataclass(slots=True)
class ChatIdentityInfo(_ArrayPacked):
    # [Key(0)]
    SendLocalTimestamp: int = 0
    # [Key(1)]
    SendPlayerId: int = 0

# [Description("システムチャット種別")]
class SystemChatType(_Enum):
    None_ = 0
    # [Description("LocalGvg(ワールド)")]
    LocalGvgWorld = 1
    # [Description("LocalGvg(ギルド)")]
    LocalGvgGuild = 2
    # [Description("GlobalGvg(ワールド)")]
    GlobalGvgWorld = 3
    # [Description("GlobalGvg(ギルド)")]
    GlobalGvgGuild = 4
    # [Description("LegendLeague")]
    LegendLeague = 5
    # [Description("BattleLeague")]
    BattleLeague = 6
    # [Description("Guild")]
    Guild = 7
    # [Description("ChangePlayerName")]
    ChangePlayerName = 8

# [MessagePackObject(False)]
_ChatType = ChatType
_SystemChatMessageIdType = SystemChatMessageIdType
_SystemChatType = SystemChatType
@_dataclass(slots=True)
class ChatInfo(_ArrayPacked):
    # [Key(0)]
    CharacterId: int = 0
    # [Key(1)]
    ChatType: _ChatType = _field(default_factory=lambda: _ChatType())
    # [Key(2)]
    Message: str = ""
    # [Key(3)]
    PlayerId: int = 0
    # [Key(4)]
    PlayerName: str = ""
    # [Key(5)]
    SystemChatMessageKey: str = ""
    # [Key(6)]
    SystemChatType: _SystemChatType = _field(default_factory=lambda: _SystemChatType())
    # [Key(7)]
    LocalTimeStamp: int = 0
    # [Key(8)]
    LegendLeagueClass: LegendLeagueClassType = _field(default_factory=lambda: LegendLeagueClassType())
    # [Key(9)]
    SystemChatMessageIdType: _SystemChatMessageIdType = _field(default_factory=lambda: _SystemChatMessageIdType())
    # [Key(10)]
    SystemChatMessageArgs: list[str] = _field(default_factory=list["str"])
    # [Key(11)]
    GuildName: str = ""
    # [Key(12)]
    BalloonItemId: int = 0

class ChatReactionType(_Enum):
    # [Description("リアクションなし")]
    None_ = 0
    # [Description("ウインク")]
    Wink = 1
    # [Description("乾杯")]
    Cheers = 2
    # [Description("ハート")]
    Heart = 3
    # [Description("悲しい")]
    Sad = 4

# [MessagePackObject(False)]
_ChatInfo = ChatInfo
@_dataclass(slots=True)
class GuildChatInfo(_ArrayPacked):
    # [Key(0)]
    ChatInfo: _ChatInfo = _field(default_factory=lambda: _ChatInfo())
    # [Key(1)]
    MyChatReactionType: ChatReactionType = _field(default_factory=lambda: ChatReactionType())
    # [Key(2)]
    ChatReactionCountMap: dict[ChatReactionType, int] = _field(default_factory=dict["ChatReactionType", "int"])
    # [Key(3)]
    CanReact: bool = False
    # [Key(4)]
    IsAnnounced: bool = False

# [MessagePackObject(False)]
_GuildChatInfo = GuildChatInfo
@_dataclass(slots=True)
class AnnounceChatInfo(_ArrayPacked):
    # [Key(0)]
    GuildChatInfo: _GuildChatInfo = _field(default_factory=lambda: _GuildChatInfo())
    # [Key(1)]
    RegisterLocalTimestamp: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class ReactionPlayerInfo():
    IconId: int = 0
    LegendLeagueClassType: _LegendLeagueClassType = _field(default_factory=lambda: _LegendLeagueClassType())
    PlayerName: str = ""

# [MessagePackObject(True)]
@_dataclass(slots=True)
class CharacterRankUpMaterialInfo():
    # [Description("素材キャラクターGuid1")]
    MaterialGuid1: str = ""
    # [Description("素材キャラクター Guid2")]
    MaterialGuid2: str = ""
    # [Description("ランクアップ対象キャラクター Guid")]
    TargetGuid: str = ""

# [Description("メモリーログタイプ")]
class MemoryLogType(_Enum):
    # [Description("初回報酬受取")]
    FirstReward = 1
    # [Description("無報酬")]
    NoReward = 2
    # [Description("ガチャからの閲覧")]
    Gacha = 3

# [MessagePackObject(True)]
@_dataclass(slots=True)
class RankResetReceiveCharacter():
    Item: UserItem = _field(default_factory=lambda: UserItem())
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))

# [Description("懸賞カウンター条件タイプ")]
class BountyQuestConditionType(_Enum):
    # [Description("属性")]
    Element = 0
    # [Description("レアリティ")]
    Rarity = 1

# [MessagePackObject(True)]
_BountyQuestConditionType = BountyQuestConditionType
@_dataclass(slots=True)
class BountyQuestConditionInfo():
    # [Description("懸賞カウンター条件タイプ")]
    BountyQuestConditionType: _BountyQuestConditionType = _field(default_factory=lambda: _BountyQuestConditionType())
    # [Description("属性")]
    ElementType: _ElementType = _field(default_factory=lambda: _ElementType())
    # [Description("レアリティ")]
    Rarity: CharacterRarityFlags = _field(default_factory=lambda: CharacterRarityFlags())
    # [Description("必要な数")]
    RequireCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BountyQuestInfo():
    # [Description("懸賞カウンタークリアタイム(ミリ秒)")]
    BountyQuestClearTime: int = 0
    # [Description("懸賞カウンター条件リスト")]
    BountyQuestConditionInfos: list[BountyQuestConditionInfo] = _field(default_factory=list["BountyQuestConditionInfo"])
    # [Description("懸賞カウンタークエストID")]
    BountyQuestId: int = 0
    # [Description("懸賞カウンター制限時間(ミリ秒)")]
    BountyQuestLimitTime: int = 0
    # [Description("懸賞カウンタークエスト名キー")]
    BountyQuestNameKey: str = ""
    # [Description("懸賞カウンタークエストレアリティ")]
    BountyQuestRarity: BountyQuestRarityFlags = _field(default_factory=lambda: BountyQuestRarityFlags())
    # [Description("懸賞カウンタータイプ")]
    BountyQuestType: _BountyQuestType = _field(default_factory=lambda: _BountyQuestType())
    # [Description("設定可能なキャラー数")]
    CharacterMaxCount: int = 0
    # [Description("高速完了初期必要ダイヤ")]
    InitialRequireCurrencyForQuick: int = 0
    # [Description("懸賞カウンター報酬リスト")]
    RewardItems: list[UserItem] = _field(default_factory=list["UserItem"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserBountyQuestBoardDtoInfo():
    BountyQuestRarity: BountyQuestRarityFlags = _field(default_factory=lambda: BountyQuestRarityFlags())
    BountyQuestType: _BountyQuestType = _field(default_factory=lambda: _BountyQuestType())
    ClearCount: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BountyQuestMemberInfo():
    # [Description("キャラクターID")]
    CharacterId: int = 0
    # [Description("キャラクターレアリティ")]
    CharacterRarityFlags: _Flags[_CharacterRarityFlags] = _field(default_factory=lambda: _Flags["_CharacterRarityFlags"]([]))
    # [Description("プレイヤーID")]
    PlayerId: int = 0
    # [Description("ユーザーキャラクターGUID")]
    UserCharacterGuid: str = ""

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserBountyQuestDtoInfo():
    BountyQuestEndTime: int = 0
    BountyQuestId: int = 0
    BountyQuestLimitStartTime: int = 0
    BountyQuestType: _BountyQuestType = _field(default_factory=lambda: _BountyQuestType())
    Date: int = 0
    IsReward: bool = False
    RewardEndTime: int = 0
    StartMembers: list[BountyQuestMemberInfo] = _field(default_factory=list["BountyQuestMemberInfo"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UserBountyQuestMemberDtoInfo():
    CharacterId: int = 0
    DispatchEndTime: int = 0
    DispatchPlayerId: int = 0
    DispatchPlayerName: str = ""
    PlayerId: int = 0
    RarityFlags: _Flags[CharacterRarityFlags] = _field(default_factory=lambda: _Flags["CharacterRarityFlags"]([]))
    UserCharacterGuid: str = ""

# [Description("祈りの泉：プレイヤータイプ")]
class BountyQuestPlayerType(_Enum):
    # [Description("自分")]
    Self = 0
    # [Description("フレンドとギルドメンバー")]
    FriendAndGuildMember = 1

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BountyQuestStartInfo():
    # [Description("懸賞カウンタークエストID")]
    BountyQuestId: int = 0
    # [Description("懸賞カウンタークエスト派遣メンバー情報")]
    BountyQuestMemberInfos: list[BountyQuestMemberInfo] = _field(default_factory=list["BountyQuestMemberInfo"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class UnlockedGridCellInfo():
    GridCellIndex: int = 0
    IsWin: bool = False

# [MessagePackObject(True)]
_UnlockedGridCellInfo = UnlockedGridCellInfo
@_dataclass(slots=True)
class UnlockGridCellResult():
    RewardUserItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    UnlockedGridCellInfo: _UnlockedGridCellInfo = _field(default_factory=lambda: _UnlockedGridCellInfo())

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BookSortFloorHistory():
    Floor: int = 0
    SelectedBonusFloorRewardIndex: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BookSortSyncData():
    CurrentFloor: int = 0
    FloorHistoryList: list[BookSortFloorHistory] = _field(default_factory=list["BookSortFloorHistory"])
    IsExistReceivableMission: bool | None = None
    LastUnlockGridCellDateIntYearMonthDay: int | None = None
    SelectedBonusFloorRewardIndex: int = 0
    UnlockedGridCellInfoList: list[UnlockedGridCellInfo] = _field(default_factory=list["UnlockedGridCellInfo"])

# [Description("書庫整理報酬タイプ")]
class BookSortRewardType(_Enum):
    # [Description("None")]
    None_ = 0
    # [Description("通常フロア当たりマス報酬")]
    Win = 1
    # [Description("外れマス確定ドロップ報酬")]
    LoseFixed = 2
    # [Description("外れマス低確率ドロップ報酬")]
    LoseRare = 3

# [MessagePackObject(True)]
@_dataclass(slots=True)
class BookSortRewardItemsRate():
    ItemList: list[UserItem] = _field(default_factory=list["UserItem"])
    LotteryRate: float = 0.0

# [MessagePackObject(True)]
_BookSortRewardType = BookSortRewardType
@_dataclass(slots=True)
class BookSortReward():
    BookSortRewardItemsRateList: list[BookSortRewardItemsRate] = _field(default_factory=list["BookSortRewardItemsRate"])
    BookSortRewardType: _BookSortRewardType = _field(default_factory=lambda: _BookSortRewardType())
    DropRate: float = 0.0

# [Description("ボスバトルクリアパーティー情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class ClearPartyInfo():
    # [Description("バトルタイプ")]
    BattleType: _BattleType = _field(default_factory=lambda: _BattleType())
    # [Description("クリア当時のキャラクター情報")]
    ClearPartyCharacterInfos: list[ClearPartyCharacterInfo] = _field(default_factory=list["ClearPartyCharacterInfo"])
    # [Description("クリア日")]
    ClearTimestamp: int = 0
    # [Description("クリア当時デッキの総合戦闘力")]
    DeckBattlePower: int = 0
    # [Description("プレイヤーアイコン枠情報")]
    LegendLeagueClass: LegendLeagueClassType = _field(default_factory=lambda: LegendLeagueClassType())
    # [Description("メインアイコンキャラクター")]
    MainCharacterIconId: int = 0
    # [Description("クリアしたプレイヤーID")]
    PlayerId: int = 0
    # [Description("ユーザー名")]
    PlayerName: str = ""
    # [Description("クエストId(QuestMB)")]
    QuestId: int = 0
    # [Description("クリア当時ランク")]
    Rank: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class LegendLeagueRankingPlayerInfo():
    ConsecutiveVictoryCount: int = 0
    CurrentPoint: int = 0
    CurrentRank: int = 0
    DefenseBattlePower: int = 0
    DefenseCharacterBaseParameterMap: dict[str, BaseParameter] = _field(default_factory=dict["str", "BaseParameter"])
    DefenseCharacterBattleParameterMap: dict[str, BattleParameter] = _field(default_factory=dict["str", "BattleParameter"])
    DefenseEquipmentDtoInfoListMap: dict[str, list[UserEquipmentDtoInfo]] = _field(default_factory=dict["str", "list[UserEquipmentDtoInfo]"])
    PlayerInfo: _PlayerInfo = _field(default_factory=lambda: _PlayerInfo())
    UserCharacterDtoInfoList: list[UserCharacterDtoInfo] = _field(default_factory=list["UserCharacterDtoInfo"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class LegendLeagueLogInfo():
    AttackBattlePower: int = 0
    AttackCharacterBaseParameterMap: dict[str, BaseParameter] = _field(default_factory=dict["str", "BaseParameter"])
    AttackCharacterBattleParameterMap: dict[str, BattleParameter] = _field(default_factory=dict["str", "BattleParameter"])
    AttackCharacterDtoInfoList: list[UserCharacterDtoInfo] = _field(default_factory=list["UserCharacterDtoInfo"])
    AttackEquipmentDtoInfoListMap: dict[str, list[UserEquipmentDtoInfo]] = _field(default_factory=dict["str", "list[UserEquipmentDtoInfo]"])
    BattleEndInfo: _BattleEndInfo = _field(default_factory=lambda: _BattleEndInfo())
    BattleTime: int = 0
    BattleToken: str = ""
    DefenseBattlePower: int = 0
    DefenseCharacterBaseParameterMap: dict[str, BaseParameter] = _field(default_factory=dict["str", "BaseParameter"])
    DefenseCharacterBattleParameterMap: dict[str, BattleParameter] = _field(default_factory=dict["str", "BattleParameter"])
    DefenseCharacterDtoInfoList: list[UserCharacterDtoInfo] = _field(default_factory=list["UserCharacterDtoInfo"])
    DefenseEquipmentDtoInfoListMap: dict[str, list[UserEquipmentDtoInfo]] = _field(default_factory=dict["str", "list[UserEquipmentDtoInfo]"])
    GetPoint: int = 0
    RivalPlayerInfo: PlayerInfo = _field(default_factory=lambda: PlayerInfo())
    TargetConsecutiveVictoryCount: int = 0
    TargetPoint: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class PvpBattleLogInfo():
    AttackBattlePower: int = 0
    AttackCharacterBaseParameterMap: dict[str, BaseParameter] = _field(default_factory=dict["str", "BaseParameter"])
    AttackCharacterBattleParameterMap: dict[str, BattleParameter] = _field(default_factory=dict["str", "BattleParameter"])
    AttackCharacterInfoList: list[UserCharacterInfo] = _field(default_factory=list["UserCharacterInfo"])
    AttackEquipmentDtoInfoListMap: dict[str, list[UserEquipmentDtoInfo]] = _field(default_factory=dict["str", "list[UserEquipmentDtoInfo]"])
    BattleEndInfo: _BattleEndInfo = _field(default_factory=lambda: _BattleEndInfo())
    BattleTime: int = 0
    BattleToken: str = ""
    DefenseBattlePower: int = 0
    DefenseCharacterBaseParameterMap: dict[str, BaseParameter] = _field(default_factory=dict["str", "BaseParameter"])
    DefenseCharacterBattleParameterMap: dict[str, BattleParameter] = _field(default_factory=dict["str", "BattleParameter"])
    DefenseCharacterInfoList: list[UserCharacterInfo] = _field(default_factory=list["UserCharacterInfo"])
    DefenseEquipmentDtoInfoListMap: dict[str, list[UserEquipmentDtoInfo]] = _field(default_factory=dict["str", "list[UserEquipmentDtoInfo]"])
    NewRank: int = 0
    OldRank: int = 0
    RivalPlayerInfo: PlayerInfo = _field(default_factory=lambda: PlayerInfo())

# [Description("高速周回実行タイプ")]
class QuestQuickExecuteType(_Enum):
    # [Description("仮想通貨で実行")]
    Currency = 0
    # [Description("特典で実行")]
    Privilege = 1

# [MessagePackObject(True)]
_BattleRewardResult = BattleRewardResult
@_dataclass(slots=True)
class AutoBattleRewardResult():
    BattleCountAll: int = 0
    BattleCountWin: int = 0
    BattleRewardResult: _BattleRewardResult = _field(default_factory=lambda: _BattleRewardResult())
    BattleTotalTime: int = 0
    GoldByPopulation: int = 0
    PotentialJewelByPopulation: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class AccountMessageInfo():
    Message: str = ""
    PlayerId: int = 0
    Title: str = ""

# [MessagePackObject(True)]
@_dataclass(slots=True)
class WarningMessageInfo():
    ConfirmDateTime: _datetime = _datetime.min
    DisplayOrder: int = 0
    MessageInfo: AccountMessageInfo = _field(default_factory=lambda: AccountMessageInfo())
    WarningId: int = 0
    WorldId: int = 0

# [MessagePackObject(True)]
@_dataclass(slots=True)
class PlayerDataInfo():
    CharacterId: int = 0
    LastLoginTime: int = 0
    LegendLeagueClass: LegendLeagueClassType = _field(default_factory=lambda: LegendLeagueClassType())
    Name: str = ""
    Password: str = ""
    PlayerId: int = 0
    PlayerRank: int = 0
    WorldId: int = 0

class AppAssetVersionEnvType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("sbx環境")]
    Sbx = 1
    # [Description("stg環境")]
    Stg = 2
    # [Description("prd環境")]
    Prd = 3

# [Description("アプリアセットバージョン情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class AppAssetVersionInfo():
    # [Description("環境種別")]
    EnvType: AppAssetVersionEnvType = _field(default_factory=lambda: AppAssetVersionEnvType())
    # [Description("無条件ダウンロードをスキップするか")]
    IsSkipAssetDownload: bool = False
    # [Description("アプリバージョン")]
    Version: str = ""

# [Description("ワールド情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class WorldInfo():
    # [Description("ゲームサーバー")]
    GameServerId: int = 0
    # [Description("ワールドId")]
    Id: int = 0
    # [Description("ワールド設立日")]
    StartTime: _datetime = _datetime.min

# [Description("メインテナンス突破ユーザー情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class MaintenanceDebugUserInfo():
    # [Description("デバックユーザー状態")]
    IsDebugUser: bool = False
    # [Description("プレイヤーID")]
    PlayerId: int = 0
    # [Description("ユーザーID")]
    UserId: int = 0

# [Description("ターゲットサーバータイプ")]
class MaintenanceServerType(_Enum):
    # [Description("全て")]
    All = 0
    # [Description("認証サーバー")]
    AuthServer = 1
    # [Description("ゲームサーバー")]
    GameServer = 2

# [Description("ターゲット領域タイプ")]
class MaintenanceAreaType(_Enum):
    # [Description("全て")]
    All = 0
    # [Description("ゲームサーバー単位")]
    GameServer = 1
    # [Description("ワールド単位")]
    World = 2

# [Description("メンテナンス情報")]
# [MessagePackObject(True)]
_MaintenanceAreaType = MaintenanceAreaType
_MaintenanceServerType = MaintenanceServerType
@_dataclass(slots=True)
class MaintenanceInfo():
    # [Description("領域Idタイプ")]
    AreaIds: list[int] = _field(default_factory=list["int"])
    # [Description("終了日時")]
    EndTimeFixJST: _datetime = _datetime.min
    # [Description("領域タイプ")]
    MaintenanceAreaType: _MaintenanceAreaType = _field(default_factory=lambda: _MaintenanceAreaType())
    # [Description("メンテナンス対象機能種別リスト")]
    MaintenanceFunctionTypes: list[int] = _field(default_factory=list["int"])
    # [Description("プラットフォームリスト")]
    MaintenancePlatformTypes: list[int] = _field(default_factory=list["int"])
    # [Description("対象サーバー種別")]
    MaintenanceServerType: _MaintenanceServerType = _field(default_factory=lambda: _MaintenanceServerType())
    # [Description("開始日時")]
    StartTimeFixJST: _datetime = _datetime.min

# [Description("新規ユーザー管理種別")]
class ManagementNewUserType(_Enum):
    # [Description("タイムサーバー単位")]
    TimeServer = 0
    # [Description("ワールド単位")]
    World = 1

# [Description("新規ユーザー管理情報")]
# [MessagePackObject(True)]
_ManagementNewUserType = ManagementNewUserType
@_dataclass(slots=True)
class ManagementNewUserInfo():
    # [Description("終了日時")]
    EndTimeFixJST: _datetime = _datetime.min
    # [Description("新規ユーザーの作成禁止するか")]
    IsUnableToCreateUser: bool = False
    # [Description("新規ユーザー管理種別")]
    ManagementNewUserType: _ManagementNewUserType = _field(default_factory=lambda: _ManagementNewUserType())
    # [Description("開始日時")]
    StartTimeFixJST: _datetime = _datetime.min
    # [Description("ターゲットIdリスト")]
    TargetIds: list[int] = _field(default_factory=list["int"])

# [MessagePackObject(True)]
@_dataclass(slots=True)
class TitleInfo():
    AnchorMaxX: float = 0.0
    AnchorMaxY: float = 0.0
    AnchorMinX: float = 0.0
    AnchorMinY: float = 0.0
    BgmNumberJP: int = 0
    BgmNumberUS: int = 0
    CharacterId: int = 0
    IsCharacterLiveMode: bool = False
    LamentStartTimeJP: float = 0.0
    LamentStartTimeUS: float = 0.0
    LogoNumber: int = 0
    MovieNumber: int = 0
    Scale: float = 0.0
    X: float = 0.0
    Y: float = 0.0

# [Description("リモート通知種別")]
class RemoteNotificationType(_Enum):
    None_ = 0
    # [Description("ギルドチャット")]
    GuildChat = 1
    # [Description("個人チャット")]
    PersonalChat = 2
    # [Description("ギルドレイドボスの開放")]
    GuildRaidBoss = 3
    # [Description("イベント")]
    Event = 4
    # [Description("不具合補填")]
    Compensation = 5
    # [Description("リテンション")]
    Retention = 6

# [Description("ショップ商品選択情報")]
# [MessagePackObject(True)]
@_dataclass(slots=True)
class SelectShopProductInfo():
    MbId: int = 0
    ProductId: str = ""
    ShopProductType: _ShopProductType = _field(default_factory=lambda: _ShopProductType())

# [Description("ユーザー設定タイプ")]
class UserSettingsType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("テキスト言語")]
    TextLanguage = 1
    # [Description("ボイス言語")]
    VoiceLanguage = 2
    # [Description("オプトイン/アウト")]
    PrivacySettings = 3

# [Description("GvGのダイアログタイプ")]
class GvgDialogType(_Enum):
    # [Description("不明")]
    None_ = 0
    # [Description("バトルダイアログ")]
    Battle = 1
    # [Description("編成ダイアログ")]
    Deploy = 2

class GvgCastleMemoMarkType(_Enum):
    # [Description("攻撃(強)")]
    StrongAttack = 1
    # [Description("攻撃(弱)")]
    Attack = 2
    # [Description("防衛(強)")]
    StrongDefense = 3
    # [Description("防衛(弱)")]
    Defense = 4
    # [Description("汎用")]
    Common = 5
    # [Description("禁止")]
    Forbidden = 6

# [MessagePackObject(False)]
_ChatIdentityInfo = ChatIdentityInfo
_ChatReactionType = ChatReactionType
@_dataclass(slots=True)
class ReactChatInfo(_ArrayPacked):
    # [Key(0)]
    ChatIdentityInfo: _ChatIdentityInfo = _field(default_factory=lambda: _ChatIdentityInfo())
    # [Key(1)]
    ChatReactionType: _ChatReactionType = _field(default_factory=lambda: _ChatReactionType())
    # [Key(2)]
    IsCanceled: bool = False
    # [Key(3)]
    ReactPlayerId: int = 0

# [MessagePackObject(False)]
@_dataclass(slots=True)
class ChangeChatOptionInfo(_ArrayPacked):
    # [Key(0)]
    ChatIdentityInfo: _ChatIdentityInfo = _field(default_factory=lambda: _ChatIdentityInfo())
    # [Key(1)]
    CanReact: bool = False
    # [Key(2)]
    IsAnnounced: bool = False

# [MessagePackObject(False)]
@_dataclass(slots=True)
class PartyInfoSlim(_ArrayPacked):
    # [Key(0)]
    AliveCharacterIdList: list[int] = _field(default_factory=list["int"])
    # [Key(1)]
    BattlePower: int = 0
    # [Key(2)]
    OwnerPlayerId: int = 0
    # [Key(3)]
    OwnerPlayerRank: int = 0
    # [Key(4)]
    UserGvgCharacterInfoSlimList: list[UserGvgCharacterInfoSlim] = _field(default_factory=list["UserGvgCharacterInfoSlim"])

# [Description("LocalGvGの、城の状態")]
class GvgCastleState(_Enum):
    # [Description("通常時")]
    None_ = 0
    # [Description("宣戦され、交戦中")]
    InBattle = 1
    # [Description("陥落した")]
    Fallen = 2
    # [Description("反撃")]
    InCounter = 3
    # [Description("反撃に成功した")]
    CounterSuccess = 4

# [Description("KO数のエフェクト種別")]
class GvgKnockOutEffectType(_Enum):
    # [Description("エフェクトなし")]
    None_ = 0
    # [Description("黒")]
    Black = 1
    # [Description("赤")]
    Red = 2
    # [Description("紫")]
    Purple = 3
    # [Description("青")]
    Blue = 4

# [MessagePackObject(True)]
@_dataclass(slots=True)
class GvgActivePlayerInfo():
    BattleFieldCharacterGroupType: _BattleFieldCharacterGroupType = _field(default_factory=lambda: _BattleFieldCharacterGroupType())
    GuildId: int = 0
    MaxPartyKnockOutCount: int = 0
    PlayerId: int = 0
    Rank: int = 0

# [MessagePackObject(False)]
_GvgCastleState = GvgCastleState
@_dataclass(slots=True)
class CastleInfo(_ArrayPacked):
    # [Key(0)]
    CastleId: int = 0
    # [Key(1)]
    GuildId: int = 0
    # [Key(2)]
    AttackerGuildId: int = 0
    # [Key(3)]
    AttackPartyCount: int = 0
    # [Key(4)]
    DefensePartyCount: int = 0
    # [Key(5)]
    GvgCastleState: _GvgCastleState = _field(default_factory=lambda: _GvgCastleState())
    # [Key(6)]
    UtcFallenTimeStamp: int = 0
    # [Key(7)]
    LastWinPartyKnockOutCount: int = 0

# [MessagePackObject(False)]
_UserGvgCharacterInfo = UserGvgCharacterInfo
@_dataclass(slots=True)
class PartyCharacterInfo(_ArrayPacked):
    # [Key(0)]
    UserGvgCharacterInfo: _UserGvgCharacterInfo = _field(default_factory=lambda: _UserGvgCharacterInfo())
    # [Key(1)]
    CurrentActionPoint: int = 0
    # [Key(2)]
    IsDeployed: bool = False

# [MessagePackObject(False)]
_GvgCastleMemoMarkType = GvgCastleMemoMarkType
@_dataclass(slots=True)
class CastleMemoInfo(_ArrayPacked):
    # [Key(0)]
    CastleId: int = 0
    # [Key(1)]
    GvgCastleMemoMarkType: _GvgCastleMemoMarkType = _field(default_factory=lambda: _GvgCastleMemoMarkType())
    # [Key(2)]
    Message: str = ""

